/***************************************************************************
*                             Lisaac Library                               *
*                      (c) INRIA 2003 see 'licence.txt' for more details   *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                    Benoit SONNTAG - bsonntag@loria.fr                    *
*                          http://www.IsaacOS.com                          *
***************************************************************************/

section HEADER
  
  - name        := ENVIRONMENT; // expanded
  
  - category    := MICRO;
  
  - bibliography:= "http://IsaacOS.com";
  - author      := "Boutet Jerome (boutet@loria.fr)";
  - comment     := "Execute system command and to get/set environment variables.";


section PUBLIC

  - get_environment_variable variable:ABSTRACT_STRING :STRING <-
  // Try to get the value of the system environment `variable' or some
  // `variable' in the system registry. Gives NULL when no information
  // about the `variable' is available. Under UNIX like system, this is in
  // fact the good way to know about some system environment variable.
  // Under Windows, this function also look in the system registery.
  (
    + result:STRING;
    + p:NATIVE_ARRAY[CHARACTER];
    ? { variable != NULL };
    result := STRING.create 0;
    p := basic_getenv(variable.to_external);
    (p != NULL).if {
      result.from_external p;
    };
    result
  );

  - set_environment_variable variable,value:ABSTRACT_STRING <-
  // Try to assign the system environment `variable' with `value'.
  (
    ? { variable != NULL };
    ? { value != NULL };
    basic_putenv variable,value;
  );
  
  - execute_command system_command_line:ABSTRACT_STRING :INTEGER <-
  // To execute a `system_command_line' as for example, "ls -l" on UNIX.
  // The `Result' depends of the actual operating system. As an exemple,
  // this `execute' feature is under UNIX the equivalent of a `system' call.
  (
    ? { system_command_line != NULL};
    basic_system_execute_command (system_command_line.to_external)
  );

  - execute_command_line system_command_line:ABSTRACT_STRING <-
  // The equivalent of `execute_command' without `Result'.
  (
    execute_command (system_command_line);
  );
  
section PRIVATE

  - basic_getenv environment_variable:NATIVE_ARRAY[CHARACTER] :NATIVE_ARRAY[CHARACTER] <-
  // To implement `get_environment_variable'.
  (
    `getenv((char*)@environment_variable)`:NATIVE_ARRAY[CHARACTER]
  );
  
  - basic_putenv variable,value:ABSTRACT_STRING <-
  // To implement `set_environment_variable'.
  (
    + v:NATIVE_ARRAY[CHARACTER];
    
    v := NATIVE_ARRAY[CHARACTER].calloc (variable.count + value.count + 2);
    v.copy_from (variable.to_external) until (variable.upper);
    v.put '=' to (variable.count);
    v.copy (value.to_external) to (variable.count + 1) until (value.capacity);
    v.put '\0' to (variable.count + 1 + value.count);
    `putenv((char*)@v)`;
  );
  
  - basic_system_execute_command system_command_line:NATIVE_ARRAY[CHARACTER] :INTEGER <-
  (
    `system(((char*)(@system_command_line)))`:INTEGER
  );



