Section Header

  + name    := ITM_ARGS;

  - comment := "One argument vector";

Section Inherit

  + parent_itm_argument:Expanded ITM_ARGUMENT;

Section Public

  + name:ARRAY STRING_ALIAS;

  + type:ITM_TYPE_MULTI;

  - upper:INTEGER <- name.upper;
  
  + hash_code:INTEGER;

  //
  // Creation.
  //

  - create p:POSITION name n:ARRAY STRING_ALIAS
  type t:ITM_TYPE_MULTI :SELF <-
  ( + result:SELF;

    result := SELF.clone;
    result.make p name n type t;
    result
  );

  - make p:POSITION name n:ARRAY STRING_ALIAS
  type t:ITM_TYPE_MULTI <-
  ( + c:INTEGER;
    position := p;
    name     := n;
    type     := t;
    (name.lower).to (name.upper) do { i:INTEGER;
      c := c + name.item i.hash_code;
    };
    hash_code := c + t.hash_code;
  );

  //
  // Running.
  //

  - item idx:INTEGER :ITM_TYPE <-
  ( ? {idx.in_range 0 to upper};
    type.item idx
  );

  - to_run_in arg_lst:ARRAY LOCAL for p:PARAMETER_TO_TYPE <-
  ( + t:TYPE_FULL;

    (name.lower).to (name.upper) do { j:INTEGER;
      t := type.item j.to_run_for p;
      arg_lst.add_last (
	LOCAL.create position name (name.item j) style ' ' type t
      );
      (verify).if {
        check_local_with_slot position name (name.item j);
      };
    };
  );

  - get_index_type p:ITM_TYPE_PARAMETER :INTEGER <-
  ( + i:INTEGER;

    i := name.lower;
    {(i <= name.upper) && {type.item i != p}}.while_do {
      i := i + 1;
    };
    i
  );

  - check arg:EXPR for p:PARAMETER_TO_TYPE :EXPR <-
  ( + new_expr:EXPR;
    + em:EXPR_MULTIPLE;
        
    em ?= arg;
    (type.lower).to (type.upper) do { i:INTEGER;
      new_expr := em.expr_list.item i.check_type (type.item i.to_run_for p) with position;
      em.expr_list.put new_expr to i;      
    };
    arg
  );

  //
  // Display.
  //

  - append_in buffer:STRING_BUFFER <-
  (
    buffer.add_last '(';
    (name.lower).to (name.upper - 1) do { j:INTEGER;
      buffer.append (name.item j);
      buffer.add_last ':';
      type.item j.append_in buffer;
      buffer.add_last ',';
    };
    buffer.append (name.last);
    buffer.add_last ':';
    type.last.append_in buffer;
    buffer.add_last ')';
  );

  - shorter_in buf:STRING_BUFFER <-
  (
    buf.add_last '(';
    (name.lower).to (name.upper - 1) do { j:INTEGER;
      (name.item j = "Self").if {
        put (name.item j) to buf like "keyword";
      } else {
        put (name.item j) to buf like "local";
      };
      buf.add_last ':';
      type.item j.shorter_in buf;
      buf.add_last ',';
    };
    put (name.last) to buf like "local";
    buf.add_last ':';
    type.last.shorter_in buf;
    buf.add_last ')';
  );


