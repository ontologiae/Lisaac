Section Header

  + name    := COP_LOCK;

  - copyright := "2003-2007 Benoit Sonntag";

  - author  := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment := "COP in for data or function.";

Section Inherit

  + parent_instr:Expanded INSTR;

Section Public

  + data:EXPR;

  //
  // Creation.
  //

  - create p:POSITION with dta:EXPR :SELF <-
  ( + result:SELF;

    result := clone;
    result.make p with dta;
    result
  );

  - make p:POSITION with dta:EXPR <-
  (
    position := p;
    data := dta;
  );

  - my_copy:SELF <-
  (
    create position with (data.my_copy)
  );

  - remove <-
  (
    data.remove;
  );

  //
  // Execute.
  //

  - execute:INSTR <-
  (
    Self
  );

  //
  // Generation.
  //

  - genere buffer:STRING <-
  (
    buffer.append "// Pre thread.\n";
    //  buffer.append "print_char('(');\n";
    //  buffer.append "print_char('\\n');\n";
    buffer.append indent;
    buffer.append "{ lith_node node,*n;\n";
    indent.append "  ";
    buffer.append indent;
    buffer.append "lith_object *obj;\n";
    buffer.append indent;
    buffer.append "void *thread_save;\n";
    buffer.append indent;
    buffer.append "obj = &((";
    data.genere buffer;
    buffer.append ")->thread);\n";
    buffer.append indent;
    buffer.append "node.next = NULL;\n";
    buffer.append indent;
    buffer.append "pthread_mutex_init(&node.mutex,NULL);\n";
    buffer.append indent;
    buffer.append "pthread_mutex_lock(&obj->mutex);\n";
    buffer.append indent;
    buffer.append "n = obj->last;\n";
    buffer.append indent;
    buffer.append "if (n == NULL) {\n";
    buffer.append indent;
    buffer.append "  obj->first = &node;\n";
    buffer.append indent;
    buffer.append "} else {\n";
    buffer.append indent;
    buffer.append "  n->next = &node;\n";
    buffer.append indent;
    buffer.append "  pthread_mutex_lock(&node.mutex);\n";
    buffer.append indent;
    buffer.append "};\n";
    buffer.append indent;
    buffer.append "obj->last = &node;\n";
    buffer.append indent;
    buffer.append "pthread_mutex_unlock(&obj->mutex);\n";
    //
    buffer.append indent;
    buffer.append "pthread_mutex_lock (&node.mutex);\n";
    buffer.append indent;
    buffer.append "thread_save=pthread_getspecific(current_thread);\n";
    buffer.append indent;
    buffer.append "pthread_setspecific(current_thread,";
    data.genere buffer;
    buffer.add_last ')';
  );

  //
  // Display.
  //

  - display buffer:STRING <-
  (
    buffer.append "COP_LOCK(";
    data.display buffer;
    buffer.add_last ')';
  );

