/***************************************************************************
*                      Isaac Object Operating System                       *
*                             Isaac                                        *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
***************************************************************************/
section HEADER

  - name    := KEYBOARD;
  
  - category:= MICRO;
  
  - bibliography:="http://IsaacOS.com";
  - author      :="Boutet Jerome (boutet@loria.fr),Sonntag Benoit (bsonntag@loria.fr)";
  - comment     :="All the method for keyboard";

  - version :="1.0";  
  - date    :="2003/04";
  
section INHERIT
  
  * parent_input_keyboard:INPUT_KEYBOARD;

section PRIVATE
 
  + e_code:BOOLEAN;   // TRUE If extended mode 

  + bin_code:FIXED_ARRAY[USMALLINT]; // Binary array of keys (102+7)/8

  + cmd:USMALLINT;    // 0:CTRL 1:AltGr 2:Alt 3:Cmd 4:Shift 5:Cap 6:NumLock 7:Scrolllock

  + ascii_code:USMALLINT; // For <Alt>+<NbAscII>
  
  // Lower case.
  - cmin:STRING_CONSTANT := "\0d\&Ç\"\39d\(-ä_áÖ)=\1d\\2d\azertyuiop^$\3d\^qsdfghjklmó˝^*wxcvbn,;:!^*^ ";
  // Upper case.
  - cmaj:STRING_CONSTANT := "\0d\1234567890¯+\1d\\2d\AZERTYUIOP˘ú\3d\^QSDFGHJKLM%˝^ÊWXCVBN?./^*^ ";

  - cmm:STRING_CONSTANT  := "\27d\\8d\\9d\\13d\"; // 0:Echap 1:Del 2:Tab 3:Enter
  - caltgr:STRING_CONSTANT  := "'ê~#{[|`\\^@]}";
  
  // Num keyb.
  - keynum0:STRING_CONSTANT := "789-456+1230."; // from 70-82
  - keynum1:STRING_CONSTANT := "BUA\0d\LMR\0d\ELZIS"; // Without NumLock
  
  // Extended keyboard from 88 to 102
  - ext_key:STRING_CONSTANT := "\55d\\28d\\52d\\27d\\70d\\78d\\81d\\82d\\76d\\74d\\71d\\79d\\80d\\72d\\54d\"; 
  - buf_extk:STRING_CONSTANT := "\13d\BEISRLUDZAH";

section PUBLIC  
  
  - old_scan:USMALLINT;
  
  //
  // Get Character (Interrupt #21)
  //

  - get_scan <-
  ( + cu,scancode,tmp:USMALLINT;
        
    scancode:=SYSTEM.itemb 60h;     
    (scancode != old_scan).if {
      old_scan := scancode;
      cu:=getcode (scancode-1);
      (cu!=0).if {
	// Routine Pour Reboot Violant : CTRL+(ALT | ALT Gr)+Suppr
	((cu=='S'.to_usmallint) && { ((cmd&0Fh)==0Dh) || {(cmd&0Fh)==0Bh} }).if {
	  "Reboot ...\n".print;
	  die_with_code exit_failure_code;
	};
	
	tmp:=(p_end+1)&003h;
	buffer_event.item p_end.make ((cmd.to_ushortint<<8)|cu);
	(((tmp+2)&3)!=p_beg).if {
	  p_end:=tmp;
	};
	get_event;
      };
    };
  );
  
section PRIVATE
  
  - send_cmd comm,dta:USMALLINT <-
  // Send a command to keyboard 
  (
    // Empty buffer
    { ((SYSTEM.itemb 64h) & 2) != 0}.while_do {
      SYSTEM.itemb 60h;                         
    };    
    // Send command
    SYSTEM.putb comm to 60h;                      
    // Waiting for answer
    { ((SYSTEM.itemb 64h) & 1) == 0}.while_do {};       
    // Read answer
    SYSTEM.itemb 60h;                           
    // Send data
    SYSTEM.putb dta to 60h;                      
    // Waiting for answer
    { ((SYSTEM.itemb 64h) & 1) == 0}.while_do {};   
    // Read answer
    SYSTEM.itemb 60h;                           
  );
  
  - light <-
  (
    send_cmd 0EDh,(((cmd & 80h)>>7)|((cmd & 40h)>>5)|((cmd & 20h)>>3));
  );

  - keyup cu:USMALLINT :USMALLINT <-
  ( + result:USMALLINT;
    cmd := cmd & 0F7h; // Deactivate the cmd bit    
    bin_code.put ((bin_code.item (cu>>3)) & ~(1<<(cu&7))) to (cu>>3);
    // Analyze: for deactivate the cmd
    ((cu == 28) || {cu == 89}).if {
      //CTRL 1 or CTRL2
      cmd := cmd & (~01h);
    }.elseif { cu == 88 } then {
      // Alt Gr
      cmd := cmd & (~02h);
    }.elseif { cu == 55 } then {
      // Alt
      cmd := cmd & (~04h);      
      result := ascii_code;
      ascii_code := 0;      
    }.elseif { (cu == 41) || { cu == 53} } then {
      // Shift 1 or Shift 2
      cmd := cmd & (~10h);
    };
    result
  );

  - keydown cu:USMALLINT :USMALLINT <-
  ( + cu2,result:USMALLINT;
    bin_code.put ((bin_code.item (cu>>3)) | (~(1<<(cu&7)))) to (cu>>3); // Activate key
    // Analyze: for activate the cmd
    ((cu == 28) || {cu == 89}).if {
      //CTRL 1 or CTRL2
      cmd := cmd | 01h;
    }.elseif { cu == 88 } then {
      // Alt Gr
      cmd := cmd | 02h;
    }.elseif { cu == 55 } then {
      // Alt
      cmd := cmd | 04h;      
    }.elseif { (cu == 41) || { cu == 53} } then {
      // Shift 1 or Shift 2
      cmd := cmd | 10h;
      ((cmd & 20h)!=0).if {
	cmd := cmd & (~20h);
	light;
      };
    }.elseif { cu == 57 } then {
      // Cap
      cmd := cmd ^ 20h;
      light;
    }.elseif { cu == 68 } then {
      // Num Lock
      cmd := cmd ^ 40h;
      light;
    }.elseif { cu == 69 } then {
      // Scroll Lock
      cmd := cmd ^ 80h;
      light;
    }.elseif { cu<=56 } then {
      (cu == 0).if {
	// Esc
	cmd :=  cmd | 08h;
	result := cmm.item 1.to_usmallint;
      }.elseif {((cmd&2)!=0) && {cu<=12}} then {
	cmd :=  cmd & (~02h);
	result := caltgr.item cu.to_usmallint;
      } else {
	((cmd & 30h)==0).if {
	  cu2 := cmin.item (cu+1).to_usmallint;
	} else {
	  cu2 := cmaj.item (cu+1).to_usmallint;
	};
	((cu2 & 0FCh)!=0).if {
	  result := cu2;
	} else {
	  cmd := cmd | 08h;
	  result := cmm.item (cu2+1).to_usmallint;
	};	
      };
    }.elseif {cu <= 67} then {
      cmd :=  cmd | 08h;      // F1 to F10 = cmd
      result :=  cu+39;  // 'a' to 'j'
    }.elseif {cu < 85} then {
      cu2 := keynum0.item (cu-69).to_usmallint;
      (cu2 < 46).if {
	result := cu2;
      }.elseif {(cmd & 40h)!=0} then {
	((cmd & 04h)==0).if {
	  result := cu2;
	} else {
	  ascii_code := (ascii_code*10)+(cu2-48);
	};
      } else {
	cmd := cmd | 08h;      // cmd
	result := cu2;
      };
    }.elseif {cu==85} then {
      ((cmd & 30h)==0).if {
	result := '<'.to_usmallint;
      } else {
	result := '>'.to_usmallint;
      };
    }.elseif {cu<=87} then {
      cmd := cmd |08h;    // 'k' to 'l'
      result := cu+21;
    }.elseif {cu==90} then {
      result := '/'.to_usmallint;
    } else {
      cmd := cmd | 08h;
      result := buf_extk.item (cu-90).to_usmallint;       
    };
    result
  );
  
  - getcode cu:USMALLINT :USMALLINT <-
  // Translate Scan Code -> cmd.ASCII
  ( + j:INTEGER;
    + result:USMALLINT;
    (! e_code).if {
      // Non extended keys
      (cu==(0E0h-1)).if {
	e_code := TRUE;  // Extended Code
      } else {
	((cu & 80h)==0).if {
	  result :=  keydown cu.to_usmallint;
	} else {
	  result := keyup (cu & 07Fh).to_usmallint;
	};
      };
    } else {
      // Extended keys
      (cu!=(0E0h-1)).if {
	// not Pause
	(cu !=41).if {
	  e_code := FALSE;               // Deactivate extended code
	  (cu != 169).if {
	    {(ext_key.item (j+1).to_usmallint != (cu & 07Fh)) && {j < 15}}.while_do {
	      j := j + 1;
	    };
	    (j < 15).if {
	      ((cu & 80h)==0).if {
		result := keydown (88+j).to_usmallint;
	      } else {
		result := keyup (88+j).to_usmallint;
	      };
	    };
	  };
	};
      };
    };
    result
  );
  
  



