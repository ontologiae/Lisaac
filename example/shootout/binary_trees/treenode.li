///////////////////////////////////////////////////////////////////////////////
//                              Lisaac Example                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name         := TREENODE;
  
  - bibliography := "http://IsaacOS.com";
  - author       := "Xavier Oswald (x.oswald@free.fr)";
  - comment      := "Language shootout - binary-trees"; 
  
Section Inherit
  
  - parent_any:OBJECT := OBJECT;

Section Private

  + left  :TREENODE;

  + right :TREENODE;

  + item  :INTEGER;

Section Public
  
  - item_check:INTEGER <-
  ( + item_tmp:INTEGER;

    (left = NULL).if {
      item_tmp := item;
    } else {
      item_tmp := item + left.item_check - right.item_check;
    };
    item_tmp
  );

  - bottom_up_tree (item, depth:INTEGER) :SELF <-
  ( + result :SELF;

    result := clone;
    
    (depth > 0).if {
      result.make (
	bottom_up_tree(2*item-1, depth-1),
	bottom_up_tree(2*item, depth-1),
	item
      );
    } else {
      result.make_item_only item;
    };
    result
  );

  - make (l, r:TREENODE, i:INTEGER) <-
  (
    left  := l;
    right := r;
    item  := i;
  );

  - make_item_only i:INTEGER <-
  (
    item := i;
  );
