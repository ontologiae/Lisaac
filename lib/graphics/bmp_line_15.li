/***************************************************************************
*                      Isaac Object Operating System                       *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                   Jerome BOUTET  - boutet@loria.fr                       *
*                          http://www.IsaacOS.com                          *
****************************************************************************/

section HEADER
  
  + name        := BMP_LINE_15;
  
  - comment     := "Bitmap line 15 bits";
  
  - category    := MICRO;
  
  - bibliography:= "http://IsaacOS.com";
  - author      := "Benoit Sonntag (bsonntag@loria.fr), Jerome Boutet (boutet@loria.fr)";

section INHERIT
  
  * parent_bmp_line:BMP_LINE;
  
section PRIVATE
  
  + storage:MAP_NATIVE_ARRAY[PIXEL_15];
  
  - get_storage:NATIVE_ARRAY[USMALLINT] <- NATIVE_ARRAY[USMALLINT].force_conversion storage;
  
  - make n:INTEGER <-
  ( 
    capacity := n;
    upper    := n - 1;    
    storage  := MAP_NATIVE_ARRAY[PIXEL_15].calloc n;    
  );
  
  - make_with_capacity n:INTEGER <-
  (
    capacity := n;
    upper    := -1;
    storage  := MAP_NATIVE_ARRAY[PIXEL_15].calloc n;    
  );
  
  - make n:INTEGER at offset:UINTEGER <-
  ( 
    capacity := n;
    upper    := n - 1;    
    storage  := MAP_NATIVE_ARRAY[PIXEL_15].force_conversion offset;    
  );

section PUBLIC
  
  - pixel_geometry:PIXEL := PIXEL_15;
  
  //
  // Put.
  //
  
  - put col:UINTEGER from idx_begin:INTEGER to idx_end:INTEGER <- 
  ( + pixel:PIXEL_15;    
    ? {idx_begin<=idx_end};
    ? {idx_begin>=0};
    ? {idx_end.in_range 0 to upper};
    
    PIXEL_24.color col;
    pixel := PIXEL_24.to_pixel_15;
    idx_begin.to idx_end do { n:INTEGER;
      storage.item n.copy pixel;
    };
  );
  
  - put bmp:BMP_LINE offset ofs:INTEGER from idx_begin:INTEGER to idx_end:INTEGER <-
  ( + offset:INTEGER;
    + pixel:PIXEL_15;
    ? {idx_begin <= idx_end};
    ? {idx_begin >= 0};
    ? {idx_end.in_range 0 to upper};
    ? {ofs >= 0};
    ? {(ofs + (idx_end - idx_begin)) <= bmp.upper}; 
        
    offset := ofs;
    idx_begin.to idx_end do { n:INTEGER;
      pixel := bmp.item_15 offset;
      storage.item n.copy pixel;
      offset := offset + 1;
    };
  );
  
  //
  // Get.
  //
  
  - item n:INTEGER :PIXEL <-
  ( ? {n.in_range 0 to upper};
    storage.item n
  );
    



