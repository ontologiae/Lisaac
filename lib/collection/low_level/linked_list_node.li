///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Library                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := LINKED_LIST_NODE[E];


  - copyright   := "2003-2005 JÃ©rome Boutet, 2003-2007 Benoit Sonntag";
  
  - comment := "To implement LINKED_LIST[E]. .";
    
Section Inherit
  
  - parent_any_linked_list_node:ANY_LINKED_LIST_NODE := ANY_LINKED_LIST_NODE;
  
Section Public
  
  + item:E;
  
  + next:LINKED_LIST_NODE[E];
  
Section LINKED_LIST
  
  - create i:E next n:LINKED_LIST_NODE[E] :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make i next n;
    result
  );
  
  - make i:E next n:LINKED_LIST_NODE[E] <-
  (    
    item := i;
    next := n;
  )
  [
    +? {item = i};
    +? {next = n};
  ];
  
  
Section LINKED_LIST_NODE,LINKED_LIST
  
  - set_item i:E <-
  (
    item := i;
  )
  [
    +? {item = i};
  ];
    
  - set_next n:LINKED_LIST_NODE[E] <-
  (
    next := n;
  )
  [
    +? {next = n};
  ];
    
  - set_all_with v:E <-
  ( + lnk:SELF;
    
    lnk := Self;
    {lnk = NULL}.until_do {
      lnk.set_item v;
      lnk := lnk.next;
    };
  );

