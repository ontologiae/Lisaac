Section Header

  + name    := Expanded  REAL_24_8;

  - export  := REAL_32, REAL_64;

  - comment := "signed 24.8 fixed float.";

  - type    := `signed long`;
  - default := (0.to_raw_real_24_8);

Section Insert

  - parent_signed_fixed_real:SIGNED_FIXED_REAL := SIGNED_FIXED_REAL;

Section SELF

  - shift_bits:INTEGER <- 8;

Section Public
  
  - round:INTEGER <-
  // Rounded integral value.
  ( + result:INTEGER;
    result := to_raw_integer;
    ((result & 80h) != 0).if {
      result := (result >> 8) + 1;
    } else {
      result := result >> 8;
    };
    result
  );

  //
  // Range.
  //

  - minimum:INTEGER_64 <- - 7F_FFFFh.to_raw_integer_64;

  - maximum:UINTEGER_64 <- 7F_FFFFh.to_raw_uinteger_64;

  //
  // Convertion format with test.
  //

  - to_real_24_8:REAL_24_8 <- Self;

  //
  // Convertion
  //

  - append_in buffer:STRING_BUFFER <-
  // Append in the `buffer' the equivalent of `to_string'. No new STRING_BUFFER
  // creation during the process.
  ( + val:INTEGER;
    + old_count,new_count:INTEGER;
    ? {buffer!=NULL};

    val := to_raw_integer;

    (val < 0).if {
      val := - val;
      buffer.extend '-';
    };
    (val >> 8).append_in buffer;
    buffer.extend '.';

    old_count:=buffer.count;
    //     1/256 = 0.00390625 => 8 digit.
    (((val & 255).to_uinteger_64 * 100000000)>>8).to_integer.append_in buffer;
    new_count:=old_count+8;
    {buffer.count!=new_count}.while_do {
      buffer.insert '0' to old_count;
    };

  );










