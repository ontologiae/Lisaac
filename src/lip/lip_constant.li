///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := LIP_CONSTANT;

  - copyright := "2003-2008 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";
  - comment   := "The main prototype";

Section Inherit
  
  - parent_any:ANY := ANY;
  
Section Public
  
  - name:STRING_CONSTANT <- ( deferred; NULL);
  
  - copy:LIP_CONSTANT <-
  (
    deferred;
  );
  
  - copy_of other:LIP_CONSTANT :LIP_CONSTANT <- 
  ( + result:LIP_CONSTANT;
    + s:SELF;
    s ?= other;
    (s != NULL).if {
      result := my_copy s;
    };
    result
  );
  
  - free <- deferred;
  
  - '-' Self:SELF :LIP_CONSTANT <- NULL;
  
  - '!' Self:SELF :LIP_CONSTANT <- NULL;  

  - Self:SELF '|'  other:LIP_CONSTANT :LIP_CONSTANT <- 
  ( + result:LIP_CONSTANT;
    + s:SELF;
    s ?= other;
    (s != NULL).if {
      result := Self |# s;
    };
    result
  );
  
  - Self:SELF '&'  other:LIP_CONSTANT :LIP_CONSTANT <- 
  ( + result:LIP_CONSTANT;
    + s:SELF;
    s ?= other;
    (s != NULL).if {
      result := Self &# s;
    };
    result
  );
  
  - Self:SELF '+'  other:LIP_CONSTANT :LIP_CONSTANT <- 
  ( + result:LIP_CONSTANT;
    + s:SELF;
    s ?= other;
    (s != NULL).if {
      result := Self +# s;
    };
    result
  );
  
  - Self:SELF '-'  other:LIP_CONSTANT :LIP_CONSTANT <- 
  ( + result:LIP_CONSTANT;
    + s:SELF;
    s ?= other;
    (s != NULL).if {
      result := Self -# s;
    };
    result
  );
  
  - Self:SELF '>'  other:LIP_CONSTANT :LIP_CONSTANT <- 
  ( + result:LIP_CONSTANT;
    + s:SELF;
    s ?= other;
    (s != NULL).if {
      result := Self ># s;
    };
    result
  );

  - Self:SELF '<'  other:LIP_CONSTANT :LIP_CONSTANT <- 
  ( + result:LIP_CONSTANT;
    + s:SELF;
    s ?= other;
    (s != NULL).if {
      result := Self <# s;
    };
    result
  );
  
  - Self:SELF '~='  other:LIP_CONSTANT :LIP_CONSTANT <-
  ( + result:LIP_CONSTANT;
    + s:SELF;
    s ?= other;
    (s != NULL).if {
      result := Self =# s;
    };
    result
  );
  
  - Self:SELF '>=' other:LIP_CONSTANT :LIP_CONSTANT <- 
  ( + result:LIP_CONSTANT;
    + s:SELF;
    s ?= other;
    (s != NULL).if {
      result := Self >=# s;
    };
    result
  );
  
  - Self:SELF '<=' other:LIP_CONSTANT :LIP_CONSTANT <- 
  ( + result:LIP_CONSTANT;
    + s:SELF;
    s ?= other;
    (s != NULL).if {
      result := Self <=# s;
    };
    result
  );
  
  - Self:SELF '!~=' other:LIP_CONSTANT :LIP_CONSTANT <-
  ( + result:LIP_CONSTANT;
    + s:SELF;
    s ?= other;
    (s != NULL).if {
      result := Self !=# s;
    };
    result
  );
  
  - print <- deferred;
  
Section LIP_CONSTANT
  
  - my_copy other:SELF :LIP_CONSTANT <- NULL;
  
  - Self:SELF '|#'  other:SELF :LIP_CONSTANT <- NULL;
  
  - Self:SELF '&#'  other:SELF :LIP_CONSTANT <- NULL;  
  
  - Self:SELF '+#'  other:SELF :LIP_CONSTANT <- NULL;
  
  - Self:SELF '-#'  other:SELF :LIP_CONSTANT <- NULL;  
  
  - Self:SELF '>#'  other:SELF :LIP_CONSTANT <- NULL;

  - Self:SELF '<#'  other:SELF :LIP_CONSTANT <- NULL;
  
  - Self:SELF '=#'  other:SELF :LIP_CONSTANT <- NULL;
  
  - Self:SELF '>=#' other:SELF :LIP_CONSTANT <- NULL;
  
  - Self:SELF '<=#' other:SELF :LIP_CONSTANT <- NULL;
  
  - Self:SELF '!=#' other:SELF :LIP_CONSTANT <- NULL;

