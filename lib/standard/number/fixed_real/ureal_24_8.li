Section Header

  + name    := Expanded UREAL_24_8;

  - export  := REAL_32, REAL_64;

  - comment := "signed 24.8 fixed float.";

  - type    := `signed long`;
  - default := (0.to_raw_ureal_24_8);

Section Insert

  - parent_unsigned_fixed_real:UNSIGNED_FIXED_REAL := UNSIGNED_FIXED_REAL;

Section SELF

  - shift_bits:INTEGER <- 8;

Section Public

  //
  // Range.
  //

  - maximum:UINTEGER_64 <- 0FF_FFFFh.to_raw_uinteger_64;

  //
  // Convertion format with test.
  //

  - to_real_24_8:REAL_24_8 <- Self;

  //
  // Convertion
  //

  - append_in buffer:STRING <-
  // Append in the `buffer' the equivalent of `to_string'. No new STRING
  // creation during the process.
  ( + val:INTEGER;
    + old_count,new_count:INTEGER;
    ? {buffer!=NULL};

    val := to_raw_integer;

    (val < 0).if {
      val := - val;
      buffer.extend '-';
    };
    (val >> 8).append_in buffer;
    buffer.extend '.';

    old_count:=buffer.count;
    //     1/256 = 0.00390625 => 8 digit.
    (((val & 255).to_uinteger_64 * 100000000)>>8).to_integer.append_in buffer;
    new_count:=old_count+8;
    {buffer.count!=new_count}.while_do {
      buffer.insert '0' to old_count;
    };

  );










