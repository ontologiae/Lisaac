Section Header
  
  + name := Expanded COLOR;
  
Section Inherit
  
  - parent_object:OBJECT := OBJECT;

Section Public
  
  - stack:ARRAY COLOR := ARRAY COLOR.create_with_capacity 16;
  
Section Mapping, Public
  
  + r:REAL_32;
  + g:REAL_32;
  + b:REAL_32;
  + a:REAL_32;
  
Section Public
  
  - rgb (pr,pg,pb:UINTEGER_8) :SELF <- rgba (pr,pg,pb,255);

  - rgbf (pr,pg,pb:REAL_32) :SELF <- rgbaf (pr,pg,pb,1.0);
  
  - rgba (pr,pg,pb,pa:UINTEGER_8) :COLOR <-
  (
    rgbaf (
      pr.to_real_32/255,pg.to_real_32/255,
      pb.to_real_32/255,pa.to_real_32/255
    )
  );

  - rgbaf (pr,pg,pb,pa:REAL_32) :COLOR <-
  ( + result:COLOR;
    stack.add_last COLOR;    
    result := stack.last;   
    result.make (pr,pg,pb,pa);
    result
  );

  - make (pr,pg,pb,pa:REAL_32) <-
  (
    (r,g,b,a) := (pr,pg,pb,pa);
  );
  
  - set_a pa:UINTEGER_8 <- ( a := pa.to_real_32/255; );

  - set_af pa:REAL_32 <- ( a := pa; );
  
  - premul_color <-
  ( 
    (r,g,b) := (r*a,g*a,b*a);
  );

  - lerp_rgba c:SELF coef u:REAL_32 <-
  ( + uu,uui:REAL_32;
    
    uu  := u.clamp 0 and 1;
    uui := 1.0 - uu;
    r := uui*r + uu*c.r;
    g := uui*g + uu*c.g;
    b := uui*b + uu*c.b;
    a := uui*a + uu*c.a;
  );

  - hsl (h,s,l:REAL_32) :COLOR <- hsla (h,s,l) alpha 255;
  
  - hsla (h,s,l:REAL_32) alpha pa:UINTEGER_8 :COLOR <- // BSBS: Calcul en entier
  ( + m1,m2,ss,ll,hh,aa,rr,gg,bb:REAL_32;
    
    hh := h % 1;
    (hh < 0).if { hh := hh + 1; };
    ss := s.clamp 0 to 1;
    ll := l.clamp 0 to 1;
    (ll <= 0.5).if {
      m2 := ll * (1.0 + ss);
    } else {
      m2 := ll + ss - ll * ss;
    };
    m1 := 2.0 * ll - m2;
    rr := hue (hh + 1.0/3) with (m1,m2).clamp 0 to 1;
    gg := hue  hh          with (m1,m2).clamp 0 to 1;
    bb := hue (hh - 1.0/3) with (m1,m2).clamp 0 to 1;
    aa := pa.to_real_32 / 255;
    rgbaf (rr,gg,bb,aa)
  );
  
  - mul_a c:REAL_32 <-
  (
    a := c * a;
  );
  
  - print <-
  (
    r.print; ' '.print;
    g.print; ' '.print;
    b.print; ' '.print;
    a.print; 
  );
  
Section Private
  
  - hue hh:REAL_32 with (m1,m2:REAL_32) :REAL_32 <-
  ( + h,result:REAL_32;
    (hh < 0).if   { h := hh + 1; }.elseif
    {hh > 1} then { h := hh - 1; } else {
      h := hh;
    };
    (h < 1.0/6).if {
      result := m1 + (m2 - m1) * h * 6;
    }.elseif {h < 3.0/6} then {
      result := m2;
    }.elseif {h < 4.0/6} then {
      result := m1 + (m2 - m1) * (2.0/3 - h) * 6;
    } else {
      result := m1;
    };
    result
  );
