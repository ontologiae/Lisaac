///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ITM_READ_ARG1;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := 
  "For send message with one argument\ 
  \ (receiver) or unary message";
  
Section Inherit
  
  + parent_itm_read:Expanded ITM_READ;
  
Section Public
  
  //
  // Data
  //
 
  + arg:ITM_CODE;

  //
  // Constructor
  //
  
  - create p:POSITION name n:STRING_CONSTANT arg a:ITM_CODE :SELF <-
  ( + result:SELF;
    result := clone;
    result.make p name n arg a;
    result
  );
  
  - make p:POSITION name n:STRING_CONSTANT arg a:ITM_CODE <-
  (
    ? {a != NULL};
    position := p;
    name     := n;
    arg      := a;
  );
 
  //
  // Runnable
  //

  - to_run_expr:EXPR <-
  (     
    to_run_with arg args NULL
  );






