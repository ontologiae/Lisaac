/***************************************************************************
*                             Lisaac Library                               *
*                      (c) INRIA 2003 see 'licence.txt' for more details   *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
***************************************************************************/

section HEADER
  
  + name        :=BINARY_FILE_WRITE;
  
  - category    :=MICRO;
  
  - bibliography:="http://IsaacOS.com";
  
  - author      :="Boutet Jerome (boutet@loria.fr)";
  
  - comment     :=" ";
  
section INHERIT
  
  - parent_object:OBJECT := OBJECT;
  
section PUBLIC

  - path:ABSTRACT_STRING;
  // Not Void when connected to the corresponding file on the disk.

  - size_max:INTEGER := 32768;
  
  - is_connected:BOOLEAN <-
  (
    path != NULL
  );
   
  - connect_to new_path:ABSTRACT_STRING <-
  // Truncate file to zero length or create binary file for writing.
  // The stream is positioned at the beginning of the file.
  (
    ? { ! is_connected };
    ? { ! new_path.is_empty };

    output_stream := basic_io_binary_file_write_open (new_path.to_external);
    (output_stream.is_not_null).if {
      path := new_path;
      (capacity =0).if {
	buffer := NATIVE_ARRAY[USMALLINT].calloc size_max;
	capacity := size_max;
      };
    };
  );
  
  - connect_for_appending_to new_path:STRING <-
  // Truncate file to zero length or create binary file for writing.
  // The stream is positioned at the beginning of the file.
  (
    ? { ! is_connected };
    ? { ! new_path.is_empty };

    output_stream := basic_io_binary_file_write_append (new_path.to_external);
    ( output_stream.is_not_null ).if {
      path := new_path;
      ( capacity = 0 ).if {
	buffer := NATIVE_ARRAY[USMALLINT].calloc size_max;
	capacity := size_max;
      };
    };
  );

  - flush <-
  // forces a write of unwritten character (write my have been 
  // delayed, flush writes buffered characters)
  (
    ( buffer_position > 0 ).if {
      write_buffer;
    };
    basic_io_flush output_stream;
  );

  - disconnect <-
  (
    ? { is_connected };

    ( buffer_position > 0 ).if {
      write_buffer;
    };
    basic_io_fclose output_stream;
    path := NULL;
  );
  
  - put_character byte:CHARACTER <-
  (
    ? { is_connected };
    
    ( buffer_position >= size_max ).if {
      write_buffer;
    };
    buffer.put (byte.to_usmallint) to buffer_position;
    buffer_position := buffer_position + 1;
  );

  - put_byte byte:USMALLINT <-
  (
    ? { is_connected };
    
    ( buffer_position >= size_max ).if {
      write_buffer;
    };
    buffer.put byte to buffer_position;
    buffer_position := buffer_position + 1;
  );

  - buffer:NATIVE_ARRAY[USMALLINT];
  
  - buffer_position:INTEGER;
  
  - capacity:INTEGER;
  
  - output_stream:POINTER;
  
  - create:SELF <-
  ( + result:SELF;
    
    result:=SELF.clone;
    result.make;
    result
  );
  
  - make <-
  // The new created object is not connected. (See also `connect_to' and
  // `connect_for_appending_to'.)
  (
    buffer := NATIVE_ARRAY[USMALLINT].calloc size_max;
    capacity := size_max;
    
    ? { ! is_connected };
  );
  
  - dispose <-
  (
    ? { ! is_connected };
  );

  - write_buffer <-
  (
    ( buffer_position > 0 ).if {
      basic_io_fwrite buffer, buffer_position, output_stream;
      buffer_position := 0;
    };
  );
  
section PRIVATE
  
  - basic_io_binary_file_write_open path_pointer:NATIVE_ARRAY[CHARACTER] :POINTER <-
  (
    `fopen(((char*)(@path_pointer)),"wb")`:POINTER
  );
  
  - basic_io_binary_file_write_append path_pointer:NATIVE_ARRAY[CHARACTER] :POINTER <-
 (
    `fopen(((char*)(@path_pointer)),"ab")`:POINTER
  );

  - basic_io_putc byte:CHARACTER, stream:POINTER <-
  (
    `putc((@byte),((FILE*)(@stream)))`;
  );

  - basic_io_fwrite buf:NATIVE_ARRAY[USMALLINT],size:INTEGER,stream:POINTER <-
  (
    `fwrite((void *)(@buf),(size_t)(1), (size_t)(@size),(FILE*)(@stream))`;
  );
  
  - basic_io_flush stream_pointer:POINTER <-
  (
    `fflush((FILE*)(@stream_pointer))`;
  );
  
  - basic_io_fclose stream_pointer:POINTER <-
  (
    `fclose((FILE*)(@stream_pointer))`;
  );