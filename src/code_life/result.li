///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := RESULT;

  - copyright := "2003-2008 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";
  - comment   := "The main prototype";

Section Inherit

  - parent_expr:EXPR := EXPR;

Section Public
  
  - position:POSITION <- value.position;
  
  + write:WRITE;  
  
  - set_write v:WRITE <-
  (
    write := v;
  );
  
  //
  // Creation.
  //

  - create v:WRITE :SELF <-
  ( + result:SELF;
    result := clone;
    result.make v;
    result
  );

  - make v:WRITE <-
  ( 
    write := v;
  );
  
  - my_copy:SELF <-
  ( + wrt:WRITE;
    + rd:READ;
    rd  ?= write.value;
    rd  := rd.variable.read_direct (rd.position) with NULL;   
    wrt := write.variable.write (write.position) with NULL value rd;    
    create wrt
  );
  
  //
  // Remove
  //
  
  - remove <-
  (
    write.remove;
  );
    
  //
  // Expr definition.
  // 
  
  - static_type:TYPE_FULL <- write.value.static_type;
  
  - get_type t:TYPES_TMP  <- write.value.get_type t;
  
  - execute_link:EXPR     <- write.execute_link;
  
  - execute_unlink:INSTR  <- write.execute_unlink;
  
  