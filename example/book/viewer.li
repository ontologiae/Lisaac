Section Header
  
  + name    := VIEWER;
    
  - bibliography:= "http://www.lisaac.org";
  
  - author      := "Benoit Sonntag (bsonntag@loria.fr)";
  
  - comment     := "Viewer with book style";
    
Section Inherit  
  
  + parent_area:Expanded AREA;
  
  + parent_g_expr:Expanded G_EXPR;
  
Section Private
    
  - init:G_EXPR <-
  (    
    G_RAW.create (Self.fix_height.fix_width)
  );
  
  - x_corner:INTEGER;
  - y_corner:INTEGER;
  - n_corner:INTEGER := -1;
  
  - page_width:INTEGER  := 512;
  - page_height:INTEGER := 724;
    
  - n_page:INTEGER := -1;
  
  - pages_files:FAST_ARRAY(STRING) := FAST_ARRAY(STRING).create_with_capacity 256;
  
  - pages:FAST_ARRAY(ABSTRACT_BITMAP) := 
  ( + result:FAST_ARRAY(ABSTRACT_BITMAP);
    result := FAST_ARRAY(ABSTRACT_BITMAP).create_with_capacity 6;    
    1.to 6 do { i:INTEGER;            
      result.add_last (BITMAP(PIXEL_24).create_size (826,1169));    
    };
    result
  );
  
  - load_page i:INTEGER to idx:INTEGER <-  
  ( + bmp:ABSTRACT_BITMAP;
    + fmt:FORMAT_BMP;
    + f:FILE;    
    (i.in_range 0 to (pages_files.upper)).if {
      f ?= FILE_SYSTEM.get_entry (pages_files.item i);
      f.open;
      fmt := FORMAT_BMP.create_with_file f;
      bmp := pages.item idx;
      ((fmt.width != bmp.width) || {fmt.height != bmp.height}).if {
        bmp.make_size (fmt.width,fmt.height);	  
      };      
      fmt.put_image_in bmp;
      f.close;
    };
  );
  
  - bitmap:ABSTRACT_BITMAP;
  - background:ABSTRACT_BITMAP;
   
Section Public  
  
  //
  // Width / Height
  //
  
  - width_min:INTEGER  <- 1064; //bitmap.width;
  
  - height_min:INTEGER <- 768+150; //bitmap.height;
  
  //
  // Update position.
  //
  
  - set_position rac:AREA at (x,y:INTEGER) size (w,h:INTEGER) <-
  ( 
    update rac from (x,y) size (w,h);
  );  
  
  - main <-
  ( + x,y,i:INTEGER;    
    + f:FILE;
    + fmt:FORMAT_BMP;
    + name:STRING;
    
    i := 1;
    {
      name := STRING.create 16;
      name.copy "page";
      i.append_in name;
      name.append ".bmp";
      f ?= FILE_SYSTEM.get_entry name;
      (f != NULL).if {
        pages_files.add_last name;
        i := i + 1;
      };
    }.do_while {f != NULL};
    //
    0.to (2.min (pages_files.upper)) do { i:INTEGER;
      load_page i to (i+3);
    };
    //
    bitmap := BITMAP(PIXEL_24).create_size (width_min,height_min);
    //
    f ?= FILE_SYSTEM.get_entry "background.bmp";
    f.open;
    fmt := FORMAT_BMP.create_with_file f;
    background := BITMAP(PIXEL_24).create_size (fmt.width,fmt.height);    
    fmt.put_image_in background;
    f.close;
    //
    x := (width_min  - page_width*2 ) / 2;
    y := 150 + (((height_min-150) - page_height) / 2);
    border_left.add_last y;    
    border_left.add_last (x + page_width-1);
    border_left.add_last (y + page_height-1);
    border_left.add_last x;
    //
    x := x + page_width;
    border_right.add_last y;    
    border_right.add_last (x + page_width-1);
    border_right.add_last (y + page_height-1);
    border_right.add_last x;
    //
    x := pages.item 3.width;
    y := pages.item 3.height;
    border_bmp.add_last 0;    
    border_bmp.add_last (x-1);
    border_bmp.add_last (y-1);
    border_bmp.add_last 0;
    size_x := (x << 16) / page_width; 
    size_y := (y << 16) / page_height;
    zoom_size := (x << 16) / width_min;
    
    // Init window.    
    new_bitmap;
    VIDEO.make_size (width_min + 20,height_min + 150 + 20);
    TIMER.add_client Self;      
    // Screen definition.
    DESK.make VIDEO with init;
  );
  
  - zoom_page:INTEGER;
  - y_zoom:INTEGER;
  - zoom_size:INTEGER;
  
  //
  // Event.
  //
  
  - receive msg:EVENT <-  
  ( + evt_mouse:EVENT_MOUSE;
    + evt_time:EVENT_TIMER;
    + evt_keyb:EVENT_KEYBOARD;
    + win:AREA;
    + n,x,y:INTEGER;    
    - is_refresh,is_automatic,is_linear,is_zoom:BOOLEAN;
    // Elliptic version.
    - r:INTEGER;
    - angle, step_angle:REAL;
    // Linear version.
    - ax,ay,xx,yy,step:INTEGER;
    
    evt_keyb  ?= msg;
    (evt_keyb != NULL).if {
      ((evt_keyb.key & 0FFh).to_character = ' ').if {
        //next_picture;
      };
    };
    evt_mouse ?= msg;
    (evt_mouse != NULL).if {      
      win := DESK.get_object (evt_mouse.x_current,evt_mouse.y_current);
      (win != Self).if {
        DESK.receive msg;
      } else {
        (is_zoom).if {
          (evt_mouse.left).if {
            y_zoom := y_zoom + evt_mouse.dy;            
            is_refresh := TRUE;
          };
          (evt_mouse.right_down).if {
            is_zoom := FALSE;
            is_refresh := TRUE;
          };
        } else {
          (is_automatic).if_false {
            x_corner := evt_mouse.x_relative;
            y_corner := evt_mouse.y_relative;                
                    
            (! evt_mouse.left).if {                              
              (evt_mouse.left_down).if {            
                (n_corner = -1).if {              
                  is_zoom := TRUE;
                  (x_corner > border_right.item 3).if {
                    zoom_page := 3;                                        
                    y_zoom := ((y_corner - border_right.item 0)*size_y) >> 16;
                  } else {
                    zoom_page := 2;       
                    y_zoom := ((y_corner - border_left.item 0)*size_y) >> 16;
                  };                  
                  y_zoom := y_zoom - ((height_min - 150)*zoom_size >> 17);
                  new_bitmap_zoom;            
                } else {
                  (is_corner n_corner).if {
                    is_automatic := TRUE;                
                    step_angle := 0.1;
                    angle := step_angle;                  
                    r := 100;                   
                  } else {
                    (n_corner <= 1).if {
                      y := border_left.item 0;
                    } else {
                      y := border_left.item 2;
                    };
                    ((n_corner = 3) || {n_corner = 0}).if {
                      x := border_right.item 1;
                    } else {
                      x := border_left.item 3;
                    };
                    xx := x_corner << 16;                  
                    yy := y_corner << 16;
                    step := 10;
                    n := x - x_corner;
                    (n.abs > page_width).if {
                      (x,n) := get_corner n_corner;
                    };
                    ax := ((x - x_corner) << 16) / step;
                    ay := ((y - y_corner) << 16) / step;                                    
                    is_automatic := is_linear := TRUE;                  
                  };              
                };
              } else {          
                (
                  (! is_automatic) && 
                  {x_corner.in_range (border_left.item 3) to (border_right.item 1)} && 
                  {y_corner.in_range (border_left.item 0) to (border_right.item 2)}
                ).if {
                  n := 1;
                  n_corner := -1;
                  border := border_right;
                  {                            
                    (is_corner n).if {
                      n_corner := n;
                    } else {
                      n := (n + 1) & 3;
                      (n = 3).if {
                        border := border_left;
                      };
                    };
                  }.do_while {(n_corner = -1) && {n != 1}};          
                } else {
                  n_corner := -1;
                };  
                ((n_corner != -1) || {(Old n_corner != -1) && {n_corner = -1}}).if {        
                  is_refresh := TRUE;
                };
              };
            }.elseif {evt_mouse.left} then {                    
              (n_corner != -1).if {
                is_refresh := TRUE;      
              };
            };
          };
        };
      };
    };
    evt_time ?= msg;    
    ((evt_time != NULL) && {evt_time.destination = NULL}).if {      
      (is_zoom).if {
        (is_refresh).if {
          new_bitmap_zoom;
          is_refresh := FALSE;
        };
      } else {
        (is_automatic).if {        
          (is_linear).if {
            (step = 1).if {
              is_automatic := is_linear := FALSE;          
              next_page;          
              is_refresh := TRUE;
            } else {
              xx := xx + ax;
              yy := yy + ay;          
              x_corner := xx >> 16; 
              y_corner := yy >> 16;
              step := step - 1;
              new_bitmap;
              refresh;
            };          
          } else {
            (angle > REAL.pi - step_angle).if {          
              is_automatic := FALSE;          
              next_page;          
              is_refresh := TRUE;
            } else {
              angle := angle + step_angle;
              x_corner := (angle.cos * page_width).to_integer;
              y_corner := (angle.sin * r).to_integer;
              (n_corner)
              .when 0 then {
                x_corner := border_right.item 3 - x_corner;
                y_corner := border_right.item 0 + y_corner;
              }
              .when 1 then {
                x_corner := border_right.item 3 + x_corner;
                y_corner := border_right.item 0 + y_corner;
              } 
              .when 2 then { 
                x_corner := border_right.item 3 + x_corner;
                y_corner := border_right.item 2 - y_corner;
              }
              .when 3 then {
                x_corner := border_right.item 3 - x_corner;
                y_corner := border_right.item 2 - y_corner;
              };        
              new_bitmap;
              refresh;
            };
          };
        };      
        (is_refresh).if {
          new_bitmap;
          refresh;
          is_refresh := FALSE;        
        };
      };
    };    
  );
  
  //
  // Display.
  //
  
  - draw (x0,y0:INTEGER) to (x1,y1:INTEGER) <-
  (     
    clipping (x0,y0) to (x1,y1);        
    put_bitmap bitmap to (0,0);            
  );  
  
  
  - new_bitmap_zoom <-
  ( + ye:INTEGER;
    y_zoom := y_zoom.max 0.min (border_bmp.item 2 - (((height_min - 150)*zoom_size >> 16))); 
    bitmap.put_bitmap background to (0,0);
    ye := y_zoom + ((height_min - 150)*zoom_size) >> 16;
    bitmap.map_move_to (0,150) on (0,y_zoom);
    bitmap.map_line_to (x_max,150) on (border_bmp.item 1,y_zoom);
    bitmap.map_line_to (x_max,y_max) on (border_bmp.item 1,ye);
    bitmap.map_line_to (0,y_max) on (0,ye);
    bitmap.map_trace_with (pages.item zoom_page) 
    line_color { (x,y,xb,yb:INTEGER); }
    pixel_color { (x,y,xb,yb:INTEGER,col:UINTEGER_32); col };
    refresh;
  );
  
  - new_bitmap <-
  ( + n,x,y,xb,yb,cx,cy,dx,dy,c1,c2,step:INTEGER;
    + ca,cb:REAL_16_16;
    + is_visible,is_normal:BOOLEAN;    
    + odd1,even2:{(INTEGER,INTEGER); INTEGER};
    + odd2,even1:{(INTEGER,INTEGER);};
    
    bitmap.put_bitmap background to (0,0);
    //          
    (n_corner = -1).if {
      (n_page >= 0).if {
        display_page (pages.item 2) to border_left with (page_width,-1);
      };
      (n_page < pages_files.upper).if {
        display_page (pages.item 3) to border_right with (0,1);
      };
    } else {
      n := n_corner;
      (x,y) := get_corner n;
      cx := (x_corner + x) / 2;
      cy := (y_corner + y) / 2;
      dy := y - y_corner;
      dx := x_corner - x;
      under_page.clear;
      under_page_bmp.clear;
      new_page.clear;    
      old_page.clear;
      old_page_bmp.clear;
      is_visible := TRUE;
      (dy = 0).if {
        4.times {
          (x,y)   := get_corner n;
          (xb,yb) := get_corner_bmp n;            
          (is_visible).if {            
            under_page.add_last x;
            under_page.add_last y;            
            under_page_bmp.add_last xb;
            under_page_bmp.add_last yb;            
            x := cx*2 - x;
            new_page.add_last x;
            new_page.add_last y;            
            (x.in_range (border.item 3) to (border.item 1)).if {
              old_page.add_last x;
              old_page.add_last y;            
              old_page_bmp.add_last (((x - border.item 3)*size_x)>>16);
              old_page_bmp.add_last yb;
            };
          } else {            
            old_page.add_last x;
            old_page.add_last y;            
            old_page_bmp.add_last xb;
            old_page_bmp.add_last yb;
          };
          (n.is_even).if {                                    
            (cx.in_range (border.item 3) to (border.item 1)).if {
              under_page.add_last cx;
              under_page.add_last (border.item n);            
              under_page_bmp.add_last (((cx - border.item 3)*size_x)>>16);
              under_page_bmp.add_last (border_bmp.item n);
              new_page.add_last cx; 
              new_page.add_last (border.item n);                          
              is_visible := ! is_visible;
            };          
          };
          n := (n + 1) & 3;
        };
        ca := 0;
        cb := cx;
      }.elseif {dx = 0} then {    
        4.times {
          (x,y) := get_corner n;
          (xb,yb) := get_corner_bmp n;
          (is_visible).if {            
            under_page.add_last x;
            under_page.add_last y;            
            under_page_bmp.add_last xb;
            under_page_bmp.add_last yb;
            y := cy*2 - y;
            new_page.add_last x;
            new_page.add_last y;
            (y.in_range (border.item 0) to (border.item 2)).if {
              old_page.add_last x;
              old_page.add_last y;
              old_page_bmp.add_last xb;
              old_page_bmp.add_last (((y - border.item 0)*size_y)>>16);
            };
          } else {
            old_page.add_last x;
            old_page.add_last y;            
            old_page_bmp.add_last xb;
            old_page_bmp.add_last yb;
          };
          (n.is_odd).if {                                    
            (cy.in_range (border.item 0) to (border.item 2)).if {
              under_page.add_last (border.item n);
              under_page.add_last cy;            
              under_page_bmp.add_last (border_bmp.item n);
              under_page_bmp.add_last (((cy - border.item 0)*size_y)>>16);
              new_page.add_last (border.item n);
              new_page.add_last cy;            
              is_visible := ! is_visible;
            };          
          };
          n := (n + 1) & 3;
        };
        ca := 0;
        cb := cy;
        is_normal := TRUE;
      } else {                
        is_normal := dx.abs < dy.abs;
        (is_normal).if {
          ca := dx.to_real_16_16/dy;      
          cb := cy.to_real_16_16 - ca*cx;            
        } else {
          ca := dy.to_real_16_16/dx;      
          cb := cx.to_real_16_16 - ca*cy;            
        };
        even1 := { (nn,idx:INTEGER);           
          + xx:INTEGER;
          xx := ((border.item nn.to_real_16_16 - cb) / ca).to_integer;          
          xx := xx.min (border.item 1).max (border.item 3);
          cut.put nn to idx;
          cut.put xx to (idx+1);
          cut.put (border.item nn) to (idx+2);                 
        };               
        even2 := { (nn,idx:INTEGER);           
          + xx,result:INTEGER;          
          xx := (ca*border.item nn + cb).to_integer;
          cut.put nn to idx;
          cut.put xx to (idx+1);
          cut.put (border.item nn) to (idx+2);                    
          (xx < border.item 3).if {
            result := 4;
          }.elseif {xx > border.item 1} then {
            result := 2;
          };
          result
        };               
        odd1 := { (nn,idx:INTEGER);
          + yy,result:INTEGER;
          yy := (ca*border.item nn + cb).to_integer;
          cut.put nn to idx;
          cut.put (border.item nn) to (idx+1);
          cut.put yy to (idx+2);
          (yy < border.item 0).if {
            result := 1;
          }.elseif {yy > border.item 2} then {
            result := 3;
          };
          result
        };
        odd2 := { (nn,idx:INTEGER);
          + yy:INTEGER;          
          yy := ((border.item nn.to_real_16_16 - cb) / ca).to_integer;
          yy := yy.min (border.item 2).max (border.item 0);
          cut.put nn to idx;
          cut.put (border.item nn) to (idx+1);
          cut.put yy to (idx+2);          
        };
        //        
        (is_normal).if {                  
          c1 := odd1.value (3,0);          
          c2 := odd1.value (1,3);          
          ((c1|c2) != 0).if { 
            (c1 = c2).if {
              cut.put (-1) to 0;
              cut.put (-1) to 3;
            } else {
              (c1 != 0).if { even1.value (c1-1,0); };
              (c2 != 0).if { even1.value (c2-1,3); };
            };          
          };          
        } else {          
          c1 := even2.value (2,0);
          c2 := even2.value (0,3);                   
          ((c1|c2) != 0).if { 
            (c1 = c2).if {
              cut.put (-1) to 0;
              cut.put (-1) to 3;
            } else {
              (c1 != 0).if { odd2.value (c1-1,0); };
              (c2 != 0).if { odd2.value (c2-1,3); };
            };          
          };                    
        };        
        //
        4.times { 
          (x,y) := get_corner n;
          (xb,yb) := get_corner_bmp n;
          (is_visible).if {            
            under_page.add_last x;
            under_page.add_last y;            
            under_page_bmp.add_last xb;
            under_page_bmp.add_last yb;
            (is_normal).if {
              (x,y) := symetric_h (x,y) with (ca,cb);
            } else {
              (x,y) := symetric_v (x,y) with (ca,cb);
            };
            new_page.add_last x;
            new_page.add_last y;
          } else {
            old_page.add_last x;
            old_page.add_last y;
            old_page_bmp.add_last xb;
            old_page_bmp.add_last yb;
          };
          (
            (step := 0; n = cut.item 0) || 
            {step := 3; n = cut.item 3}
          ).if {                        
            x := cut.item (step+1);
            y := cut.item (step+2);
            under_page.add_last x;
            under_page.add_last y;
            xb := ((x-border.item 3)*size_x)>>16;
            yb := ((y-border.item 0)*size_y)>>16;
            under_page_bmp.add_last xb;
            under_page_bmp.add_last yb;            
            new_page.add_last x;
            new_page.add_last y;
            old_page.add_last x;
            old_page.add_last y;
            old_page_bmp.add_last xb;
            old_page_bmp.add_last yb;
            is_visible := ! is_visible;             
          };          
          n := (n + 1) & 3;
        };
      };
      
      (old_page.is_empty).if_false {                        
        (border = border_right).if {          
          display_poly old_page on old_page_bmp page 3
          line_color  { (x,y,xb,yb:INTEGER); }
          pixel_color { (x,y,xb,yb:INTEGER,col:UINTEGER_32); 
            add col dark (color_shadow.item (x - border.item 3))
          };           
        } else {
          display_poly old_page on old_page_bmp page 2
          line_color  { (x,y,xb,yb:INTEGER); }
          pixel_color { (x,y,xb,yb:INTEGER,col:UINTEGER_32);
            add col dark (color_shadow.item (border.item 1 - x))            
          }; 
        };        
      };
      (
        - idx_shadow:INTEGER;
        - acos,asin:INTEGER; 
        + line_col2,line_col22:{(INTEGER,INTEGER,INTEGER,INTEGER); };
        + pixel_col2:{(INTEGER,INTEGER,INTEGER,INTEGER,UINTEGER_32); UINTEGER_32};        
        + angle:REAL;
        
        angle := `atan2f(@dy,@dx)`:REAL;
        acos := (`(int)(cos(@angle)*65536.0)`:INTEGER); // BSBS: Pas plus simple ???            
        asin := (`(int)(sin(@angle)*65536.0)`:INTEGER); // BSBS: Pas plus simple ???            
        
        line_col2 := { (x,y,xb,yb:INTEGER);            
          + tmp:INTEGER;
          (is_normal).if {              
            tmp := (ca*x + cb).to_integer;              
            idx_shadow := asin * (tmp - y) + 65536*2;
          } else {
            tmp := (ca*y + cb).to_integer;
            idx_shadow := acos * (x - tmp) + 65536*2;              
          };                                    
        };
        line_col22 := { (x,y,xb,yb:INTEGER);  // BUG COMPILO line_col22 = line_col2
          + tmp:INTEGER;
          (is_normal).if {              
            tmp := (ca*x + cb).to_integer;              
            idx_shadow := asin * (tmp - y) + 65536*2;
          } else {
            tmp := (ca*y + cb).to_integer;
            idx_shadow := acos * (x - tmp) + 65536*2;              
          };                                    
        };
        pixel_col2 := { (x,y,xb,yb:INTEGER,col:UINTEGER_32);
          + result:UINTEGER_32;     
          result := add col dark (color_shadow.item (idx_shadow >> 16));
          idx_shadow := idx_shadow + acos;            
          result
        };        
        (border = border_right).if {                    
          (n_page >= 0).if {
            display_page (pages.item 2) to border_left with (page_width,-1);
          };
          display_poly under_page on under_page_bmp page 5
          line_color  { (x,y,xb,yb:INTEGER); }
          pixel_color { (x,y,xb,yb:INTEGER,col:UINTEGER_32);       
            add col dark (color_shadow.item (x - border.item 3))
          };                 
          inverse_under_page_bmp;          
          display_poly new_page on under_page_bmp page 4         
          line_color line_col22 pixel_color pixel_col2;          
        } else {          
          (n_page < pages_files.upper).if {
            display_page (pages.item 3) to border_right with (0,1);
          };
          display_poly under_page on under_page_bmp page 0
          line_color  { (x,y,xb,yb:INTEGER); }
          pixel_color { (x,y,xb,yb:INTEGER,col:UINTEGER_32);       
            add col dark (color_shadow.item (border.item 1 - x))
          };       
          inverse_under_page_bmp;                    
          display_poly new_page on under_page_bmp page 1
          line_color line_col2 pixel_color pixel_col2;                 
        };               
      );
    };
  );
  
Section Private
  
  - string_tmp:STRING := STRING.create 255;
  
  - border_left :FAST_ARRAY(INTEGER) := FAST_ARRAY(INTEGER).create_with_capacity 4;
  - border_right:FAST_ARRAY(INTEGER) := FAST_ARRAY(INTEGER).create_with_capacity 4;
  - border:FAST_ARRAY(INTEGER);
  - border_bmp:FAST_ARRAY(INTEGER) := FAST_ARRAY(INTEGER).create_with_capacity 4;
  
  - cut:FAST_ARRAY(INTEGER) := FAST_ARRAY(INTEGER).create 6;
  
  - old_page      :FAST_ARRAY(INTEGER) := FAST_ARRAY(INTEGER).create_with_capacity 10;
  - old_page_bmp  :FAST_ARRAY(INTEGER) := FAST_ARRAY(INTEGER).create_with_capacity 10;
  - under_page    :FAST_ARRAY(INTEGER) := FAST_ARRAY(INTEGER).create_with_capacity 10;
  - under_page_bmp:FAST_ARRAY(INTEGER) := FAST_ARRAY(INTEGER).create_with_capacity 10;
  - new_page      :FAST_ARRAY(INTEGER) := FAST_ARRAY(INTEGER).create_with_capacity 10;
  
  - size_x:INTEGER;
  - size_y:INTEGER;
  
  - inverse_under_page_bmp <-
  ( + tmp:INTEGER;
    tmp := border_bmp.item 1;
    (under_page_bmp.lower).to (under_page_bmp.upper) by 2 do { i:INTEGER;
      under_page_bmp.put (tmp - under_page_bmp.item i) to i;
    };
  );
  
  - symetric_h (x,y:INTEGER) with (ca,cb:REAL_16_16) :(INTEGER,INTEGER) <-
  ( + d:REAL_16_16;
    d  := ((ca * x - y + cb)*2) / (ca+1.to_real_16_16/ca); 
    x - d.to_integer, 
    y + (d/ca).to_integer
  );
  
  - symetric_v (x,y:INTEGER) with (ca,cb:REAL_16_16) :(INTEGER,INTEGER) <-
  ( + d:REAL_16_16;
    d  := ((ca * y - x + cb)*2) / (ca+1.to_real_16_16/ca); 
    x + (d/ca).to_integer,
    y - d.to_integer     
  );
  
  - get_corner n:INTEGER :(INTEGER,INTEGER) <-
  ( + x,y:INTEGER;
    (n.is_even).if {
      x := border.item ((n-1) & 3);
      y := border.item n;
    } else {
      x := border.item n;
      y := border.item (n-1);        
    };
    x,y
  );
  
  - add col:UINTEGER_32 dark d:INTEGER :UINTEGER_32 <-
  (
    (( (col.to_integer >> 16)         - d).max 0 << 16) |
    ((((col.to_integer >>  8) & 0FFh) - d).max 0 <<  8) |
    ((( col.to_integer        & 0FFh) - d).max 0      )            
  );
  
  - get_corner_bmp n:INTEGER :(INTEGER,INTEGER) <-
  ( + x,y:INTEGER;
    (n.is_even).if {
      x := border_bmp.item ((n-1) & 3);
      y := border_bmp.item n;
    } else {
      x := border_bmp.item n;
      y := border_bmp.item (n-1);        
    };
    x,y
  );
  
  - display_poly poly:FAST_ARRAY(INTEGER) on poly_bmp:FAST_ARRAY(INTEGER) page n:INTEGER 
    line_color  line_col:{(INTEGER,INTEGER,INTEGER,INTEGER); }
    pixel_color pixel_col:{(INTEGER,INTEGER,INTEGER,INTEGER,UINTEGER_32); UINTEGER_32} <-
  ( 
    ((n_page+n-2).in_range 0 to (pages_files.upper)).if {      
      bitmap.map_move_to (poly.item 0,poly.item 1) 
      on (poly_bmp.item 0,poly_bmp.item 1);
      2.to (poly.upper) by 2 do { i:INTEGER;
        bitmap.map_line_to (poly.item i,poly.item (i+1))
        on (poly_bmp.item i,poly_bmp.item (i+1));
      };            
      bitmap.map_trace_with (pages.item n) 
      line_color line_col pixel_color pixel_col;       
    };
  );
  
  - display_page bmp:ABSTRACT_BITMAP to bord:FAST_ARRAY(INTEGER) with (init,step:INTEGER) <-
  ( - idx,init_idx,a:INTEGER;    
    init_idx := init;
    a := step;
    bitmap.map_move_to (bord.item 3,bord.item 0) on (0,0);
    bitmap.map_line_to (bord.item 1,bord.item 0) on (border_bmp.item 1,0);
    bitmap.map_line_to (bord.item 1,bord.item 2) on (border_bmp.item 1,border_bmp.item 2);
    bitmap.map_line_to (bord.item 3,bord.item 2) on (0,border_bmp.item 2);
    bitmap.map_trace_with bmp 
    line_color  { (x,y,xb,yb:INTEGER); 
      idx := init_idx;
    }
    pixel_color { (x,y,xb,yb:INTEGER,col:UINTEGER_32); 
      + result:UINTEGER_32;     
      result := add col dark (color_shadow.item idx);      
      idx := idx + a;            
      result
    };       
  );
  
  - is_corner n:INTEGER :BOOLEAN <-
  ( + x,y,dx,dy:INTEGER;
    
    (x,y) := get_corner n;
    dy := y - y_corner;
    dx := x_corner - x;
    (
      ((dx*dx+dy*dy) < (150*150)) && 
      {
        ((border = border_right) && {n_page < pages_files.upper}) ||
        {(border = border_left ) && {n_page > -1         }}
      }
    )
  );            
  
  - next_page <-
  ( + bmp0,bmp1,bmp:ABSTRACT_BITMAP;    
    (border = border_right).if {
      (x_corner < border_right.item 3).if {
        n_page := (n_page + 2).min (pages_files.upper);
        bmp0 := pages.item 0;
        bmp1 := pages.item 1;
        2.to 5 do { i:INTEGER;
          bmp := pages.item i;
          pages.put bmp to (i-2);
        };          
        pages.put bmp0 to 4;
        load_page (n_page + 2) to 4;
        pages.put bmp1 to 5;        
        load_page (n_page + 3) to 5;
      };
    } else {
      (x_corner > border_left.item 1).if {
        n_page := (n_page - 2).max (-1);
        bmp0 := pages.item 4;
        bmp1 := pages.item 5;
        3.downto 0 do { i:INTEGER;
          bmp := pages.item i;
          pages.put bmp to (i+2);
        };          
        pages.put bmp0 to 0;
        load_page (n_page - 2) to 0;
        pages.put bmp1 to 1;        
        load_page (n_page - 1) to 1;
      };
    };
    n_corner := -1;                                  
  );
            
  - color_shadow:FAST_ARRAY(UINTEGER_8) := 
  ( + result:FAST_ARRAY(UINTEGER_8);
    + x:REAL;
    + col:UINTEGER_8;
    result := FAST_ARRAY(UINTEGER_8).create_with_capacity (page_width+10);
    x := 1;
    0.to (page_width+10) do { i:INTEGER;      
      col := ((x.log / (x*x*x))*800.0).to_uinteger_8;
      result.add_last col;      
      x := x + 0.05;
    };    
    result
  );