///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Library                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := Expanded FALSE;


  - copyright   := "2003-2005 JÃ©rome Boutet, 2003-2007 Benoit Sonntag";

  - comment := "FALSE object";

  - type    := `char`;
  - default := FALSE;
  
Section Inherit
  
  - parent_boolean:BOOLEAN := BOOLEAN;
  
Section Public
  
  //
  // Conditional :
  //
  
  - if_true block:BLOCK;
  
  - if_false block:BLOCK <-
  ( //? {block!=NULL};
    block.value;
  );
  
  - if true_block:BLOCK else false_block:BLOCK <-
  (
    false_block.value;
  );

  - if_true true_block:BLOCK else false_block:BLOCK <-
  (
    false_block.value;
  );
  
  - if_false true_block:BLOCK else false_block:BLOCK <- 
  (
    true_block.value;
  );
  
  - if true_block:BLOCK :BOOLEAN <- FALSE;
  
  - elseif cond:BLOCK then block:BLOCK :BOOLEAN <-
  ( + result:BOOLEAN;
    
    result := cond.value;
    result.if {
      block.value;
    };
    result
  );
  
  - elseif cond:BLOCK then block:BLOCK else block_else:BLOCK <-
  (
    (cond.value).if {
      block.value;
    } else {
      block_else.value;
    };
  );
  
  //
  // Binary operator :
  //
  
  - '=='  Right 60 other:BOOLEAN :BOOLEAN <- ! other;
  
  - '!==' Right 60 other:BOOLEAN :BOOLEAN <- other;
  
  - '||'  Left 10  other:BLOCK   :BOOLEAN <- other.value;
  
  - '&&'  Left 20  other:BLOCK   :BOOLEAN <- FALSE;
  
  - '|'   Left 10  other:BOOLEAN :BOOLEAN <- other;
  
  - '&'   Left 20  other:BOOLEAN :BOOLEAN <- FALSE;
  
  - '^'  Left 10  other:BOOLEAN :BOOLEAN <- other;
  
  - '->'  Right 25 other:BOOLEAN :BOOLEAN <- TRUE;
  
  - '->>' Right 25 other:BLOCK  :BOOLEAN <- TRUE;
  
  - '=>' s:ABSTRACT_STRING <-
  (
  );
  
  //
  // Prefix operator
  //
  
  - '!' :BOOLEAN <- TRUE;
  
  //
  // Convertion
  //
  
  - to_string:STRING       <- "0".to_string;
  
  - to_integer:INTEGER     <- 0;
  
  - to_character:CHARACTER <- '0';

