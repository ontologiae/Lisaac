/***************************************************************************
*                      Isaac Object Operating System                       *
*                             Isaac                                        *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
***************************************************************************/
section HEADER

  - name    := KEYBOARD;
  
  - category:= MICRO;
  
  - bibliography:="http://IsaacOS.com";
  - author      :="Sonntag Benoit (bsonntag@loria.fr)";
  - comment     :="X11 - Keyboard Driver";

  - version :="1.0";  
  - date    :="2003/04";
  
section INHERIT

  - parent_input:INPUT := INPUT;

section PRIVATE
  
  + buffer_event:MAP_FIXED_ARRAY[KEYBOARD_EVENT]; 
  - p_beg:USMALLINT;  // Pointer on the buffer (beginning)
  - p_end:USMALLINT;  // Pointer on the buffer (end)

  + e_code:BOOLEAN;   // TRUE If extended mode 

  + bin_code:FIXED_ARRAY[USMALLINT]; // Binary array of keys (102+7)/8

  + cmd:USMALLINT;    // 0:CTRL 1:AltGr 2:Alt 3:Cmd 4:Shift 5:Cap 6:NumLock 7:Scrolllock

  + ascii_code:USMALLINT; // For <Alt>+<NbAscII>
    
  // Lower case.
  - lower_case:STRING_CONSTANT := "&é\"'(-è_çà)=\8\\9\azertyuiop^$\13\ qsdfghjklmù  *wxcvbn,;:!";
  // Upper case.
  - upper_case:STRING_CONSTANT := "1234567890°+\8\\9\AZERTYUIOP\"£\13\ QSDFGHJKLM%  µWXCVBN?./§";
  
  // AltGr.
  - alt_gr:STRING_CONSTANT := "¹~#{[|`\\^@]}";
  
  // Extension key.
  - ext_key:STRING_CONSTANT := "BUAL REDZIS  HP";
  
section STARTUP
  
  //
  // Get Character (Interrupt #21)
  //
  
  - key key:USMALLINT press p:BOOLEAN <-
  ( + cu,tmp:USMALLINT;
    
    //"Press Key=".print; key.print; '\n'.print;
    
    p.if {
      cu := keydown key;
    } else {
      cu := keyup key;
    };
    (cu != 0).if {
      
      //"Ascii: ".print; cu.to_character.print; '\n'.print;
      
      // Routine Pour Reboot Violant : CTRL+(ALT | ALT Gr)+Suppr
      ((cu = 'S'.to_usmallint) && { ((cmd&0Fh) = 0Dh) || {(cmd&0Fh) = 0Bh} }).if {
	"Reboot ...\n".print;
	die_with_code exit_failure_code;
      };
      
      tmp:=(p_end+1)&003h;
      buffer_event.item p_end.make ((cmd.to_ushortint<<8)|cu);
      (((tmp+2)&3)!=p_beg).if {
	p_end:=tmp;
      };
    };
  );
   
section PRIVATE
  
  - keyup cu:USMALLINT :USMALLINT <-
  ( + result:USMALLINT;
    cmd := cmd & 0F7h; // Deactivate the cmd bit    
    bin_code.put ((bin_code.item (cu>>3)) & ~(1<<(cu&7))) to (cu>>3);
    // Analyze: for deactivate the cmd
    ((cu == 37) || {cu == 109}).if {
      //CTRL 1 or CTRL2
      cmd := cmd & (~01h);
    }.elseif { cu == 113 } then {
      // Alt Gr
      cmd := cmd & (~02h);
    }.elseif { cu == 64 } then {
      // Alt
      cmd := cmd & (~04h);      
      result := ascii_code;
      ascii_code := 0;      
    }.elseif { (cu == 50) || { cu == 62} } then {
      // Shift 1 or Shift 2
      cmd := cmd & (~10h);
    };
    result
  );

  - keydown cu:USMALLINT :USMALLINT <-
  ( + result:USMALLINT;
    bin_code.put ((bin_code.item (cu>>3)) | (~(1<<(cu&7)))) to (cu>>3); // Activate key
    // Analyze: for activate the cmd
    ((cu == 37) || {cu == 109}).if {
      //CTRL1 or CTRL2
      cmd := cmd | 01h;
    }.elseif { cu == 113 } then {
      // Alt Gr
      cmd := cmd | 02h;
    }.elseif { cu == 64 } then {
      // Alt
      cmd := cmd | 04h;    
    }.elseif { cu == 65 } then {
      // Space
      result := ' '.to_usmallint;      
    }.elseif { (cu == 50) || { cu == 62} } then {
      // Shift 1 or Shift 2
      cmd := cmd | 10h;
      ((cmd & 20h)!=0).if {
	cmd := cmd & (~20h);
	//light;
      };
    }.elseif { cu == 66 } then {
      // Cap
      cmd := cmd ^ 20h;
      //light;
    }.elseif { cu == 77 } then {
      // Num Lock
      cmd := cmd ^ 40h;
    }.elseif { cu == 78 } then {
      // Scroll Lock
      cmd := cmd ^ 80h;
    }.elseif { cu == 9 } then {
      // Esc
      cmd :=  cmd | 08h;
      result := 27;
    }.elseif {((cmd&2)!=0) && {cu.in_range 10 to 21}} then {
      cmd :=  cmd & (~02h);
      result := alt_gr.item (cu-9).to_usmallint;
    }.elseif {cu.in_range 10 to 61} then {
      ((cmd & 30h)==0).if {
	result := lower_case.item (cu-9).to_usmallint;
      } else {
	result := upper_case.item (cu-9).to_usmallint;
      };
      (result <= 13).if {
	cmd := cmd | 08h;
      };	
    }.elseif {cu.in_range 67 to 76} then {
      cmd :=  cmd | 08h;      // F1 to F10 = cmd
      result :=  cu - 67 + 'a'.to_usmallint;  // 'a' to 'j'
    }.elseif {(cu = 95) || {cu = 96}} then { 
      cmd :=  cmd | 08h;      // F11 to F12 = cmd
      result :=  cu - 95 + 'k'.to_usmallint;  // 'k' to 'l'
    }.elseif {cu = 94} then {
      ((cmd & 30h)==0).if {
	result := '<'.to_usmallint;
      } else {
	result := '>'.to_usmallint;
      };
    }.elseif {cu.in_range 97 to 111} then {
      cmd := cmd | 08h;
      result := ext_key.item (cu-96).to_usmallint;       
    };
    result
  );
    
section PUBLIC   
  
  - make <-
  // Install keyboard.
  (
    bin_code := FIXED_ARRAY[USMALLINT].create 13;
    
    buffer_event := MAP_FIXED_ARRAY[KEYBOARD_EVENT].create 4;
    0.to 3 do { j:INTEGER;
      buffer_event.item j.set_prev (buffer_event.item ((j-1)&3));
      buffer_event.item j.set_source self;
    };
    EVENT_MANAGER.add_server self;
    cmd := 40h;
  );
    
  - get_event <-
  ( + p:INTEGER;
    p := p_beg;
    { p != p_end }.while_do {
      put_event (buffer_event.item p);
      p := (p + 1) & 03h;
    };    
  );
  
  - get_key:USHORTINT <-
  // Use without interface running: text mode
  ( + result:USHORTINT;
    {p_beg = p_end}.while_do {};
    result := buffer_event.item p_beg.key;
    p_beg := (p_beg + 1) & 03h;
    result
  );
  
  //
  // Guru section.
  //

  - acknowledge type:INPUT <-
  (
    ? {type = KEYBOARD};
    p_beg := (p_beg+1) & 03h;
  );




