///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Example                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := LOCAL;

  - copyright := "2003-2008 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";
  - comment   := "The local";

Section Inherit

  + parent_instr:Expanded INSTR;

Section Public
  
  + name:STRING_CONSTANT;
    
  + type:CLASS;

  //
  // Creation.
  //

  - create p:INTEGER name n:STRING_CONSTANT type t:CLASS :SELF <-
  ( + result:SELF;
    result := clone;
    result.make p name n type t;
    result
  );

  - make p:INTEGER name n:STRING_CONSTANT type t:CLASS <-
  ( 
    position := p;
    name     := n;
    type     := t;
  );
  
  //
  // Run.  
  //
  
  + the_dynamic_type:CLASS;
  
  - set_the_dynamic_type c:CLASS <-
  [
    ? {c.is_sub_type type};
  ]
  (
    the_dynamic_type := c;
  );
  
  //
  // Display.
  //
  
  - print <-
  (
    name.print;
    ':'.print;
    type.name.print;
  );

  