///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ITM_TYPE_SELF;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Type Self";
  
Section Inherit
  
  + parent_itm_type_simple:Expanded ITM_TYPE_SIMPLE;
  
Section ITM_TYPE_SIMPLE
  
  - make <-
  (
    name   := ALIAS_STR.prototype_self;
  );
  
Section Public
  
  - run_value:TYPE_FULL;
  
  - is_self:BOOLEAN <- TRUE;
  
  - to_run:TYPE_FULL <-
  ( 
    (run_value = NULL).if {
      ANY.semantic_error (ANY.last_position,"SELF type result for data slot is not possible.");
    };
    run_value
  );
        
  //
  // Self_up
  //
  
  - self_up:TYPE;
  
Section NODE, SLOT  

  - set_run t:TYPE_FULL <-
  (    
    run_value := t;
  );
  
Section SLOT, TYPE_FULL
  
  - set_self_up t:TYPE <-
  (
    self_up := t;
  );
  
Section SLOT_DATA
  
  - set_run t1:TYPE_FULL self_up t2:TYPE <-
  (
    run_value := t1;
    self_up   := t2;
  );

  
  