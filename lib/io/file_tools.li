/***************************************************************************
*                             Lisaac Library                               *
*                      (c) INRIA 2003 see 'licence.txt' for more details   *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
***************************************************************************/

section HEADER
  
  - name        :=FILE_TOOLS;
  
  - category    :=MICRO;
  
  - bibliography:="http://IsaacOS.com";
  
  - author      :="Boutet Jerome (boutet@loria.fr)";
  
  - comment     :=" ";
  
section INHERIT
  
  - parent_object:OBJECT := OBJECT;
  
section PUBLIC

  - same_files path1:ABSTRACT_STRING with path2:ABSTRACT_STRING :BOOLEAN <-
  // True if the `path1' file exists and has the very same content
  // as file `path2'.
  (
    + result:BOOLEAN;
    ? { path1 != NULL };
    ? { path2 != NULL };
    tfr1.connect_to path1;
    (tfr1.is_connected).if {
      tfr2.connect_to path2;
      (tfr2.is_connected).if {
	result := tfr1.same_as tfr2;
      } else {
	tfr1.disconnect;
      };
    };
    result
  );

  - is_readable path:ABSTRACT_STRING :BOOLEAN <-
  // True if `path' file exists and is a readable file.
  (
    + result:BOOLEAN;
    ? { path != NULL };
    tfr1.connect_to path;
    result := tfr1.is_connected;
    result.if {
      tfr1.disconnect;
    };
    result
  );
  
  - is_empty path:STRING :BOOLEAN <-
  // True if `path' file exists, is readable and is an empty file.
  (
    + result:BOOLEAN;
    tfr1.connect_to path;
    (tfr1.is_connected).if {
      tfr1.read_character;
      result := tfr1.end_of_input;
      tfr1.disconnect;
    };
    result
  );
  
  - rename_to old_path,new_path:STRING <-
  // Try to change the name or the location of a file.
  (
    + p1, p2:POINTER;
    
    ? { old_path != NULL };
    ? { new_path != NULL };
    
    (file_exists new_path).if {
      delete new_path;
    };
    p1 := old_path.to_pointer;
    p2 := new_path.to_pointer;
    basic_io_rename p1,p2;
  );

  - delete path:ABSTRACT_STRING <-
  // Try to delete the given `path' file.
  (
    + p:NATIVE_ARRAY[CHARACTER];
    
    ? { path != NULL };
    p := path.to_external;
    basic_io_remove p;
  );

  - size_of path:ABSTRACT_STRING :INTEGER <-
  // Total size of file `path' in number of bytes.
  (
    + p:POINTER;
    ? { file_exists path };

    p := path.to_pointer;
    basic_fstat_st_size p
  );

  - last_change_of path:STRING :TIME <-
  // Of the last modification of `path'.
  (
    + p:POINTER;
    + time_memory:DOUBLE;
    
    ? { file_exists path};

    p := path.to_pointer;
    time_memory := basic_fstat_st_mtime p;
    result.set_time_memory time_memory;
  );

  - basic_io_remove path:NATIVE_ARRAY[CHARACTER] <-
  // To implement `delete'.
  (
    `remove((char*)(@path))`;
  );

  - basic_io_rename old_path,new_path:POINTER <-
  (
    `rename(((char*)(@old_path)),((char*)(@new_path)))`;
  );

  - basic_fstat_st_size path:POINTER :INTEGER <-
  (
    deferred;
  );
  
  - basic_fstat_st_mtime path:POINTER :DOUBLE <-
  (
    deferred;
  );

  - tfr1:TEXT_FILE_READ := TEXT_FILE_READ.clone.make;
   
  - tfr2:TEXT_FILE_READ := TEXT_FILE_READ.clone.make;

  - tmp_string:STRING := STRING.make 256;
















