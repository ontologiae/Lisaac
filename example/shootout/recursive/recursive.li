///////////////////////////////////////////////////////////////////////////////
//                              Lisaac Example                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name         := RECURSIVE;
  
  - bibliography := "http://IsaacOS.com";
  - author       := "Pierre-Alexandre Voye (ontologiae@gmail.com), Xavier Oswald <x.oswald@free.fr>";
  - comment      := "Language shootout - Recursive"; 
  
Section Inherit
  
  - parent_any:OBJECT := OBJECT;

Section Private  

  - ack x : INTEGER and y : INTEGER : INTEGER <-
  ( + result : INTEGER;
  
    (x = 0).if {
      result := y + 1;
    }.elseif {y = 0} then {
      result := ack (x - 1) and 1;
    } else {
      result := ack (x - 1) and (ack x and (y - 1));
    };
    result
  );


  - fib n : INTEGER : INTEGER <-
  (	+ result : INTEGER;
    (n < 2).if { 
      result := 1;
    } else { 
      result := fib (n - 2) + fib (n - 1);
    };
    result		
  );

  - fibfp n : REAL_64 : REAL_64 <-
  ( + result : REAL_64;
    (n < 2).if {
      result := 1;
    } else {
      result := fibfp (n - 2) + fibfp (n - 1);
    };
    result
  );

  - tak (x,y,z : INTEGER) : INTEGER <-
  (
    + result : INTEGER;
    (y < x).if {
      result := tak(tak(x - 1,y, z), tak(y - 1, z, x), tak(z - 1, x, y) );
    } else {
      result := z;
    };
    result
  );


  - takfp (x,y,z : REAL_64) : REAL_64 <-
  (
    + result: REAL_64;
    (y < x).if {
      result := takfp(takfp(x - 1,y, z), takfp(y - 1, z, x), takfp(z - 1, x, y) );
    } else {
      result := z;
    };
    result
 );


Section Public

  + n : INTEGER;

  - main <-
  (

    (COMMAND_LINE.count = 2).if {
      n := COMMAND_LINE.item 1.to_integer - 1;
      //"valeur trouvÃ©e".print;
      //n.print;
      //"\n".print;
    } else {
      n := 2;
    };
    "Ack(3,".print;
    (n + 1).print;
    "): ".print;
    ack 3 and (n+1).print;
    "\n".print;

    "Fib(".print; 
    (28.0 + n.to_real_64).to_integer.print;
    ".0): ".print;
    fibfp (28.0 + n.to_real_64).print_format_c "%.1f";
    "\n".print;

    "Tak(".print;
    ( 3 * n).print;
    ",".print;
    ( 2 * n).print; 
    ",".print;
    n.print;
    "): ".print;
    tak(3*n, 2*n, n).print;
    "\n".print;
	
    "Fib(3): ".print;
    fib 3.print;
    "\n".print;

    "Tak(3.0,2.0,1.0): ".print;
    takfp(3.0,2.0,1.0).print_format_c "%.1f";
    "\n".print;
  );
