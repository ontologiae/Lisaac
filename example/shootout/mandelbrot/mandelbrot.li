///////////////////////////////////////////////////////////////////////////////
//                              Lisaac Example                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header

  + name := MANDELBROT;
  
  - comment := "Mandelbrot set generation shootout benchmarck, based on the C version";
  
  - author := "Anthony Pajot <anthony.pajot@etu.enseeiht.fr>, Xavier Oswald <x.oswald@free.fr>";
  
Section Inherit
  
  - parent_object : OBJECT := OBJECT;
  
Section Public
  
  - main <-
  ( + w, h, bit_num:INTEGER;
    + iter:INTEGER;
    + byte_acc:INTEGER_8;
    + limit_sqr,ci,zr,zr2:REAL_64;
    + i:INTEGER;
    + mod_w,wm1,x2:INTEGER;
    + cmd:STRING;
    + cr, cr2 :REAL_64;

    iter      := 50;
    limit_sqr := 4.0;
        
    cmd := COMMAND_LINE.item 1;
    h := w := cmd.to_integer;    
        
    "P4\n".print;
    cmd.print;
    ' '.print;
    cmd.print;
    "\n".print;
    
    mod_w := 8 - w % 8;
    wm1   := w - 1;
    
    0.to (h - 1) do {y : INTEGER;
      
      ci  := (y*2).to_real_64 / h - 1.0;
      
      0.to wm1 by 2 do {x : INTEGER;
	+ zi, zi2:REAL_64;
        + tr, ti, tr2, ti2:REAL_64;
        	
	x2  := x + x;
	cr  :=     x2.to_real_64 / w - 1.5;
	cr2 := (x2+2).to_real_64 / w - 1.5;
	
	"cr=".print; cr.print_format_c "%f"; ' '.print;
	cr2.print_format_c "%f"; '\n'.print;
	"ci=".print; ci.print_format_c "%f"; '\n'.print;
	
	i := 0;
	{
	  zi := `2.0`:REAL_64 * zr  * zi  + ci;
	  zi2:= `2.0`:REAL_64 * zr2 * zi2 + ci;
	  
	  zr := tr  - ti  + cr;
	  zr2:= tr2 - ti2 + cr2;
	  
	  tr := zr  * zr;
	  tr2:= zr2 * zr2;
	  
	  ti := zi  * zi;
	  ti2:= zi2 * zi2;
	  
	  "tr=".print; tr.print_format_c "%f"; '\n'.print;
	  //"tr2=".print; tr2.print_format_c "%f"; ' '.print;
	  //"ti=".print; ti.print_format_c "%f"; ' '.print;
	  //"ti2=".print; ti2.print_format_c "%f"; '\n'.print;	  
	  
	  i  := i + 1;	  
	}.do_while {
	  (i < iter) && {
	    (tr + ti <= limit_sqr) || {tr2 + ti2 <= limit_sqr}
	  }
	};
	i.print; '\n'.print;
		
	byte_acc := byte_acc << 2;
	(tr + ti <= limit_sqr).if {
	  byte_acc := byte_acc | 02h;
	};
	(tr2 + ti2 <= limit_sqr).if {
	  byte_acc := byte_acc | 01h;
	};
	
	bit_num := bit_num + 2;
	(bit_num = 8).if {
	  //byte_acc/*.to_character*/.print; ' '.print;
	  byte_acc := bit_num := 0;
	} else { 
	  (x = wm1).if {
	    byte_acc := byte_acc << mod_w; 
	    //byte_acc/*.to_character*/.print; ' '.print;
	    byte_acc := bit_num := 0;
	  };	
	};
      };
      '\n'.print;
    };		    
  );
