/***************************************************************************
*                             Lisaac Library                               *
*                      (c) INRIA 2003 see 'licence.txt' for more details   *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
***************************************************************************/
/*
Copyright (C) 2005  Benoit Sonntag

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
section HEADER
  
  - name        := OBJECT;
  
  - category    := MICRO;
  
  - bibliography:= "http://IsaacOS.com";
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Root object.";

section PUBLIC
    
  //
  // Compiler consideration.
  //
  
  - object_size:INTEGER <- `52`;
  
  - pointer_size:INTEGER <- POINTER.pointer_size;

  - is_debug_mode:BOOLEAN <- `50`;
  //- is_debug_mode:BOOLEAN <- FALSE;  // For testing only call on NULL
  
  - is_ansi:BOOLEAN := SYSTEM.is_ansi;
  
  //
  // Control Error.
  //
  
  - is_clonable:BOOLEAN <- `0`;
  
  - print_runtime_stack <- `51`;
  
  - die_with_code code:INTEGER <- SYSTEM.exit code;
  // Terminate execution with exit status code `code'.
  
  - exit_success_code:INTEGER := 0;
  
  - exit_failure_code:INTEGER := 1;
  
  - deferred <-
  (
    crash_with_message "Slot deferred.\n";
  );
  
  - check_crash <-
  (
    print_runtime_stack;
    die_with_code exit_failure_code;
    //crash_with_message "Check runtime error.\n";  
  );
  
  - crash <-
  (
    crash_with_message "Crash system.\n";
  );
  
  - not_yet_implemented <-
  (
    crash_with_message "Sorry, Some Feature is Not Yet Implemented.\n";
  );

  - crash_with_message msg:ABSTRACT_STRING <-
  (
    print_runtime_stack;
    msg.print;
    die_with_code exit_failure_code;
  );
  
  //
  // Common Function.
  //
  
  - '=='  right 60 other:SELF :BOOLEAN <- deferred;
  
  - '!==' right 60 other:SELF :BOOLEAN <- (! (self == other));
  
  - clone:SELF <- 
  ( + result:SELF;
    + ptr:POINTER;
    + sz:INTEGER;
    ? {is_clonable};
    sz := object_size;
    (sz = 0).if {
      result := self;
    } else {
      ptr := MEMORY.allocation sz;
      MEMORY.copy ptr from to_pointer size sz;
      result := force_conversion ptr;
    };
    result
  );
  
  - to_pointer:POINTER <- POINTER.force_conversion self;
  
  - same_dynamic_type other:OBJECT :BOOLEAN <-
  ( + convert:SELF;
    convert ?= other;
    convert != NULL        
  );
  
  //
  // The Guru section
  //
  
  - force_conversion obj:OBJECT :SELF <- `@obj`:SELF;
