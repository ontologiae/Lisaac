/***************************************************************************
*                      Isaac Object Operating System                       *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Jerome BOUTET  - boutet@loria.fr                       *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
****************************************************************************/
/*
Copyright (C) 2005  Benoit Sonntag

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
section HEADER
  
  + name        := LIMIT_Y;
  
  - comment     := "Sub structure for AREA.";
  
  - category    := MICRO;
  
  - bibliography:= "http://IsaacOS.com";
  - author      := "Benoit Sonntag (bsonntag@loria.fr), Jerome Boutet (boutet@loria.fr)";
  
  - verision    := "1.0";
  
section INHERIT

  - parent_object:OBJECT := OBJECT;
  
section PUBLIC  

  + value:INTEGER;
  
  + plan:PLAN;
  + is_top:BOOLEAN;  
  
  + next:LIMIT_Y;
  + prev:LIMIT_Y;
  
section PUBLIC 

  - make y:INTEGER plan p:PLAN is_top b:BOOLEAN <- 
  (
    is_top:=b;
    plan  :=p;
    value :=y;
  );
  
  - create_top y:INTEGER plan p:PLAN :LIMIT_Y <- 
  ( + result:LIMIT_Y;
    
    result:=LIMIT_Y.clone;
    result.make y plan p is_top TRUE;
    result
  );

  - create_bottom y:INTEGER plan p:PLAN :LIMIT_Y <- 
  ( + result:LIMIT_Y;
    
    result:=LIMIT_Y.clone;
    result.make y plan p is_top FALSE;
    result
  );
  
  - append old_root:LIMIT_Y :LIMIT_Y <-
  ( + new_root:LIMIT_Y;
    + n,p:LIMIT_Y;
    
    n:=old_root;
    {(n!=NULL) && {n.value<value}}.while_do {
      p:=n; 
      n:=n.next; 
    };
    next:=n; 
    prev:=p;
    (prev=NULL).if {
      new_root:=self; 
    } else {
      new_root:=old_root;
      p.set_next self;
    };
    (n!=NULL).if {
      n.set_prev self;
    };
    new_root
  );

  - remove old_root:LIMIT_Y :LIMIT_Y <-
  ( + new_root:LIMIT_Y;
    
    (prev=NULL).if {
      new_root:=next;
    } else {
      prev.set_next next;
      new_root:=old_root;
    };
    (next!=NULL).if {
      next.set_prev prev;
    };
    new_root
  );

  - set_value v:INTEGER <-
  (
    value:=v;
  );
  
  - set_next new:LIMIT_Y <-
  (
    next:=new;
  );

  - set_prev new:LIMIT_Y <-
  (
    prev:=new;
  );


