Section Header

  + name    := COMPARABLE;


  - copyright   := "2003-2005 JÃ©rome Boutet, 2003-2007 Benoit Sonntag";

  - comment := " All classes handling COMPARABLE objects with a total order\
               \relation should inherit from this class.";

Section Inherit

  - parent_object:OBJECT := OBJECT;

Section Public

  - Self:SELF '=='  Right 60 other:E :BOOLEAN <-
  ( + result:BOOLEAN;
    + same:SELF;
    same ?= other;
    (same != NULL) && {! (Self < same)} && { ! (same < Self)}
  );

  - Self:SELF '<' Left 1 other:SELF :BOOLEAN <-
  // Is `self' strictly less than `other'?
  (
    ? { other != NULL };
    deferred;
    //? { result -> ! (other < self)};
  );

  - Self:SELF '<=' Left 1 other:SELF :BOOLEAN <-
  // Is `self' less than or equal `other'?
  (
    + result:BOOLEAN;

    ? { other != NULL };
    result := ! (other < Self);
    ? { result = ((Self < other) | == other)};

    result
  );

  - Self:SELF '>' other:SELF :BOOLEAN <-
  // Is `self' strictly greater than `other'?
  (
    ?{ other != NULL };
    other < Self
  );

  - Self:SELF '>=' other:SELF :BOOLEAN <-
  // Is `self' greater than or equal than `other'?
  (
    ?{ other != NULL };
    ! (Self < other)
  );

  - in_range lower:SELF to upper:SELF :BOOLEAN <-
  // Return true if `self' is in range [`lower'..`upper']
  (
    (Self >= lower) && { Self <= upper }
  );

  - compare other:SELF :INTEGER <-
  // If current object equal to `other', 0;
  // if smaller,  -1; if greater, 1.
  (
    + result:INTEGER;
    ?{ other != NULL };
    (Self < other).if {
      result := -1;
    }.elseif { other < Self } then {
      result := 1;
    } else {
      result := 0;
    };

    ? { (result =  0) = ( == other)};
    ? { (result = -1) = (Self < other)};
    ? { (result =  1) = (Self > other)};

    result
  );

  - min other:SELF :SELF <-
  // Minimum of `self' and `other'.
  (
    + result:SELF;

    ?{ other != NULL };
    ( Self <= other ).if {
      result := Self;
    } else {
      result := other;
    };

    ? { (result <= Self) && { result <= other}};
    ? { (compare result = 0) || { other.compare result = 0 }};

    result
  );


  - max other:SELF :SELF <-
  // Maximum of `self' and `other'.
  (
    + result:SELF;
    ?{ other != NULL };

    ( Self >= other ).if {
      result := Self;
    } else {
      result := other;
    };

    ? { (result >= Self) && { result >= other }};
    ? { (compare result = 0) || {other.compare result = 0}};

    result
  );


