///////////////////////////////////////////////////////////////////////////////
//                              Lisaac Example                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := EXAMPLE;
    
  - bibliography:= "http://IsaacOS.com";
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "The first program.";
  
Section Inherit
  
  - parent_any:ANY := ANY;
  
Section Private
  
  - current_directory:STRING := STRING.create 256;
  
  //
  // File manager.
  //
    
Section Private
  
  // BSBS: A mettre en lib.
  
  - path:G_IN; // BUG COMPILER !!!!!
  - dir_w:G_WIN_IN;
  - fil_w:G_WIN_IN;    

  - scan_directory_filter typ:ABSTRACT_STRING action_select select:{ABSTRACT_STRING; }
  directory_widget d_w:G_WIN_IN 
  file_widget f_w:G_WIN_IN
  path_widget p_bug:G_IN <-
  ( + bt:G_BUTTON;
    + entry:ENTRY;
    + dir,file:G_EXPR;
    + new_dir:{G_BUTTON; };
    + background:G_RAW;
    + directory:DIRECTORY;
    
    
    "typ:".print; 
    (typ = NULL).if {
      "NULL\n".print;
    } else {
      typ.print;
      '\n'.print;
    };
    
    new_dir := { b:G_BUTTON;
      + name:G_OUT;      
      name ?= b.root;      
      path.text.keep_head (path.text.fast_last_index_of '/');
      path.text.append (name.text);            
      scan_directory_filter typ action_select select
      directory_widget dir_w file_widget fil_w path_widget path;
    };
    
    directory ?= FILE_SYSTEM.get_entry (path.text);
    (directory.open).if_false {
      "Directory : ".print;
      directory.path.print; 
      " not open!\n".print;
      die_with_code 0;
    };
    path.text.copy (directory.path);
    path.text.add_last '/';
    path.refresh;
    dir := G_BUTTON.create (G_OUT.create "..") action new_dir;    
    (directory.lower).to (directory.upper) do { j:INTEGER;
      entry := directory.item j;
      (entry.is_directory).if {        
        bt := G_BUTTON.create (G_OUT.create (entry.name)) action new_dir;
        dir := dir / bt;
      }.elseif {(typ = NULL) || {entry.name.has_suffix typ}} then {
        bt := G_BUTTON.create (G_OUT.create (entry.name)) action { b:G_BUTTON;
          + name:G_OUT;
          name ?= b.root;
          path.text.keep_head (path.text.fast_last_index_of '/');
          path.text.append (name.text);          
          path.refresh;
          select.value (path.text);
        };
        (file = NULL).if {
          file := bt;
        } else {
          file := file / bt;
        };
      };      
    };    
    (file = NULL).if {
      file := G_OUT.create "no file" justify (G_OUT.center);
    };
    background ?= dir_w.win_in.root;
    background.delete;
    background.make (dir.fix_height);        
    background ?= fil_w.win_in.root;
    background.delete;
    background.make (file.fix_height);    
    dir_w.refresh_in;
    fil_w.refresh_in;
  );
  
Section Public
  
  - filesystem_window dir:ABSTRACT_STRING 
  filter suffix:ABSTRACT_STRING
  with add_widget:G_EXPR 
  action_select select:{ABSTRACT_STRING; } action_ok ok:{ABSTRACT_STRING; } <-
  ( + win:G_WIN_OUT;    
    + body:G_EXPR;    

    dir_w := G_WIN_IN.create (160,240) with (G_RAW.create (G_OUT.create ""));
    fil_w := G_WIN_IN.create (160,240) with (G_RAW.create (G_OUT.create ""));
    path := G_IN.create (64,1);
    path.text.copy dir; 
    body := 
    (
      (
        G_RAW.create (
          G_OUT.create "Directory" /            
          dir_w
        )
      ) | (
        G_RAW.create (
          G_OUT.create "File" /
          fil_w
        )
      ) 
    ) / (
      G_RAW.create (
        G_OUT.create " File name : " | path 
      )
    ) / (
      G_BUTTON.create (G_OUT.create " OK " justify (G_OUT.center)) action { b:G_BUTTON;
        + p:G_WIN_OUT;
        p ?= b.parent;          
        p.close;
        ok.value (path.text);          
      } |
      G_BUTTON.create (G_OUT.create "Cancel" justify (G_OUT.center)) action { b:G_BUTTON;
        + p:G_WIN_OUT;
        p ?= b.parent;          
        p.close;
      }
    );
    (add_widget != NULL).if {
      body := body | add_widget;
    };
    win := G_WIN_OUT.create "Open" with body;        
    win.open_by DESK;
    
    `/* BSBS CALL */`;
    
    scan_directory_filter suffix action_select select directory_widget dir_w 
    file_widget fil_w path_widget path;
  );
  
Section Public
  
  - main <-
  ( + menu_bar:G_EXPR;
    + tools_bar:G_EXPR;
    + select,zoom,line,rectangle,ellipse,text,paint:G_CHECK;
    //
    + zoom_bar:G_WIN_OUT;
    //    
    + file_menu:G_WIN_OUT;
    + edit_menu:G_WIN_OUT;
    + present_menu:G_WIN_OUT;
    + dispo_menu:G_WIN_OUT;
    + window_menu:G_WIN_OUT;
    + help_menu:G_WIN_OUT;
    //    
    + align_win:G_WIN_OUT;
    //
    + t,m,b:G_CHECK;
    + r,c,l:G_CHECK;
    //
    + action_not_yet_implemented:{G_BUTTON; };
    
    current_directory.copy (FILE_SYSTEM.path);
    current_directory.append "/TravCUT";
    
    // Init window.
    VIDEO.make_size (800,600);
    
    action_not_yet_implemented := { bt:G_BUTTON;     
      /*+ w:G_WIN_OUT;
      + g:AREA;
      
      g := bt.parent;
      {
        w ?= g;
        g := g.parent;
      }.do_while {(w = NULL) && {g != NULL}};     
      (w != NULL).if {
        w.close;
      };
      message_not_yet_implemented;
      */
    };

    // Align Window :
    align_win := G_WIN_OUT.create "Alignment" with (
      (
	(
	  (t := G_CHECK.create_with_check (G_OUT.create "Top "))    /
	  (m := G_CHECK.create_with_check (G_OUT.create "Medium ")) /
	  (b := G_CHECK.create_with_check (G_OUT.create "Bottom ")) 
	) | (
	  (
	    (l := G_CHECK.create_with_check (G_OUT.create "Left "))   |
	    (c := G_CHECK.create_with_check (G_OUT.create "Center ")) |
	    (r := G_CHECK.create_with_check (G_OUT.create "Right "))
	  ).fix_height /
	  (
	    G_RAW.create ((G_CHECK.create_with_check (G_OUT.create "In page ").fix_height.fix_width))
	  )
	)
      ) / (
	G_BUTTON.create (G_OUT.create "  OK  " justify (G_OUT.center)) action 
        action_not_yet_implemented |
        G_BUTTON.create (G_OUT.create "Cancel" justify (G_OUT.center)) action { bt:G_BUTTON;     
          + w:G_WIN_OUT;
          w ?= bt.parent;
          w.close;          
        }
      )
    );
    t ^ m ^ b;
    l ^ c ^ r;
    
    // File menu :    
    file_menu := G_WIN_OUT.create (
      G_RAW.create (
	G_BUTTON.create (G_OUT.create "New") action action_not_yet_implemented
      ) / 
      G_RAW.create (
        G_BUTTON.create (G_OUT.create "Open ...")    action { bt:G_BUTTON; 
          + w:G_WIN_OUT;
          w ?= bt.parent.parent;
          w.close;
          filesystem_window current_directory filter NULL
          with NULL action_select 
          { name:ABSTRACT_STRING;
            "select ".print;
            name.print; 
            '\n'.print;
          } action_ok 
          { name:ABSTRACT_STRING;
            + f:FILE;
            + e:ENTRY;
      
            e := FILE_SYSTEM.get_entry name;
            (e = NULL).if {
              "Error file!\n".print;
            } else {
              f ?= e.open;
              (f = NULL).if {
                "Error open\n".print;
              } else {
                /*
                (FORMAT_BCT.load f).if {
                  f.close;
                  page.refresh;
                } else {
                  "Error format\n".print;
                };
                */
              };
            };
          };
        } /
	G_BUTTON.create (G_OUT.create "Save")        action action_not_yet_implemented / 
	G_BUTTON.create (G_OUT.create "Save as ...") action action_not_yet_implemented
      ) /
      G_RAW.create (
	G_BUTTON.create (G_OUT.create "Import ...") action action_not_yet_implemented /
	G_BUTTON.create (G_OUT.create "Export ...") action action_not_yet_implemented
      ) /
      G_RAW.create (
	G_BUTTON.create (G_OUT.create "Print ...") action action_not_yet_implemented
      ) /
      G_RAW.create (
	G_BUTTON.create (G_OUT.create "Exit")      action action_not_yet_implemented  
      )
    );
    
    // Edit menu :    
    edit_menu := G_WIN_OUT.create (
      G_RAW.create (
	G_BUTTON.create (G_OUT.create "Undo") action action_not_yet_implemented /
	G_BUTTON.create (G_OUT.create "Redo") action action_not_yet_implemented     
      ) /
      G_RAW.create (
	G_BUTTON.create (G_OUT.create "Delete")     action action_not_yet_implemented / 
	G_BUTTON.create (G_OUT.create "Duplicate")  action action_not_yet_implemented /
	G_BUTTON.create (G_OUT.create "Select all") action action_not_yet_implemented 
      )
    );
    
    // Present menu :    
    present_menu := G_WIN_OUT.create (
      G_CHECK.create_with_check (G_OUT.create "Magnetic locate") /
      G_CHECK.create_with_check (G_OUT.create "Contour")         
    );
    
    // Dispo menu :    
    dispo_menu := G_WIN_OUT.create (      
      G_RAW.create (
	G_BUTTON.create (G_OUT.create "Text editor...") action action_not_yet_implemented /
	G_BUTTON.create (G_OUT.create "Alignment") connect align_win   /
	G_BUTTON.create (G_OUT.create "to curve") action action_not_yet_implemented       
      ) /
      G_RAW.create (	    
	G_BUTTON.create (G_OUT.create "First plan") action action_not_yet_implemented     / 
	G_BUTTON.create (G_OUT.create "Last plan") action action_not_yet_implemented      
      ) /
      G_RAW.create (
	G_BUTTON.create (G_OUT.create "Group") action action_not_yet_implemented          /
	G_BUTTON.create (G_OUT.create "Degroup") action action_not_yet_implemented        /
	G_BUTTON.create (G_OUT.create "Combine") action action_not_yet_implemented        /
	G_BUTTON.create (G_OUT.create "Decombine") action action_not_yet_implemented      /        
	G_BUTTON.create (G_OUT.create "Auto-combine") action action_not_yet_implemented
      )
    );

    // Window menu :    
    window_menu := G_WIN_OUT.create (
      G_BUTTON.create (G_OUT.create "Refresh draw") action action_not_yet_implemented
    );

    // Help menu :    
    help_menu := G_WIN_OUT.create (
      G_BUTTON.create (G_OUT.create "About ...") action action_not_yet_implemented /
      G_BUTTON.create (G_OUT.create "Bugs report ...") action action_not_yet_implemented /
      G_BUTTON.create (G_OUT.create "News ...") action action_not_yet_implemented
    );

    // Menu Bar :
    menu_bar := (
      G_BUTTON.create (G_OUT.create " File ")         connect file_menu.fix_width    |
      G_BUTTON.create (G_OUT.create " Edit ")         connect edit_menu.fix_width    |
      G_BUTTON.create (G_OUT.create " Presentation ") connect present_menu.fix_width |
      G_BUTTON.create (G_OUT.create " Disposition ")  connect dispo_menu.fix_width   |
      G_BUTTON.create (G_OUT.create " Window ")       connect window_menu.fix_width  | 
      G_OUT.create " "                                                               |
      G_BUTTON.create (G_OUT.create " Help ")         connect help_menu.fix_width  
    ).fix_height;
    
    // Zoom bar.
    zoom_bar := G_WIN_OUT.create (
      G_BUTTON.create (G_IMG.create "zoom_in.bmp")     |
      G_BUTTON.create (G_IMG.create "zoom_out.bmp")    |
      G_BUTTON.create (G_IMG.create "zoom_select.bmp") |
      G_BUTTON.create (G_IMG.create "zoom_page.bmp")   |
      G_BUTTON.create (G_IMG.create "zoom_100.bmp") 
    );
    
    // Tools bar.
    tools_bar := (
      (select    := G_CHECK.create (G_IMG.create "select.bmp"))    /
      (zoom      := G_CHECK.create (G_IMG.create "zoom.bmp") connect zoom_bar) /
      (line      := G_CHECK.create (G_IMG.create "line.bmp"))      /
      (rectangle := G_CHECK.create (G_IMG.create "rectangle.bmp")) /
      (ellipse   := G_CHECK.create (G_IMG.create "ellipse.bmp"))   /
      (text      := G_CHECK.create (G_IMG.create "text.bmp"))      /
      (paint     := G_CHECK.create (G_IMG.create "paint.bmp"))
    ).fix_width.fix_height;
    select ^ zoom ^ line ^ rectangle ^ ellipse ^ text ^ paint;
    
    // Screen definition.
    DESK.make VIDEO with (             
      menu_bar  / (
        tools_bar | (
          RULER_HORIZONTAL.create / (
            RULER_VERTICAL.create | G_WIN_IN.create (320,200) with page
          )
        ) 
      ) / (
        G_RAW.create (
          G_OUT.create " Context Information ..."
        ).fix_height
      )
    );
    
    // +---------------------+
    // |         menu        |
    // +---+-----------------+
    // | t |                 |
    // | o |                 |    => menu / (tools | page )
    // | o |     PAGE        |
    // | l |                 |
    // | s |                 |
    // +---+-----------------+
  );
