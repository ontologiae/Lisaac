///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ITM_PROTOTYPE;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Prototype constant";
  
Section Inherit
  
  + parent_itm_constant:Expanded ITM_CONSTANT;
  
Section Public

  + type:ITM_TYPE_MONO;
  
  //
  // Constructor
  //
  
  - create p:POSITION type n:ITM_TYPE_MONO :SELF <-
  ( + result:SELF;
    result := clone;
    result.make p type n;
    result
  );
    
  - make p:POSITION type n:ITM_TYPE_MONO <-
  ( 
    position := p;
    type := n;    
  );

  //
  // Runnable
  //

  - to_run_expr:EXPR <- 
  ( + t:TYPE_FULL;
    + result:EXPR;
        
    last_position := position;                
    t := type.to_run_for profil_slot;        
    (t = NULL).if {
      string_tmp.copy "Type `";
      type.append_in string_tmp;
      string_tmp.append "' not found (Undefine type parameter).";      
      semantic_error (position,string_tmp);
    };
    // TYPE Classic.    
    (
      (t.is_expanded_c) && 
      {t.raw != type_boolean} && 
      {t.raw != type_true} && 
      {t.raw != type_false}
    ).if {
      result := t.default_value position;
      result := result.check_type t with position;
    } else {      
      result := PROTOTYPE_CST.create position type t;
    };
    result
  );
  
  //
  // Display.
  //
  
  - append_in buffer:STRING <-
  (
    type.append_in buffer;
  );







