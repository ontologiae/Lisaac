/****************************************************************************
*                     Isaac Object Operating System                        *
*                             Lisaac Compiler                              *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Jerome BOUTET  - boutet@loria.fr                       *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
****************************************************************************/

section HEADER
  
  + name        := INSTALL_LISAAC;

  - comment     :="Configure the system file and the PATH";
  
  - category    := MACRO;
  
  - bibliography:="http://IsaacOS.com";
  - author      :="Sonntag Benoit (bsonntag@loria.fr) - Boutet Jerome (boutet@loria.fr)";
  
section INHERIT
  
  - parent_object:OBJECT <- OBJECT;
  
section PRIVATE  
  
  //
  // Independance File System 
  //
  
  - open_read n:ABSTRACT_STRING :POINTER <- 
  ( + buf:NATIVE_ARRAY[CHARACTER];
    string_tmp.copy n;
    buf := string_tmp.to_external;
    `fopen((char*)@buf,"rb")`:(POINTER)
  );

  - open_write n:ABSTRACT_STRING :POINTER <- 
  ( + buf:NATIVE_ARRAY[CHARACTER];
    string_tmp.copy n;
    buf := string_tmp.to_external;
    `fopen((char*)@buf,"wb")`:(POINTER)
  );
  
  - read f:POINTER in buf:STRING size sz:INTEGER :INTEGER <-   
  ( + ptr:NATIVE_ARRAY[CHARACTER];
    + result:INTEGER;
    ptr := buf.to_external;    
    result := `fread((void *)(@ptr),(size_t)(1), (size_t)(@sz),(FILE*)(@f))`:(INTEGER);
    buf.from_external ptr;
    result
  );

  - write f:POINTER with buf:STRING size sz:INTEGER :INTEGER <-   
  ( + ptr:NATIVE_ARRAY[CHARACTER];
    + result:INTEGER;
    ptr := buf.to_external;    
    result := `fwrite((void *)(@ptr),(size_t)(1), (size_t)(@sz),(FILE*)(@f))`:(INTEGER);
    result
  );
  
  - close p:POINTER <- `fclose((FILE*)(@p))`;
  
  - file_size p:POINTER :INTEGER <-
  ( + result:INTEGER;
    `fseek((FILE*)(@p),0,SEEK_END)`;
    result := `ftell((FILE *)@p)`:INTEGER;
    `fseek((FILE*)(@p),0,SEEK_SET)`;
    result
  );

  - make_file new_path:STRING :BOOLEAN <-
  ( + p:NATIVE_ARRAY[CHARACTER];
    + stream:POINTER;
    + result:BOOLEAN;
    
    p := new_path.to_external;
    stream := `fopen((char*)@p,"w+b")`:POINTER;
    (result := (stream != NULL)).if {
      close stream; 
    };
    result
  );
  
  //
  //
  //
  
  - error st:ABSTRACT_STRING <-
  (
    "Error: ".print;
    st.print;
    die_with_code exit_failure_code;
  );
  
  - step_count:INTEGER;  
  - step_max  :INTEGER := 5;
  
  - title str:STRING_CONSTANT <-
  (
    step_count := step_count + 1;
    "Step ".print;
    step_count.print;
    '/'.print;
    step_max.print;
    " : ".print;
    str.print;
    '\n'.print;
    1.to (str.count + 11) do { j:INTEGER;
      "=".print;
    };
    '\n'.print;
  );    
  
  - update file:ABSTRACT_STRING idf id:STRING_CONSTANT with new_text:ABSTRACT_STRING <-
  ( + index:INTEGER;
    + old_buffer,input:STRING;
    + std_file:POINTER;
    + size_file:INTEGER;
    
    "  A `".print;
    file.print;
    
    std_file := open_read file;
    (std_file != NULL).if {    
      // Update file.
      size_file := file_size std_file;
      input := STRING.create ((size_file + new_text.count).to_uinteger);
      read std_file in input size (size_file);
      close std_file; 
      //    
      index := input.first_substring_index id;
      (index != 0).if {
	// Update configuration.
	old_buffer := STRING.create 200;
	1.to (new_text.occurrences '\n') do { j:INTEGER; 
	  {input.item index != '\n'}.while_do {
	    old_buffer.add_last (input.item index);
	    input.remove index;
	  };
	  old_buffer.add_last (input.item index);
	  input.remove index;
	};
	(old_buffer == new_text).if {
	  "' file has no need to change. Current version is:\n".print;
	} else {
	  "' file has been updated. Old value is:\n".print;
	  old_buffer.print;
	  "  New value is:\n".print;
	};
      } else {
	"' file has been updated with:\n".print;		
	index := input.upper + 1;
      };
      new_text.print;
      // Append configuration.
      input.insert_string new_text to index; 
    } else {
      // Creation file.
      "' file has been created with:\n".print; 
      new_text.print;
      input := new_text;
      (! make_file file).if {
	error("Not create file!");
      };
    };
    std_file := open_write file;
    write std_file with input size (input.count);
    close std_file;
  );
  
  //
  // Global variable.
  //
  
  - path_current:STRING;
  - path_home   :STRING;
  - shell        :STRING;
  - system      :STRING_CONSTANT;
  
  //
  // Constant for environment variable & path.
  //
 
  - system_unix_bash:STRING_CONSTANT := "Unix - bash";
  - system_unix_tcsh:STRING_CONSTANT := "Unix - tcsh";
  - system_windows  :STRING_CONSTANT := "Windows - DOS";
  - system_unknown  :STRING_CONSTANT := "Unknown";
  
  - file_bashrc  :STRING_CONSTANT := "/.bashrc";
  - file_cshrc   :STRING_CONSTANT := "/.cshrc";
  - file_autoexec:STRING_CONSTANT := "C:\\autoexec.bat";
  
  - comment_windows :STRING_CONSTANT := "\r\nREM **** LISAAC COMPILER ****\r\n";
  - comment_unix    :STRING_CONSTANT := "\n# **** LISAAC COMPILER ****\n";
  
  - lisaac_bash   :STRING_CONSTANT := "export LISAAC=";
  - lisaac_tcsh   :STRING_CONSTANT := "setenv LISAAC ";
  - lisaac_windows:STRING_CONSTANT := "set LISAAC=";
  
  - path_bash   :STRING_CONSTANT := "\nexport PATH=";
  - path_tcsh   :STRING_CONSTANT := "\nset path=(";
  - path_windows:STRING_CONSTANT := "\r\nset path=";
  
  - path_bash_next   :STRING_CONSTANT := "/bin:$PATH\n\n";
  - path_tcsh_next   :STRING_CONSTANT := "/bin $path)\n\n";
  - path_windows_next:STRING_CONSTANT := "\\bin;%path%\r\n\r\n";
    
  //
  // Detect system and install environment variables.
  //
  
  - install_variable <-
  ( + std_file:POINTER;
    + new_text :STRING;
    + file     :STRING;
    + comment  :STRING_CONSTANT;
    + lisaac   :STRING_CONSTANT;
    + path     :STRING_CONSTANT;
    + path_next:STRING_CONSTANT;
        
    file := STRING.create_from_string path_home;
    
    //
    // Detect system
    //
    
    (shell.has_substring "bash").if {
      // Unix - bash
      file.append file_bashrc;
      system    := system_unix_bash;
      comment   := comment_unix; 
      lisaac    := lisaac_bash;
      path      := path_bash;
      path_next := path_bash_next;
    }.elseif { shell.has_substring "tcsh" } then {
      // Unix - tcsh
      file.append file_cshrc;
      system := system_unix_tcsh;
      comment   := comment_unix; 
      lisaac    := lisaac_tcsh;
      path      := path_tcsh;
      path_next := path_tcsh_next;
    } else {
      // On other shell
      std_file := open_read file_autoexec;
      (std_file != NULL).if {
	// Windows
	close std_file;
	file.append file_autoexec;
	system    := system_windows;
	comment   := comment_windows; 
	lisaac    := lisaac_windows;
	path      := path_windows;
	path_next := path_windows_next;
      } else {
	// Unknown
	system := system_unknown;
      };  
    };        
    
    "  System detect: ".print;
    system.print;
    '\n'.print;
    (system != system_unknown).if {
      (system = system_windows).if {
	update "path.li" idf "  + target" with "  + target := WINDOWS;\n";
	"\n  Note: You can to compile just for DOS with `+ target := DOS;' \n\
	\        or `-t dos' option for lisaac command.\n".print; 
      } else {
	update "path.li" idf "  + target" with "  + target := UNIX;\n";
      };
    };
    '\n'.print;
    
    //
    // Installation environment variable
    //
        
    title "Installation of environment variables.";
    
    (system = system_unknown).if {
      // Fail.
      "  Auto-install fail !\n\
      \  You have to change your environment variables as following: \n\
      \    set LISAAC=".print;
      path_current.print;
      "\n    set path=".print;
      path_current.print;
      "\\bin;%path%\n\n".print;
    } else {
      // Creation environment variables.
      new_text := STRING.create_from_string comment;
      new_text.append lisaac;
      new_text.append path_current; 
      new_text.append path;
      new_text.append path_current;
      new_text.append path_next;
      
      update file idf comment with new_text;
    };
  );
  
  //
  // Install for Emacs.
  //
  
  - lisaac_mode_comment :STRING_CONSTANT := "\n;; **** LISAAC MODE ****\n";
  - lisaac_mode_path    :STRING_CONSTANT := "(setq load-path (cons \"";
  - lisaac_mode_path_end:STRING_CONSTANT := "/emacs/\" load-path))\n"; 
  - lisaac_mode         :STRING_CONSTANT := 
  "(add-to-list 'auto-mode-alist '(\"\\\\.li\\\\'\" . lisaac-mode))\n\
  \(autoload 'lisaac-mode \"lisaac-mode\" \"Major mode for Lisaac Programs\" t)\n\n";

  - install_emacs <-
  ( + char:CHARACTER;
    + file_name, new_text:STRING;
    
    "  Do you want to install the `lisaac-mode' for Emacs editor ? (y/n)".print;
    {(char != 'y') && {char != 'n'}}.while_do {
      char := IO.read_character;
    };
    (char = 'n').if {
      "  Not install `lisaac-mode' for Emacs editor.\n\n".print;
    } else {
      file_name := STRING.create_from_string path_home;
      file_name.append "/.emacs";
      new_text := STRING.create_from_string lisaac_mode_comment;
      new_text.append lisaac_mode_path;
      new_text.append path_current;
      new_text.append lisaac_mode_path_end;
      new_text.append lisaac_mode;
      update file_name idf lisaac_mode_comment with new_text;
    };
  );
  
  //
  // Install Compiler
  //
  
  - install_compiler <-
  ( + cmd:STRING_CONSTANT;
    + char:CHARACTER;
    
    "  Have you got GCC version 4.0 or greater ? (y/n)\n".print;
    "  (type `gcc --version' for information)\n".print;
    {(char != 'y') && {char != 'n'}}.while_do {
      char := IO.read_character;
    };
    
    (char = 'y').if {
      (system = system_windows).if {
	cmd := "gcc -O2 bin/lisaac.c -o bin/lisaac.exe";
      } else {
	cmd := "gcc -O2 bin/lisaac.c -o bin/lisaac";
      };
    "\n  NOTE : Sorry, with GCC v.4.0 or greater, we have a problem (when -O3 gcc option)\n\
    \  and a lot of `warning' are display...\n\n".print;
    } else {
      (system = system_windows).if {
	cmd := "gcc -O3 bin/lisaac.c -o bin/lisaac.exe";
      } else {
	cmd := "gcc -O3 bin/lisaac.c -o bin/lisaac";
      };
      "\n  NOTE : If you want, you can update `path.li' with -O3 option for GCC.\n\n".print;
    };
    "  Execute command `".print;
    cmd.print;
    "' (please wait ...)\n".print;
    (ENVIRONMENT.execute_command cmd != 0).if {
      "  Auto-install fail !\n\
      \  You want to compile a `bin/lisaac.c' file.\n".print;
    };
    '\n'.print;
  );
  
  - string_tmp:STRING := STRING.create 256;
  
section PUBLIC
  
  + main <-
  ( + cwd:NATIVE_ARRAY[CHARACTER];
    
    "\t\t================================\n\
    \\t\t= Auto-Install Lisaac Compiler =\n\ 
    \\t\t================================\n\n".print;
    string_tmp.clear;
    cwd := string_tmp.to_external;
    `getcwd(@cwd,255)`;
    string_tmp.from_external cwd;
    
    path_current := STRING.create (string_tmp.count);
    path_current.copy string_tmp; 
    path_home    := ENVIRONMENT.get_environment_variable "HOME";
    shell        := ENVIRONMENT.get_environment_variable "SHELL";
    
    title "Detection system.";
    install_variable;

    title "Installation of `lisaac-mode' for Emacs.";
    install_emacs;      
    
    title "Compilation of Lisaac compiler."; 
    install_compiler;
    
    title "Welcome to the Lisaac World !";
    
    "  Installation successfull.\n\
    \  Run `lisaac' to compile.\n\
    \  Note: You'll have to reboot or reloaded environnement\n\
    \        to acknowledge the changes.\n".print;
  );






