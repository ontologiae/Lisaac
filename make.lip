//
// file LIP : LIsaac Path directory and make LIsaac Project system.
//
Section Private
  
  //
  // Compiler variables.
  //
  
  // File information (auto-loading variables).
  + lisaac          :STRING; // is environment variable value (auto-loading).
  + input_file      :STRING; // is input file name value without extension.
  + output_file     :STRING; // is output file name value without extension.
  + output_extension:STRING; // is extension of `output_file'
  + is_speed_push:BOOLEAN := TRUE; // See `old_push' function.
  
  // Debug information.
  + debug_level:INTEGER := 15;
  + debug_with_code:BOOLEAN := TRUE; 
  + is_all_warning:BOOLEAN;
    
  // Optimization.
  + is_optimization:BOOLEAN;
  + inline_level:INTEGER := 5;
  
  // Generate code.
  + is_cop:BOOLEAN := FALSE; 
  + is_library:BOOLEAN; // For build a lisaac library C 
  + execute_back_end:BOOLEAN := TRUE;
  + execute_status_code:INTEGER := 0;

  // Other.
  + is_statistic:BOOLEAN;
  + is_quiet:BOOLEAN;
  
  + is_o3:BOOLEAN;
  + is_tcc:BOOLEAN;
  
  //
  // Other variables.
  //
  
  + option_gcc:STRING;  
  + lib_gcc:STRING;
  + execute_file:STRING;
  
  + target:STRING := "unix";
  + is_apple:BOOLEAN := TRUE;
  
  + cc:STRING := "gcc";
  
  //
  // Service
  //
  
  + exit_success_code:INTEGER := 0;
  
  + exit_failure_code:INTEGER := 1;
  
  + message:STRING := "";
  
  - message_install msg:STRING <-
  (
    message := msg;
  );
  
  - add_lib lib:STRING <-
  (
    (target = "windows").if {
      run "echo int main(){ return(1); } > __tmp__.c";    
      (run (cc + " __tmp__.c -o __tmp__ " + lib + " > NUL") = 0).if {
        lib_gcc := lib_gcc + " " + lib;
        run "del __tmp__.c __tmp__.exe";
      } else {
        "\nERROR: `" + lib + "' library for `"+cc+"' not found.\n".print;
        run "del __tmp__.c";
        message.print;
        die_with_code exit_failure_code;
        };    
    } else {
      run "echo \"int main(){ return(1); }\" > __tmp__.c";
      (run (cc + " __tmp__.c -o __tmp__ " + lib + " 2> /dev/null") = 0).if {
        lib_gcc := lib_gcc + " " + lib;
        run "rm __tmp__.c __tmp__";
      } else {
        ("\nERROR: `" + lib + "' library for `"+cc+"' not found.\n").print;
        run "rm __tmp__.c";
        message.print;
        die_with_code exit_failure_code;
      };          
    };
  );
  
  - execute cmd:STRING <-
  (
    (! is_quiet).if {
      "run `".print;
      cmd.print;
      "'\n".print;
    };
    execute_status_code := run cmd;
    (execute_status_code != 0).if {
      (is_quiet).if {
        "FAILURE run `".print;
        cmd.print;
        "' (".print;
      } else {
        "FAILURE (".print;
      };
      execute_status_code.print;
      ")\n".print;
    };
  );

  - execute_fail cmd:STRING <-
  (
    execute cmd;
    (execute_status_code > 255).if {
      die_with_code exit_failure_code;
    };
    (execute_status_code != 0).if {
      die_with_code execute_status_code;
    };
  );

  //
  // Execute function.
  //
    
  - general_front_end <-
  (    
    path "lib/*";
    old_push; // BSBS: Pour l'instant...
  );
  
  - general_back_end <-
  (
    ((execute_back_end) & (target != "android")).if {
      (is_cop).if {
        lib_gcc := lib_gcc + " -lpthread";
      };
      (target = "windows").if {
        execute_file := output_file + ".exe";
      } else {
        execute_file := output_file;
      };
      (option_gcc != " -g").if {
        (is_o3).if {
          option_gcc := option_gcc + " -O3";
        } else {
          option_gcc := option_gcc + " -O2";
        };
      };
      option_gcc := option_gcc + " -Wall -U_FORTIFY_SOURCE -Wno-parentheses-equality -Wstrict-overflow=0 "; // -fomit-frame-pointer 
      
      (is_tcc).if {
        (is_library).if {
          execute_fail ("tcc " + output_file + output_extension + " -c ");
        } else {
          execute_fail ("tcc " + output_file + output_extension + " -o " + output_file + lib_gcc);
        };
      } else {              
        //execute_fail ("sed -i 's/ = \\*((\\*COLOR__/ = ((\\*COLOR__/' "+
        //output_file + output_extension);
        
        //execute_fail ("sed -i 's/ = \\*((\\*VERTEX__/ = ((\\*VERTEX__/' "+
        //output_file + output_extension);
        /*
        execute_fail ("sed -i 's/ = \\*((\\*PATH_LOW__/ = ((\\*PATH_LOW__/' "+
        output_file + output_extension);
        execute_fail ("sed -i 's/ = \\*((\\*SHADER__/ = ((\\*SHADER__/' "+
        output_file + output_extension);
        execute_fail ("sed -i 's/ = \\*((\\*FRAG__/ = ((\\*FRAG__/' "+
        output_file + output_extension);
        execute_fail ("sed -i 's/)((\\*FRAG__/)((FRAG__/' "+
        output_file + output_extension);
        execute_fail ("sed -i 's/\\*)(\\*FRAG__/\\*)(FRAG__/' "+
        output_file + output_extension);
        execute_fail ("sed -i 's/,((\\*FRAG__/,((FRAG__/' "+
        output_file + output_extension);
        */
        (is_library).if {
          execute_fail (cc+" " + output_file + output_extension + " -c " + option_gcc);
        } else {
          ((is_speed_push) & (debug_level > 0)).if {
            execute_fail (cc+" " + output_file + output_extension + " -S " + option_gcc + lib_gcc);
            build_label (output_file + ".s");
            execute_fail (cc+" " + input_file + "_label.s -o "+ output_file + option_gcc + lib_gcc);
          } else {
            execute_fail (cc+" " + output_file + output_extension + " -o " + output_file + option_gcc + lib_gcc);
          };
        };
      };
    } else {
      //execute_fail ("sed -i 's/ = \\*((\\*COLOR__/ = ((\\*COLOR__/' "+
      //output_file + output_extension);
      /*
      execute_fail ("sed -i 's/ = \\*((\\*VERTEX__/ = ((\\*VERTEX__/' "+
      output_file + output_extension);
      execute_fail ("sed -i 's/ = \\*((\\*PATH_LOW__/ = ((\\*PATH_LOW__/' "+
      output_file + output_extension);
      execute_fail ("sed -i 's/ = \\*((\\*SHADER__/ = ((\\*SHADER__/' "+
      output_file + output_extension);
      execute_fail ("sed -i 's/ = \\*((\\*FRAG__/ = ((\\*FRAG__/' "+
      output_file + output_extension);
      execute_fail ("sed -i 's/)((\\*FRAG__/)((FRAG__/' "+
      output_file + output_extension);
      execute_fail ("sed -i 's/\\*)(\\*FRAG__/\\*)(FRAG__/' "+
      output_file + output_extension);
      execute_fail ("sed -i 's/,((\\*FRAG__/,((FRAG__/' "+
      output_file + output_extension);
      */
      ("Written: " + output_file + output_extension + "\n").print;
      (target = "android").if {
        execute_fail (lisaac+"lia/run.sh " + output_file);
      };
    };
  );
  
  - front_end <-
  // Executed by compiler, before compilation step.
  (
    general_front_end;
  );
  
  - back_end <-
  // Executed by compiler, after compilation step.
  (
    general_back_end;
  );
  
Section Public
  
  //
  // Debug information:
  // 
    
  - no_debug <-  
  // No debug information.
  (
    debug_level := 0;
    debug_with_code := FALSE;
  );
  
  - debug level:INTEGER <-
  // Fix debug level (default: 15)
  (
    ((level < 1) | (level > 20)).if {
      "Incorrect debug level.\n".print;
      die_with_code exit_failure_code;
    };
    debug_level := level;
  );
  
  - without_source <-
  // Debug mode without source code.
  (
    debug_with_code := FALSE;
  );
  
  - all_warning <-
  // All warning (deferred detect, ...).
  (
    is_all_warning := TRUE;
  );
  
  - old_push <-
  // Use old stack saving for debug mode.
  (
    is_speed_push := FALSE;
  );
  
  //
  // Optimization:
  //

  - optim <-
  // Full Lisaac optimization.
  (
    no_debug;
    is_optimization := TRUE;
  );

  - boost <-
  // Full optimization (lisaac and gcc).
  (
    optim;    
  );
  
  - hyper_boost <-
  // Simple boost, with `-O3' option for GCC
  (
    boost;
    is_o3 := TRUE;
  );
  
  - i level:INTEGER <-
  // Inlining level [1..5000] (default: 15)
  (
    ((level < 1) | (level > 5000)).if {
      "Incorrect inlining level.\n".print;
      exit;
    };
    inline_level := level;
  );
    
  //
  // Generate code:
  //
  
  - compiler cmd:STRING <-
  // Used `cmd' as C compiler.
  (
    cc := cmd;
  );
  
  - cop <-
  // Active Concurrence Object Prototype.
  (
    is_cop := TRUE;
  );
  
  - tcc <-
  // Used TCC (Tiny C Compiler) for `back_end' operation.
  (
    (run "command -v tcc > /dev/null 2> /dev/null" != 0).if {
      "Error: Tiny C Compiler not found.\n\
      \(Debian: sudo apt-get install tcc)\n".print;
      die_with_code exit_failure_code;
    };
    is_speed_push := FALSE;
    is_tcc := TRUE;
  );
  
  - o outputfile:STRING <-  
  // Change output file (default: `input_file').
  (
    output_file := outputfile;
  );
  
  - target idf:STRING <-
  // Target for backend (unix,windows,dos)
  (
    target := idf;
  );
  
  - gcc option:STRING <-
  // Add option for GCC.
  (
    option_gcc := option_gcc + " " + option;
  );

  - partial <-
  // Only generate C code and don't compile it with GCC
  (
    execute_back_end := FALSE;
  );
  
  //
  // Other:
  //

  - add_path str:STRING <-
  // Add the `str' path in the current list of path.
  (
    path str;
  );
  
  - q <-
  // Quiet operation.
  (
    is_quiet := TRUE;
  );
  
  - build_library <-
  // For to build library (`main' => `init') 
  (
    is_library := TRUE;
  );
  
  //
  // Information:
  //
  
  - s <-
  // Statistic information.
  (
    is_statistic := TRUE;
  );
  
  - help <-
  // Help
  (
    help_command;
    die_with_code exit_success_code;
  );
  
  - version <-
  // Version
  (
    compiler_version;
    die_with_code exit_success_code;
  );
  
  - go <-
  // Search the `main' prototype in current directory
  (
    "List:\n\
    \=====\n".print;
    run "grep -l \"\\- main\" *.li";
    die_with_code exit_success_code;
  );