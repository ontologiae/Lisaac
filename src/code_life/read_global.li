///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := READ_GLOBAL;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author  := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment := "Read for global";
  
Section Inherit
  
  + parent_read:Expanded READ;
    
Section Public
  
  - is_invariant:BOOLEAN <- global.is_invariant NULL;  
  
  + global:SLOT_DATA;
  
  - variable:VARIABLE <- global;
  
  //
  // Comparison.
  //
  
  - Self:SELF '~=' Right 60 other:EXPR :BOOLEAN <- 
  ( + rd:READ_GLOBAL;
    
    rd ?= other;
    ((rd != NULL) && {global = rd.global})    
  );
    
  //
  // Creation.
  //
    
  - create p:POSITION with g:SLOT_DATA :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make p with g;
    result    
  );
  
  - make p:POSITION with g:SLOT_DATA <-
  (
    position := p;
    global   := g;
  );
  
  //
  // Execute
  //
  
  - execute_access_unlink:INSTR <- 
  (
    global.execute;
    NULL
  );

  - execute_access_link <- 
  (
    global.execute;
  );
  
  //
  // Genere
  //
  
  - genere buffer:STRING <-
  (     
    buffer.append (variable.intern_name);
  );
  











