///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Example                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := SELECT;

  - copyright := "2003-2008 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";

Section Inherit

  - parent_any:ANY := ANY;

Section Private
  
  + x0:INTEGER_32;
  + y0:INTEGER_32;
  
  + x1:INTEGER_32;
  + y1:INTEGER_32;
  
Section Public
  
  + angle:REAL_32;  
  
  - center:(INTEGER_32,INTEGER_32) <- 
  (
    (x0 + x1) / 2, (y0 + y1) / 2
  );
  
  - frame:(INTEGER_32,INTEGER_32,INTEGER_32,INTEGER_32) <- 
  ( + xmin,ymin,xmax,ymax,xr0,yr0,xr1,yr1:INTEGER_32;
    + cx,cy:INTEGER_32;
    (cx,cy) := center;
    (xr0,yr0,xr1,yr1) := frame_rotation;
    (xmax,ymax) := (xmin,ymin) := (xr0,yr0);
    xmin := xmin.min xr1;
    ymin := ymin.min yr1;
    xmax := xmax.max xr1;
    ymax := ymax.max yr1;
    xr0 := cx * 2 - xr0;
    yr0 := cy * 2 - yr0;
    xr1 := cx * 2 - xr1;
    yr1 := cy * 2 - yr1;    
    xmin := xmin.min xr0.min xr1;
    ymin := ymin.min yr0.min yr1;
    xmax := xmax.max xr0.max xr1;
    ymax := ymax.max yr0.max yr1;
    
    xmin,ymin,xmax,ymax
  );
  
  - frame_rotation:(INTEGER_32,INTEGER_32,INTEGER_32,INTEGER_32) <-
  ( + xr0,yr0,xr1,yr1:INTEGER_32;
    + cx,cy:INTEGER_32;
    (cx,cy) := center;
    xr0 := (angle.cos * (x0-cx).to_real_32 + angle.sin * (y0-cy).to_real_32).to_integer_32 + cx;
    yr0 := (angle.cos * (y0-cy).to_real_32 - angle.sin * (x0-cx).to_real_32).to_integer_32 + cy;
    //
    xr1 := (angle.cos * (x0-cx).to_real_32 + angle.sin * (y1-cy).to_real_32).to_integer_32 + cx;
    yr1 := (angle.cos * (y1-cy).to_real_32 - angle.sin * (x0-cx).to_real_32).to_integer_32 + cy;    
    //
    xr0,yr0,xr1,yr1
  );    
  
  - area:INTEGER_32 <- (x1-x0)*(y1-y0);
  
  - set_rectangle (px0,py0:INTEGER_32) to (px1,py1:INTEGER_32) <-
  (
    x0 := px0;
    y0 := py0;
    x1 := px1;
    y1 := py1;
  );  
  
  //
  // Creation.
  //

  - create (px0,py0:INTEGER_32) to (px1,py1:INTEGER_32) :SELF <-
  ( + result:SELF;
        
    result := clone;
    result.make (px0,py0) to (px1,py1) angle 0;
    result
  );

  - create (px0,py0:INTEGER_32) to (px1,py1:INTEGER_32) angle a:REAL_32 :SELF <-
  ( + result:SELF;
    result := clone;
    result.make (px0,py0) to (px1,py1) angle a;
    result
  );

  - make (px0,py0:INTEGER_32) to (px1,py1:INTEGER_32) angle a:REAL_32 <-
  ( 
    (x0,y0) := (px0,py0);
    (x1,y1) := (px1,py1);    
    angle   := a;
  );
  
  //
  // File.
  //
  
  - create_with buf:FAST_ARRAY(UINTEGER_8) at ps:INTEGER :(SELF,INTEGER) <-
  ( + r:SELF;
    
    r := clone;
    r,r.make_with buf at ps
  );    
  
  - make_with buf:FAST_ARRAY(UINTEGER_8) at ps:INTEGER :INTEGER <-
  ( + pos:INTEGER;
    // BSBS: Il faut revoir le format...
    pos := ps;
    //x_center := read_integer_32 buf at pos;
    pos := pos + 4;
    //y_center := read_integer_32 buf at pos;
    pos := pos + 4;
    //size := read_integer_32 buf at pos;
    pos := pos + 4;
    angle := 0; //read_real_32 buf at pos;
    pos := pos + 4;
    //angle_point := read_real_32 buf at pos;
    pos := pos + 4;    
    pos
  );
  
  //
  // Display.
  // 
  
  - remove <-
  ( 
    0.to 8 do { j:INTEGER;
      box.item j.set_position (-50,-50);
    };
  );
  
  - display_rectangle <-
  ( + xe0,ye0,xe1,ye1,y,xem,s:INTEGER;
    + xr0,yr0,xr1,yr1:INTEGER_32;
    
    (xr0,yr0,xr1,yr1) := frame;    
    xe0 := ecrx xr0;
    ye1 := ecry yr0;
    xe1 := ecrx xr1;
    ye0 := ecry yr1;
    s   := box.first.height;
    xem := (xe0+xe1-s)/2;
    //
    y := ye0-s;    
    box.item 0.set_position (xe0-s,y) id 0;
    box.item 1.set_position (xem,y)   id 1;
    box.item 2.set_position (xe1,y)   id 2;
    //
    y := (ye0+ye1-s)/2;
    box.item 3.set_position (xe0-s,y) id 3;
    box.item 4.set_position (xem,y)   id 4;
    box.item 5.set_position (xe1,y)   id 5;
    //
    box.item 6.set_position (xe0-s,ye1) id 6;
    box.item 7.set_position (xem,ye1)   id 7;
    box.item 8.set_position (xe1,ye1)   id 8;
  );
  
  - display_rotation <-
  ( + cx,cy:INTEGER_32;
    + xr0,yr0,xr1,yr1:INTEGER_32;
    + xe0,ye0,xe1,ye1,xe2,ye2:INTEGER;
        
    (cx,cy) := center;
    (xr0,yr0,xr1,yr1) := frame_rotation;
    //
    xe0 := ecrx xr0;
    ye0 := ecry yr0;    
    xe1 := ecrx xr1;
    ye1 := ecry yr1;
    box.item 0.set_position (xe0,ye0) id 9;
    box.item 6.set_position (xe1,ye1) id 15;
    box.item 3.set_position ((xe0+xe1)/2,(ye0+ye1)/2) id 12;
    xr1 := cx * 2 - xr1;
    yr1 := cy * 2 - yr1;
    xe2 := ecrx xr1;
    ye2 := ecry yr1;
    box.item 2.set_position (xe2,ye2) id 11;    
    box.item 1.set_position ((xe0+xe2)/2,(ye0+ye2)/2) id 10;
    xr0 := cx * 2 - xr0;
    yr0 := cy * 2 - yr0;
    xe0 := ecrx xr0;
    ye0 := ecry yr0;    
    box.item 8.set_position (xe0,ye0) id 17;
    box.item 5.set_position ((xe0+xe2)/2,(ye0+ye2)/2) id 14;
    box.item 7.set_position ((xe0+xe1)/2,(ye0+ye1)/2) id 16;
    //            
    xe0 := ecrx cx;
    ye0 := ecry cy;    
    box.item 4.set_position (xe0,ye0) id 13;
  );
  
Section Private
  
  - box:FAST_ARRAY(SELECT_BOX);
  
Section PAGE
  
  - init_select_box <-
  ( + b:SELECT_BOX;
    (box = NULL).if {
      box := FAST_ARRAY(SELECT_BOX).create_with_capacity 9;
      0.to 8 do { j:INTEGER;
        b := SELECT_BOX.create;
        box.add_last b;
      };
    };
  );