Section Header
  
  + name     := MY_SCENE1;
  
  - comment   := "first program";
  
Section Inherit
  
  + parent_scene:Expanded SCENE;
  
  - parent_test_any:TEST_ANY := TEST_ANY;
  
Section Public  
  
  - main <- 
  ( + caps:CAPABILITIES;
    
    caps := CAPABILITIES;
    // caps.use_fullscreen;
    // caps.set ...
    
    start_test Self using caps;
  );
  
Section Public
  
  + red:COLOR := RGB.create (1.0, 0.0, 0.0);
  + green:COLOR := RGB.create (0.0, 1.0, 0.0);
  + blue:COLOR := RGB.create (0.0, 0.0, 1.0);
  
  + index_buffer:INDEX_BUFFER;
  + vb:VERTEX_BUFFER;
  
  + shader:SHADER;
  + loc:INTEGER;
  
  
  - initialize:BOOLEAN <-
  (
    + v1,v2,v3:VERTEX; 
    
    OPENGL.use_arb_vertex_buffer_object.if_false {
      log.append "ARB_vertex_buffer_object extension not supported";
    };
    
    OPENGL.use_shaders.if_false {
      log.append "Cannot support GLSL Shaders with ARB extensions";
    } else {
      shader := renderer.shader.create ("data/test.vert","data/test.frag");
      shader.enable; 
      
      loc := shader.get_uniform_location "time";
    };
    
    // create index array
    index_buffer := renderer.index_buffer.create 3;
    index_buffer.new_indices {
      index_buffer.add_index 0;
      index_buffer.add_index 1;
      index_buffer.add_index 2;
    };
    
    // create vertex array
    vb := renderer.vertex_array.create 3;
    
    v1 := VERTEX.create (0.0, 2.0, 0.0);
    v2 := VERTEX.create (-1.0, 0.0, 0.0);
    v3 := VERTEX.create (1.0, 0.0, 0.0);
    
    // draw a cool triangle using vertex array
    vb.new_triangles {
      vb.add_vertex v1 color red;
      vb.add_vertex v2 color green;
      vb.add_vertex v3 color blue;
    };
    TRUE
  );
  
  + time:REAL_32;
  
  - render t:REAL_32 <-
  (      
    (shader != NULL).if {
      shader.set_uniform1f loc to time;
      time := time + 1;
    };
    
    renderer.transform.translatef (0.0, -1.0, -3.0);     
    vb.bind;
    vb.draw_using index_buffer;    
  );
  
  - release <-
  (
    (shader != NULL).if {
      shader.delete;
    };
  );
