///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := CHARACTER_CST;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Character constant";
  
Section Inherit
  
  + parent_constant:Expanded CONSTANT;
  
Section Public

  //
  // Value.
  //

  + text:STRING_CONSTANT;

  //
  // Creation.
  //

  - create p:POSITION char car:STRING_CONSTANT :SELF<-
  ( + result:SELF;
    result := clone;
    result.make p char car;
    result
  );
  
  - make p:POSITION char car:STRING_CONSTANT <-
  (
    position := p;
    text := car;
    static_type := type_character.default;
  );

  - my_copy:SELF <- SELF.create position char text;

  //
  // Comparaison.
  //
  
  - '==' Right 60 other:EXPR :BOOLEAN <-    
  ( + s:SELF;
    s ?= other;
    (s != NULL) && {text = s.text}
  );

  //
  // Generation.
  //

  - genere buffer:STRING <-
  (
    buffer.add_last '\'';
    buffer.append text;
    buffer.add_last '\'';
  );

  //
  // Display.
  //

  - display buffer:STRING <-
  (
    buffer.add_last '\'';
    buffer.append text;
    buffer.add_last '\'';
    display_ref buffer;
  );





