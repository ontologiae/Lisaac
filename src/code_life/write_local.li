Section Header

  + name    := WRITE_LOCAL;

  - copyright   := "2003-2007 Benoit Sonntag";


  - author  := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment := "Write local";

Section Inherit

  + parent_write:Expanded WRITE;

Section Public

  + local:LOCAL;

  - variable:VARIABLE <- local;

  //
  // Creation.
  //

  - create p:POSITION with val:EXPR in l:LOCAL :SELF <-
  ( + result:SELF;
    ? {p.code != 0};
    result := clone;
    result.make p with val in l;
    result
  );

  - make p:POSITION with val:EXPR in l:LOCAL <-
  (
    position := p;
    local    := l;
    value    := val;
  );

  //
  // Execute.
  //

  - execute_access_unlink:INSTR <- NULL;

  - execute_access_link;

  - execute_argument:BOOLEAN <-
  // BSBS: Cette methode foireuse ne doit plus etre necessaire (utilise execute normal)
  ( + new_val:INSTR;
    + read:READ;
    + result:BOOLEAN;

    ? { variable != NULL };
    ? { value    != NULL };

    read ?= value;
    (ensure_count = 0).if {
      //
      // Supprime affectation.
      //
      new_val := value.execute_unlink;
      (new_val = NULL).if {
	result := TRUE;
      }.elseif {list_current.old_seq_or_and = seq_or_and} then {
	list_current.insert_before new_val;
	result := TRUE;
      } else {
	value ?= new_val;
      };
    } else {
      //
      // Execution normal.
      //
      execute_access_link;
      value := value.execute_link;
    };
    result
  );

  //
  // Genere
  //

  - genere buffer:STRING <-
  ( + idf:STRING_CONSTANT;

    idf := ALIASER_LOCAL.write Self;

    (quiet_generation).if_false {
      (local.is_result).if {
        buffer.add_last '*';
        buffer.append (local.intern_name);
      } else {
        buffer.append idf;
      };
      //
      ((value.static_type.raw = TYPE_NULL) && {variable.type.raw.is_block}).if {
        buffer.append ".__id=0";
      } else {
        buffer.add_last '=';
        genere_value buffer;
      };
    };
  );
  
  - genere_first_result buffer:STRING <-
  ( + idf:STRING_CONSTANT;

    idf := ALIASER_LOCAL.write Self;
    (local.is_result).if {
      buffer.add_last '*';
    };
    buffer.append idf;
    //
    buffer.add_last '=';
  );
  
  - genere_argument_result buffer:STRING <-
  ( + idf:STRING_CONSTANT;

    idf := ALIASER_LOCAL.write Self;
    buffer.add_last '&';
    buffer.append idf;
  );





