///////////////////////////////////////////////////////////////////////////////
//                              Lisaac Example                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name         := NSIEVE;
  
  - bibliography := "http://IsaacOS.com";
  - author       := "Pierre-Alexandre Voye (ontologiae@gmail.com), Xavier Oswald <x.oswald@free.fr>";
  - comment      := "Language shootout - Recursive"; 
    
Section Inherit
  
  - parent_any:OBJECT := OBJECT;

Section Private  
  
  - string_tmp:STRING := STRING.create 64;
  
  - flags:FAST_ARRAY[BOOLEAN];
  
  - primes m:INTEGER <-
  ( + result,j,i,tmp: INTEGER;    
    
    flags.fast_resize m;      
    flags.set_all_with TRUE;    
    
    tmp := m - 1;
    i   := 2;    
    {i <= tmp}.while_do {      
      (flags.item i).if {
	j := i << 1;
	{j <= tmp}.while_do {        
	  flags.put FALSE to j;
	  j := j + i;
	};
	result := result + 1;
      };
      i := i + 1;      
    };

    "Primes up to ".print;    
    string_tmp.clear;
    m.append_in string_tmp format 8;
    string_tmp.add_last ' ';    
    result.append_in string_tmp format 8;
    string_tmp.add_last '\n';
    string_tmp.print;
  );

Section Public

  - main <-
  ( + n:INTEGER;
    + m:INTEGER;
    
    n := COMMAND_LINE.item 1.to_integer;
    m := 10_000 * (1 << n);
    flags := FAST_ARRAY[BOOLEAN].create_with_capacity m; 
    primes m;
    m := m >> 1;
    primes m;
    m := m >> 1;
    primes m;
  );
