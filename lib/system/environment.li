Section Header

  + name        := ENVIRONMENT;

  - comment     := "Execute system command and to get/set environment variables.";
  
  - external := 
`
#include <stdlib.h>
`;
  
Section Public

  - get_environment_variable variable:STRING :STRING_BUFFER <-
  // Try to get the value of the system environment `variable' or some
  // `variable' in the system registry. Gives NULL when no information
  // about the `variable' is available. Under UNIX like system, this is in
  // fact the good way to know about some system environment variable.
  // Under Windows, this function also look in the system registery.
  (
    + result:STRING_BUFFER;
    + p:NATIVE_ARRAY(CHARACTER);
    ? { variable != NULL };

    p := basic_getenv(variable.to_external);
    (p != NULL).if {
      result := STRING_BUFFER.create_from_external p;
    };
    result
  );

  - set_environment_variable (variable,value:STRING) <-
  // Try to assign the system environment `variable' with `value'.
  (
    ? { variable != NULL };
    ? { value != NULL };
    basic_putenv (variable,value);
  );

  - execute_command system_command_line:STRING :INTEGER <-
  // To execute a `system_command_line' as for example, "ls -l" on UNIX.
  // The `Result' depends of the actual operating system. As an exemple,
  // this `execute' feature is under UNIX the equivalent of a `system' call.
  (
    ? { system_command_line != NULL};
    basic_system_execute_command (system_command_line.to_external)
  );

  - execute_command_line system_command_line:STRING <-
  // The equivalent of `execute_command' without `Result'.
  (
    execute_command (system_command_line);
  );

Section Private

  - basic_getenv environment_variable:NATIVE_ARRAY(CHARACTER) :NATIVE_ARRAY(CHARACTER) <-
  // To implement `get_environment_variable'.
  (
    `getenv((char*)@environment_variable)`:NATIVE_ARRAY(CHARACTER){NATIVE_ARRAY(CHARACTER),NULL}
  );

  - basic_putenv (variable,value:STRING) <-
  // To implement `set_environment_variable'.
  (
    + v:NATIVE_ARRAY(CHARACTER);

    v := NATIVE_ARRAY(CHARACTER).calloc (variable.count + value.count + 2);
    v.copy_from (variable.to_external) until (variable.upper);
    v.put '=' to (variable.count);
    v.copy (value.to_external) to (variable.count + 1) until (value.capacity);
    v.put '\0' to (variable.count + 1 + value.count);
    `putenv((char*)@v)`;
  );

  - basic_system_execute_command system_command_line:NATIVE_ARRAY(CHARACTER) :INTEGER <-
  (
    `system(((char*)(@system_command_line)))`:(INTEGER)
  );



