///////////////////////////////////////////////////////////////////////////////
//                              Lisaac Example                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := MASTER;
  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Example the `super' call.";
  
Section Inherit  
  
  - parent_obj:OBJ := OBJ;

Section Public
  
  + name:STRING_CONSTANT := "MASTER";
  
  + method <-
  (
    "\tThis method is in MASTER.\n".print;
    "\tMy context is ".print;
    name.print;
    '\n'.print;
  );
    
  - main <-
  ( + obj:OBJ;    
    
    "\nCall method:\n".print;
    method;

    "\nCall `super' method:\n".print;
    parent_obj.method;

    "\nCall the parent method:\n".print;
    obj := parent_obj;
    obj.method;        
  );
