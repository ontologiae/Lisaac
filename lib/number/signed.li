/***************************************************************************
*                             Lisaac Library                               *
*                      (c) INRIA 2003 see 'licence.txt' for more details   *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
***************************************************************************/

section HEADER
  
  - name        :=SIGNED;
  
  - category    :=MICRO;
  
  - bibliography:="http://IsaacOS.com";
  - author      :="Sonntag Benoit (bsonntag@loria.fr)";
  - comment     :="Generic Signed Integer.";
  
section INHERIT
  
  - parent_numeric:NUMERIC := NUMERIC;
  
section PUBLIC
  
  //
  // Range
  //
  
  - minimum:LONGINT <- SELF.force_conversion (maximum + 1);
    
  //
  // Function :
  //
  
  - abs:SELF <-
  // Absolute value of `self'.
  ( + result:SELF;
    
    (self < 0).if {
      result := -self;
    } else {
      result := self;
    };
    result
  );
  
  //
  // Convertion
  //
  
  - append_in buffer:STRING <-
  // Append in the `buffer' the equivalent of `to_string'. No new STRING
  // creation during the process.
  ( + val:SELF;
    + i,j:INTEGER;
    ? {buffer!=NULL};
    
    (self == 0).if {
      buffer.extend '0';
    } else {
      (self > 0).if {
	val := self;
      } else {
	val := -self;
	buffer.extend '-';
      };
      
      i := buffer.upper+1;
      
      {val == 0}.until_do {
	buffer.extend ((val % 10).digit);
	val := val / 10;
      };
      
      j := buffer.upper;
      {i >= j}.until_do {
	buffer.swap i with j;
	j := j - 1;
	i := i + 1;
      };
    };
  );
  
  - to_octal:SELF <-
  // Gives coresponding octal value.
  ( + result, unit, current:SELF;
    
    (self < 0).if {
      result := -((-self).to_octal);
    } else {
      current := self;
      unit := 1;
      {current!=0}.while_do {
	result := result + ((current & 7)*unit);
	unit := (unit << 3) + (unit << 1);
	current := current >> 3;
      };
    };
    result
  );
  
  //
  // Hashing:
  //
  
  - hash_code:INTEGER <-
  ( + result:INTEGER;
    
    (self < 0).if {
      result := ~self;
    } else {
      result := self;
    };
    
    ? {result>=0};
    result
  );
