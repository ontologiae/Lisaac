///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := LIP_BINARY;

  - copyright := "2003-2008 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";
  - comment   := "The main prototype";

Section Inherit

  + parent_lip_code:Expanded LIP_CODE;

Section Public
  
  + left:LIP_CODE;
  
  + right:LIP_CODE;
  
  + operator:CHARACTER;
  
  //
  // Creation.
  //

  - create p:POSITION with l:LIP_CODE operator op:CHARACTER and r:LIP_CODE :SELF <-
  ( + result:SELF;
    result := clone;
    result.make p with l operator op and r;
    result
  );

  - make p:POSITION  with l:LIP_CODE operator op:CHARACTER and r:LIP_CODE<-
  ( 
    position := p;
    left := l;
    right := r;
    operator := op;
  );
  
  //
  // Run.
  //
  
  - run_expr:LIP_CONSTANT <-
  ( + result:LIP_CONSTANT;
    + lv,rv:LIP_CONSTANT;
    
    lv := left.run_expr;
    rv := right.run_expr;    
    (operator)
    .when '|' then { result := lv |   rv; }
    .when '&' then { result := lv &   rv; }
    .when '=' then { result := lv ~=  rv; }
    .when 'E' then { result := lv !~= rv; }
    .when '>' then { result := lv >   rv; }
    .when '<' then { result := lv <   rv; }
    .when 'S' then { result := lv >=  rv; }
    .when 'I' then { result := lv <=  rv; }
    .when '+' then { result := lv +   rv; }
    .when '-' then { result := lv -   rv; };
    (result = NULL).if {
      operator.print; '\n'.print;
      lv.print; '\n'.print;
      rv.print; '\n'.print;
      semantic_error (position,"Incorrect type operator.");      
    };
    result    
  );
