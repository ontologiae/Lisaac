Section Header

  + name        := TT_GLYPH;
  - comment     :="Glyph Datas.";

  - bibliography:="http://IsaacOS.com";
  - author      :="Boutet Jerome (boutet@loria.fr)";

Section Inherit

  - parent_object:OBJECT := OBJECT;

Section Public

  + header:TT_GLYPH_HEADER;

  + end_pts_of_contours:FAST_ARRAY(UINTEGER_16);

  + instruction:FAST_ARRAY(UINTEGER_8);

  + n_points:UINTEGER_16; 

  + flags:FAST_ARRAY(UINTEGER_8);

  + x_coord:FAST_ARRAY(INTEGER_16);

  + y_coord:FAST_ARRAY(INTEGER_16);
  
  - x_min:INTEGER_16 <- header.xmin;
  - x_max:INTEGER_16 <- header.xmax;
  - y_min:INTEGER_16 <- header.ymin;
  - y_max:INTEGER_16 <- header.ymax;
  
  - create file:FILE :SELF <-
  ( + result:SELF;
    ? { file != NULL };
    result := clone;
    result.make file;
    result
  );

  - make file:FILE <-
  ( + cursor:UINTEGER_32;    
    + inst_length:UINTEGER_16;
    + n_flag,j:INTEGER;
    + f,n:UINTEGER_8;
    + x:INTEGER_16;
    
    header := TT_GLYPH_HEADER.clone;
    file.read header;
    header.to_big_endian;
          
    (header.number_of_contours > 0).if {
      end_pts_of_contours := FAST_ARRAY(UINTEGER_16).create_with_capacity (header.number_of_contours);
      file.read end_pts_of_contours size (header.number_of_contours);
      to_big_endian end_pts_of_contours;
      
      inst_length := PROCESSOR.to_motorola_ushort (file.read_uinteger_16);

      instruction := FAST_ARRAY(UINTEGER_8).create_with_capacity inst_length;
      file.read instruction size inst_length;      
      
      cursor := file.cursor;
      n_flag := end_pts_of_contours.last + 1;
      flags := FAST_ARRAY(UINTEGER_8).create_with_capacity n_flag;
      j := 0;
      { j < n_flag}.while_do {
        file.read flags size 1;
        f := flags.last;
        (is_rep f).if {          
          file.read flags size 1;
          n := flags.last;
          flags.remove_last;
          n.times {
            flags.add_last f; 
            j := j + 1;
          };
        };
        j := j + 1;
      };          
      
      x_coord := FAST_ARRAY(INTEGER_16).create_with_capacity n_flag;
      y_coord := FAST_ARRAY(INTEGER_16).create_with_capacity n_flag;
      
      x := 0;
      0.to (flags.upper) do { i:INTEGER;
        f := flags.item i;
        (is_x_prev f).if_false {
          (is_x_8 f).if {
            (is_x_neg f).if { 
              x := x - file.read_uinteger_8; 
            } else {
              x := x + file.read_uinteger_8; 
            };
          } else {
            x := x + PROCESSOR.to_motorola_short (file.read_integer_16);
          };          
        };
        x_coord.add_last x;
      };
      
      x := 0;
      0.to (flags.upper) do { i:INTEGER;
        f := flags.item i;
        (is_y_prev f).if_false {
          (is_y_8 f).if {
            (is_y_neg f).if { 
              x := x - file.read_uinteger_8; 
            } else {
              x := x + file.read_uinteger_8; 
            };
          } else {
            x := x + PROCESSOR.to_motorola_short (file.read_integer_16);
          };          
        };
        y_coord.add_last x;
      };            
    } else {
      // Composite Glyph      
    };    
  );
  
  - to_big_endian buf:FAST_ARRAY(UINTEGER_16) <-
  (
    0.to (buf.upper) do { i:INTEGER;
      buf.put (PROCESSOR.to_motorola_ushort (buf.item i)) to i;
    };
  );

  - print <-
  (
    header.print;   
    (header.number_of_contours > 0).if {
      "\n     End pts of contours:".print;
      0.to (header.number_of_contours - 1) do { i:INTEGER;
        end_pts_of_contours.item i.print;
        ", ".print;
      };
      
      "\n     Instruction_length:".print;
      (instruction = NULL).if {
        '0'.print;
      } else {
        instruction.count.print;
        (instruction.count < 64).if {
          "\n     Instructions:".print;
          0.to (instruction.upper) do { i:INTEGER;
            "0x".print;
            instruction.item i.to_hexadecimal_format 2.print;
            ' '.print;
          };
        };
      };
      
      "\n     Flags:\n".print;
      print_flags;
          
      "\n     Coordinates:\n".print;
      "       ".print;
      0.to (x_coord.upper) do { i:INTEGER;      
        (is_curv (flags.item i)).if {
          '('.print;
        } else {
          '['.print;
        };
        x_coord.item i.print_format 6;
        ','.print;
        y_coord.item i.print_format 6;
        (is_curv (flags.item i)).if {
          "),".print;
        } else {
          "],".print;
        };
        ((i+1) % 8 = 0).if {
          "\n       ".print;
        };
      };    
      
//      IO.read_character;
    } else {
      " Compound glyph (not yet implemented)".print;      
    };

  );
  
  - is_curv f:UINTEGER_8 :BOOLEAN <- (f & 01h) != 0;

  - is_x_8  f:UINTEGER_8 :BOOLEAN <- (f & 02h) != 0;
  - is_x_16 f:UINTEGER_8 :BOOLEAN <- (f & 02h)  = 0;
  - is_y_8  f:UINTEGER_8 :BOOLEAN <- (f & 04h) != 0;
  - is_y_16 f:UINTEGER_8 :BOOLEAN <- (f & 04h)  = 0;
  
  - is_rep  f:UINTEGER_8 :BOOLEAN <- (f & 08h) != 0;
  
  - is_x_neg  f:UINTEGER_8 :BOOLEAN <- is_x_8  f && { (f & 10h)  = 0 };
  - is_x_prev f:UINTEGER_8 :BOOLEAN <- is_x_16 f && { (f & 10h) != 0 };
  - is_y_neg  f:UINTEGER_8 :BOOLEAN <- is_y_8  f && { (f & 20h)  = 0 };
  - is_y_prev f:UINTEGER_8 :BOOLEAN <- is_y_16 f && { (f & 20h) != 0 };
  
  - print_flags <-
  ( + f:UINTEGER_8;    
    "       ".print;
    (flags.lower).to (flags.upper) do { i:INTEGER;
      (i+1).print_format 3; '='.print; 
      
      f := flags.item i;
      f.to_hexadecimal_format 2.print; ": ".print;
      
      is_rep f.if { "( ".print; } else { "  ".print; };
      is_curv f.if { "In , ".print; } else { "Out, ".print; };      
      
      is_x_neg f.if { '-'.print; } else { '+'.print; };
      is_x_prev f.if { 'x'.print; } else { 'X'.print; };
      is_x_8 f.if { "8 , ".print; } else { "16, ".print; };
      
      is_y_neg f.if { "-".print; } else { "+".print; };
      is_y_prev f.if { 'y'.print; } else { 'Y'.print; };
      is_y_8 f.if { "8 , ".print; } else { "16, ".print; };
      is_rep f.if { ')'.print; };
      ((f & 0C0h) != 0).if { " ==>BUG!!".print; };
      "\n       ".print;      
    };
  );



