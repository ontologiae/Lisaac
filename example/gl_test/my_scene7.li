Section Header
  
  + name     := MY_SCENE7;
  
  - comment   := "first program";
  
Section Inherit
  
  + parent_scene:Expanded SCENE;
  
  - parent_test_any:TEST_ANY := TEST_ANY;
  
Section Public  
  
  - main <-
  (
    start_test Self using CAPABILITIES;
  );
  
Section Public
  
  //
  //  texture mapping
  //
  
  + camera:CAMERA;
  
  + cube:VERTEX_BUFFER := GL_VERTEX_BUFFER;
  + tex:TEXTURE;
  
  + light:LIGHT;
  + material:MATERIAL;
  
  + xrot:REAL_32;
  + yrot:REAL_32;
  + zrot:REAL_32;
  
  + fog:FOG;
  
  
  - initialize:BOOLEAN <-
  (
    + ambient,diffuse,specular,emission:COLOR;
    
    ambient := RGB.create (0.0, 0.0, 0.0); // lumiere blanche
    diffuse := RGB.create (1.0, 0.0, 1.0);
    specular := RGB.create (1.0, 1.0, 1.0);
    
    light := renderer.light.create (ambient,diffuse,specular) at (VECTOR3(REAL_32).create (0,1,1.5));
    light.enable;
    
    ambient := RGB.create (0.7, 0.7, 0.7); 
    diffuse := RGB.create (0.1, 0.5, 0.9);
    specular := RGB.create (0.0, 1.0, 1.0);
    emission := RGB.create (0.1, 0, 0);
    
    material := renderer.material.create (ambient,diffuse,specular,emission,100);
    tex := renderer.texture2d.create_from (IMAGE.create "data/texture.bmp");
    
    renderer.color_buffer.set_clear_value (0.5, 0.5, 0.5, 1.0); // fog color
    
    fog := renderer.fog.create (RGB.create (0.5, 0.5, 0.5), 1.0, 1.0, 5.0);
    renderer.set_fog fog;
    fog.enable;
    
    renderer.blending.apply (renderer.blending.src_color,renderer.blending.one_minus_src_color);
    
    camera := CAMERA.create;
    
    camera.position.make (0,5,-1);
    camera.view.make (0,-5,1);
    camera.view.normalize;
    TRUE
  );  
  
  
  - render t:REAL_32 <-
  (  
    renderer.font.print_zone {
      out.print "Texture Mapping" at (100,50);
    };
    
    light.enable;
    renderer.depth_buffer.enable;
    
    camera.look;
    
    renderer.transform.new_matrix {
      draw_cube;
    };
  );
  
  - draw_cube <-
  (
    tex.bind;
    material.apply_front;
    
    renderer.transform.rotatef (xrot, 1.0, 0.0, 0.0);
    renderer.transform.rotatef (yrot, 0.0, 1.0, 0.0);
    renderer.transform.rotatef (zrot, 0.0, 0.0, 1.0); 
    
    cube.new_quads {
      // front face
      cube.add_texel2f (0.0, 0.0); cube.add_vertex3f (-1.0, -1.0, 1.0);
      cube.add_texel2f (1.0, 0.0); cube.add_vertex3f (1.0, -1.0, 1.0);
      cube.add_texel2f (1.0, 1.0); cube.add_vertex3f (1.0, 1.0, 1.0);
      cube.add_texel2f (0.0, 1.0); cube.add_vertex3f (-1.0, 1.0, 1.0);
      
      // back face
      cube.add_texel2f (1.0, 0.0); cube.add_vertex3f (-1.0, -1.0, -1.0);
      cube.add_texel2f (1.0, 1.0); cube.add_vertex3f (-1.0, 1.0, -1.0);
      cube.add_texel2f (0.0, 1.0); cube.add_vertex3f (1.0, 1.0, -1.0);
      cube.add_texel2f (0.0, 0.0); cube.add_vertex3f (1.0, -1.0, -1.0);
      
      // top face
      cube.add_texel2f (0.0, 1.0); cube.add_vertex3f (-1.0, 1.0, -1.0);
      cube.add_texel2f (0.0, 0.0); cube.add_vertex3f (-1.0, 1.0, 1.0);
      cube.add_texel2f (1.0, 0.0); cube.add_vertex3f (1.0, 1.0, 1.0);
      cube.add_texel2f (1.0, 1.0); cube.add_vertex3f (1.0, 1.0, -1.0);
      
      // bottom face
      cube.add_texel2f (1.0, 1.0); cube.add_vertex3f (-1.0, -1.0, -1.0);
      cube.add_texel2f (0.0, 1.0); cube.add_vertex3f (1.0, -1.0, -1.0);
      cube.add_texel2f (0.0, 0.0); cube.add_vertex3f (1.0, -1.0, 1.0);
      cube.add_texel2f (1.0, 0.0); cube.add_vertex3f (-1.0, -1.0, 1.0);
      
      // right face
      cube.add_texel2f (1.0, 0.0); cube.add_vertex3f (1.0, -1.0, -1.0);
      cube.add_texel2f (1.0, 1.0); cube.add_vertex3f (1.0, 1.0, -1.0);
      cube.add_texel2f (0.0, 1.0); cube.add_vertex3f (1.0, 1.0, 1.0);
      cube.add_texel2f (0.0, 0.0); cube.add_vertex3f (1.0, -1.0, 1.0);
      
      // left face
      cube.add_texel2f (0.0, 0.0); cube.add_vertex3f (-1.0, -1.0, -1.0);
      cube.add_texel2f (1.0, 0.0); cube.add_vertex3f (-1.0, -1.0, 1.0);
      cube.add_texel2f (1.0, 1.0); cube.add_vertex3f (-1.0, 1.0, 1.0);
      cube.add_texel2f (0.0, 1.0); cube.add_vertex3f (-1.0, 1.0, -1.0);
    };
    
    xrot := xrot + 0.3;
    yrot := yrot + 0.2;
    zrot := zrot + 0.4;
  );
