///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := LIP_IF;

  - copyright := "2003-2008 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";
  - comment   := "The main prototype";

Section Inherit

  + parent_lip_code:Expanded LIP_CODE;

Section Public
  
  + condition:LIP_CODE;
  
  + then:FAST_ARRAY(LIP_CODE);
  
  + else:FAST_ARRAY(LIP_CODE);
  
  //
  // Creation.
  //

  - create p:POSITION if rec:LIP_CODE then the:FAST_ARRAY(LIP_CODE) 
  else els:FAST_ARRAY(LIP_CODE) :SELF <-
  ( + result:SELF;
    result := clone;
    result.make p if rec then the else els;
    result
  );

  - make p:POSITION if rec:LIP_CODE then the:FAST_ARRAY(LIP_CODE) 
  else els:FAST_ARRAY(LIP_CODE) <-
  ( 
    position := p;
    condition := rec;
    then := the;
    else := els;
    (then.last != NULL).if {
      warning_error (then.last.position,"Unreachable expression.");
    };
    ((else != NULL) && {else.last != NULL}).if {
      warning_error (else.last.position,"Unreachable expression.");
    };
  );
  
  //
  // Run.
  //
  
  - run <-
  ( + val:LIP_BOOLEAN;
    
    val ?= condition.run_expr;
    (val = NULL).if {
      semantic_error (position,"BOOLEAN needed.");
    };
    (val.value).if {
      (then.lower).to (then.upper-1) do { i:INTEGER;
        then.item i.run;
      };      
    }.elseif {else != NULL} then {
      (else.lower).to (else.upper-1) do { i:INTEGER;
        else.item i.run;
      };
    };
    val.free;
  );
