///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := WRITE_GLOBAL;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author  := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment := "Write global";
  
Section Inherit

  + parent_write:Expanded WRITE;
    
Section Public
  
  + global:SLOT_DATA;
  
  - variable:VARIABLE <- global;
  
  //
  // Creation.
  //
  
  - create p:POSITION with val:EXPR in g:SLOT_DATA :SELF <-
  ( + result:SELF;
    ? {p.code != 0};
    result := clone;
    result.make p with val in g;
    result
  );
  
  - make p:POSITION with val:EXPR in g:SLOT_DATA <-
  (     
    position := p;
    value    := val;
    global   := g;
  );
      
  //
  // Execute.
  //

  - execute_access_unlink:INSTR <- 
  (
    global.execute;
    NULL
  );

  - execute_access_link <- 
  (    
    global.execute;
  );

  //
  // Genere
  //
  
  - genere buffer:STRING <-
  ( 
    TYPE.add_genere_global global;
    (quiet_generation).if_false {
      buffer.append (global.intern_name);
      //
      ((value.static_type.raw = TYPE_NULL) && {variable.type.raw.is_block}).if {
        buffer.append ".__id=0";
      } else {
        buffer.add_last '=';    
        genere_value buffer;
      };
    };
  );
  



