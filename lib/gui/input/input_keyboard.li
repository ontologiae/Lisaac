/***************************************************************************
*                      Isaac Object Operating System                       *
*                             Isaac                                        *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
***************************************************************************/
section HEADER

  - name    := INPUT_KEYBOARD;
  
  - category:= MICRO;
  
  - bibliography:="http://IsaacOS.com";
  - author      :="Sonntag Benoit (bsonntag@loria.fr)";
  - comment     :="X11 - Keyboard Driver";

  - version :="1.0";  
  - date    :="2003/04";
  
section INHERIT

  * parent_input:INPUT;

section PRIVATE
  
  + buffer_event:MAP_FIXED_ARRAY[EVENT_KEYBOARD]; 
  - p_beg:USMALLINT;  // Pointer on the buffer (beginning)
  - p_end:USMALLINT;  // Pointer on the buffer (end)
    
  + bin_code:FIXED_ARRAY[USMALLINT]; // Binary array of keys (102+7)/8

  + cmd:USMALLINT;    // 0:CTRL 1:AltGr 2:Alt 3:Cmd 4:Shift 5:Cap 6:NumLock 7:Scrolllock

  + ascii_code:USMALLINT; // For <Alt>+<NbAscII>
      
section STARTUP
  
  //
  // Get Character (Interrupt #21)
  //
  
  - key key:USMALLINT press p:BOOLEAN <-
  ( + cu,tmp:USMALLINT;
    
    p.if {
      cu := keydown key;
    } else {
      cu := keyup key;
    };
    (cu != 0).if {
      // Routine Pour Reboot Violant : CTRL+(ALT | ALT Gr)+Suppr
      ((cu = 'S'.to_usmallint) && { ((cmd&0Fh) = 0Dh) || {(cmd&0Fh) = 0Bh} }).if {
	"Reboot ...\n".print;
	die_with_code exit_failure_code;
      };
      
      tmp:=(p_end+1)&003h;
      buffer_event.item p_end.make ((cmd.to_ushortint<<8)|cu);
      (((tmp+2)&3)!=p_beg).if {
	p_end:=tmp;
      };      
      get_event;
    };
  );
   
section PRIVATE
  
  - keyup cu:USMALLINT :USMALLINT <-
  ( 
    deferred;
    0
  );

  - keydown cu:USMALLINT :USMALLINT <-
  ( 
    deferred;
    0
  );
    
section PUBLIC   
  
  - make <-
  // Install keyboard.
  (
    is_actif := TRUE;
    bin_code := FIXED_ARRAY[USMALLINT].create 13;
    
    buffer_event := MAP_FIXED_ARRAY[EVENT_KEYBOARD].create 4;
    0.to 3 do { j:INTEGER;
      buffer_event.item j.set_prev (buffer_event.item ((j-1)&3));
    };
    cmd := 40h;
  );
    
  - get_event <-
  ( + p:INTEGER;
    p := p_beg;
    { p != p_end }.while_do {
      (list_client.lower).to (list_client.upper) do { j:INTEGER;
	list_client.item j.receive (buffer_event.item p);
      };
      p := (p + 1) & 03h;
    };    
  );
  
  - get_key:USHORTINT <-
  // Use without interface running: text mode
  ( + result:USHORTINT;
    {p_beg = p_end}.while_do {};
    result := buffer_event.item p_beg.key;
    p_beg := (p_beg + 1) & 03h;
    result
  );
  
  //
  // Guru section.
  //

  - acknowledge <-
  (
    p_beg := (p_beg+1) & 03h;
  );
  
  //
  // Key code generate.
  //
  
  // 0:CTRL 1:AltGr 2:Alt 3:Cmd 4:Shift 5:Cap 6:NumLock 7:Scrolllock

  - key_ctrl  :USHORTINT := 0100h;
  - key_alt_gr:USHORTINT := 0200h;
  - key_alt   :USHORTINT := 0400h;
  - key_of c:CHARACTER :USHORTINT <- c.to_usmallint;
  
  - key_to_string k:USHORTINT :STRING <-
  ( + result:STRING;
    
    result := STRING.create 10;
    ((k & key_ctrl) != 0).if {
      result.append "Ctrl+";
    };
    ((k & key_alt_gr) != 0).if {
      result.append "AltGr+";
    };
    ((k & key_alt) != 0).if {
      result.append "Alt+";
    };
    result.add_last ((k & 0FFh).to_character);
    result
  );
