///////////////////////////////////////////////////////////////////////////////
//                              Lisaac Example                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header

	+ name := NBODY;

	- comment := "Main prototype for the N-Body shootout benchmark. Based on the C version.";

	- author := "Anthony Pajot <anthony.pajot@etu.enseeiht.fr>";
	
Section Inherit

	- parent_object : OBJECT := OBJECT;
	
Section Private

	- nbodies : INTEGER := 5;
	
	+ bodies : Expanded FAST_ARRAY[PLANET];
	
	- advance dt_ : REAL_64 <-
	(
		0.to (nbodies - 1) do { i : INTEGER;
			+ b : PLANET;
			
			b := bodies.item i;
			
			(i + 1).to (nbodies - 1) do { j : INTEGER;
				+ b2 : PLANET;
				+ dx, dy, dz : REAL_64;
				+ distance, mag : REAL_64;
			
				b2 := bodies.item j;
				
				dx := b.x - b2.x;
				dy := b.y - b2.y;
				dz := b.z - b2.z;
				
				distance := (dx * dx + dy * dy + dz * dz).sqrt;
				
				mag	:= dt_ / (distance * distance * distance);
				
				b.offset_speed_by (-dx * b2.mass * mag, -dy * b2.mass * mag, -dz * b2.mass * mag);
				
				b2.offset_speed_by (dx * b.mass * mag, dy * b.mass * mag, dz * b.mass * mag);
			};
		};
		
		0.to (nbodies - 1) do { i : INTEGER;
			+ b : PLANET;
			b := bodies.item i;
			b.offset_body_by (dt_ * b.vx, dt_ * b.vy, dt_ * b.vz);
		};
	
	);

	- energy : REAL_64 <-
	( + e : REAL_64;
	
		e := 0.0;
		
		0.to (nbodies - 1) do { i : INTEGER;
			+ b : PLANET;
			b := bodies.item i;
			e := e + 0.5 * b.mass * (b.vx * b.vx + b.vy * b.vy + b.vz * b.vz);
			
			(i + 1).to (nbodies - 1) do { j : INTEGER;
				+ b2 : PLANET;
				+ dx, dy, dz : REAL_64;
				+ distance : REAL_64;
			
				b2 := bodies.item j;
				
				dx := b.x - b2.x;
				dy := b.y - b2.y;
				dz := b.z - b2.z;
				
				distance := (dx * dx + dy * dy + dz * dz).sqrt;
				
				e := e - (b.mass * b2.mass) / distance;
			};
		};
		
		e		
	);
	
	- offset_momentum <-
	( + px, py, pz : REAL_64;
	
		px := 0.0;
		py := 0.0;
		pz := 0.0;
	
		0.to (nbodies - 1) do { i : INTEGER;			
			//I try to stick to the C code as much as possible.
			px := px + bodies.item i.vx * bodies.item i.mass;
			py := py + bodies.item i.vy * bodies.item i.mass;
			pz := pz + bodies.item i.vz * bodies.item i.mass;
		};
		
		bodies.item 0.set_speed_to (- px / PLANET.solar_mass,- py / PLANET.solar_mass,- pz / PLANET.solar_mass);	
	
	);
Section Public

	- main <-
	(
		+ n : INTEGER;		
		
		n := COMMAND_LINE.item 1.to_integer;
		
		bodies.with_capacity nbodies;
		
		bodies.add_last (PLANET.sun);
		bodies.add_last (PLANET.jupiter);
		bodies.add_last (PLANET.saturn);
		bodies.add_last (PLANET.uranus);
		bodies.add_last (PLANET.neptune);
		
		offset_momentum;
		
		//*** how to print with 10 decimals ? 
		energy.print;
		"\n".print;
		
		1.to n do { i : INTEGER;
			advance 0.01;
		};
		
		//*** how to print with 10 decimals ? 
		energy.print;
		"\n".print;	
	);
	
