Section Header

  + name     := VECTOR2(E);

  - comment  := "(x,y) vector";

Section Inherit

  - parent_object:OBJECT := OBJECT;

Section Public

  + x:E;
  + y:E;

  - create (a,b:E) :SELF <-
  ( + result:SELF;
    result := SELF.clone;
    result.make (a,b);
    result
  );

  - make (a,b:E) <-
  (
    x := a;
    y := b;
  );

  - copy :SELF <-
  (
    create (x,y)
  );

  - zero:SELF <- create (E.zero,E.zero);

  - set_x v:E <-
  (
    x := v;
  );
  - set_y v:E <-
  (
    y := v;
  );

  - get :(E,E) <-
  (
    x, y
  );

  - getv:FAST_ARRAY(E) <-
  (
    + result:FAST_ARRAY(E);

    result := FAST_ARRAY(E).create 2;
    result.put x to 0;
    result.put y to 1;
    result
  );

  - Self:SELF '-' :SELF <-
  (
    create (-x, -y)
  );

  - Self:SELF '+' Left 80 other:SELF :SELF <-
  (
    create (x + other.x, y + other.y)
  );

  - Self:SELF '-' Left 80 other:SELF :SELF <-
  (
    create (x - other.x, y - other.y)
  );

  - Self:SELF '*' Left 100 scalar:E :SELF <-
  (
    create (scalar * x, scalar * y)
  );

  - Self:SELF '/' Left 100 scalar:E :SELF <-
  (
    ? {scalar != 0};
    create (x / scalar, y / scalar)
  );

  - magnitude:E <-
  // magnitude = sqrt(x^2 + y^2)
  (
    (x*x + y*y).sqrt
  );

  - normalize <-
  // normalize self vector (of length 1)
  ( + m:E;

    m := magnitude;
    make (x/m, y/m);
  );

  - normalized :SELF <-
  // return a normalized vector (of length 1) from self
  (
    Self / magnitude
  );

  - dot other:SELF :E <-
  (
    x*other.x + y*other.y
  );

  - print <-
  (
    "(".print; x.print;", ".print; y.print; ")".print;
  );