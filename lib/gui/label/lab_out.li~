/***************************************************************************
*                      Isaac Object Operating System                       *
*                             Isaac Library                                *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
****************************************************************************/
section HEADER
  
  + name        := LAB_OUT;
  
  - comment     := "Label box-text.";
  
  - category    := MICRO;
  
  - bibliography:= "http://IsaacOS.com";
  
  - author      := "Benoit Sonntag (bsonntag@loria.fr)";
  
section INHERIT
  
  * parent_g_label:GUI_LABEL;
  
section PUBLIC
  
  + justify:USMALLINT;
  
  - left  :USMALLINT := 0;
  - right :USMALLINT := 1;
  - center:USMALLINT := 2;
  
  //
  // Creation.
  //
  
  - create st:ABSTRACT_STRING size w,h:INTEGER justify j:USMALLINT :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make st size w,h justify j;
    result
  );

  - create st:ABSTRACT_STRING size w,h:INTEGER :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make st size w,h justify left;
    result
  );
  
  - create st:ABSTRACT_STRING justify j:USMALLINT :SELF <-
  ( + w,h,e,b,s:INTEGER;
    b := st.lower;
    {
      e := st.index_of '\n' since b;
      s := BITMAP.font_width st at b to (e-1);
      (s > w).if {
	w := s;
      };
      h := h + 16;
      b := e + 1;
    }.do_until {e > st.count};
    create st size (w+1),(h+1) justify j
  );
  
  - create st:ABSTRACT_STRING :SELF <-
  (
    create st justify left
  );
  
  - make st:ABSTRACT_STRING size w,h:INTEGER justify j:USMALLINT <-
  (
    name := st;
    justify := j;
    my_width_min := w;
    my_height_min := h;
  );
    
section G_LABEL
  
  + my_width_min :INTEGER;
  
  + my_height_min:INTEGER;
  
  - my_display_in bmp:GUI_ITEM to x,y:INTEGER <- 
  ( + old_x0,old_x1,old_y0,old_y1:INTEGER;
    + b,e,s,px,py:INTEGER;
    // Save old clipping.
    old_x0 := bmp.clip_x0; old_x1 := bmp.clip_x1;
    old_y0 := bmp.clip_y0; old_y1 := bmp.clip_y1;
    bmp.clipping (x.max old_x0),(y.max old_y0) to 
    ((x + my_width_min).min old_x1),((y + my_height_min).min old_y1);
    px := x+1;
    py := y;
    b := name.lower;
    {
      e := name.index_of '\n' since b;
      (justify != left).if {
	s := BITMAP.font_width name at b to (e-1);
	(justify = right).if {
	  // Right
	  px := x + width_min - s;
	} else {
	  // Center
	  px := x + 1 + (width_min - s) >> 1;
	};
      };
      bmp.print name at b to (e-1) to px,py; 
      py := py + 16;
      b := e + 1;
    }.do_until {e > name.count};
    bmp.clipping old_x0,old_y0 to old_x1,old_y1;
  );

