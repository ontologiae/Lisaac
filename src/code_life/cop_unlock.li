///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := COP_UNLOCK;

  - copyright := "2003-2007 Benoit Sonntag";

  - author  := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment := "COP in for data or function.";
  
Section Inherit
  
  + parent_instr:Expanded INSTR;
  
Section Public
    
  //
  // Creation.
  //
  
  - create p:POSITION :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make p;
    result
  );
  
  - make p:POSITION <-
  (
    position := p;    
  );
  
  - my_copy:SELF <- 
  ( 
    create position
  );
  
  - remove <-
  (
    // Nothing.
  );
  
  //
  // Execute.
  //
  
  - execute:INSTR <-
  (
    Self
  );
  
  //
  // Generation.
  //
  
  - genere buffer:STRING <-
  (
    buffer.append "pthread_mutex_lock(&(obj->mutex));\n"; 
    buffer.append indent;
    buffer.append "n = obj->first->next;\n";
    buffer.append indent;
    buffer.append "if (n != NULL) {\n";
    buffer.append indent;
    buffer.append "  pthread_mutex_unlock(&n->mutex);\n";
    buffer.append indent;
    buffer.append "} else {\n";
    buffer.append indent;
    buffer.append "  obj->last = NULL;\n";
    buffer.append indent;
    buffer.append "};\n";
    buffer.append indent;
    buffer.append "obj->first = n;\n";
    buffer.append indent;
    buffer.append "pthread_mutex_unlock(&obj->mutex);\n";     
    buffer.append indent;
    buffer.append "pthread_setspecific(current_thread,thread_save);\n";    
    indent.remove_last 2;
    buffer.append indent;
    buffer.add_last '}';
  );
  
  //
  // Display.
  //
  
  - display buffer:STRING <-
  (
    buffer.append "COP_UNLOCK()";
  );
  
