///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ITM_TYPE_GENERIC_ELT;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Virtual element for generic style type";
  
Section Inherit
  
  + parent_itm_type:Expanded ITM_TYPE_MONO;
  
Section Private
  
  - list:FAST_ARRAY[ITM_TYPE_GENERIC_ELT] := FAST_ARRAY[ITM_TYPE_GENERIC_ELT].create_with_capacity 4;
  
  - create idx:INTEGER :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make idx;
    result
  );
  
  - make idx:INTEGER <-
  (
    index := idx;
  );

Section Public
  
  + index:INTEGER;
  
  - hash_code:INTEGER <- index;
     
  - get idx:INTEGER :ITM_TYPE_GENERIC_ELT <-
  (     
    {idx > list.upper}.while_do {
      list.add_last (create idx);
    };
    list.item idx
  );
  
  - display buffer:STRING <-
  (
    buffer.append "Generic[";
    index.append_in buffer;
    buffer.add_last ']';
  );
  
  - string_tmp:STRING := STRING.create 100;
  
  - to_run:TYPE_FULL <-
  ( + type_generic:TYPE_GENERIC;
    
    type_generic ?= ITM_TYPE_SELF.self_up;        
    type_generic.generic_list.item index
  );
