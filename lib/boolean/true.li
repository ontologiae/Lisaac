Section Header

  + name    := Expanded TRUE;

  - comment := "TRUE object";

  - type    := `char`;
  - default := TRUE;

Section Inherit

  - inherit_boolean:BOOLEAN := BOOLEAN;

Section Public

  //
  // Conditional :
  //

  - if_true block:{} :BOOLEAN <- if block;
 
  - if_false block:{} :BOOLEAN <- TRUE;

  - if true_block:{} else false_block:{} <-
  (
    true_block.value;
  );

  - if_true true_block:{} else false_block:{} <-
  (
    true_block.value;
  );

  - if true_block:{} :BOOLEAN <-
  (
    true_block.value;
    TRUE
  );

  - elseif cond:{BOOLEAN} then block:{} :BOOLEAN <- TRUE;

  - elseif cond:{BOOLEAN} then block:{} else block_else:{};
  
  - ok true_value:E or false_value:E :E <- true_value;
  
  //
  // Binary operator :
  //

  - Self:SELF '||'  Left 10  other:{BOOLEAN}   :BOOLEAN <- TRUE;   // or else

  - Self:SELF '&&'  Left 20  other:{BOOLEAN}   :BOOLEAN <- other.value;  // and then
    
  - Self:SELF '|'   Left 10  other:BOOLEAN :BOOLEAN <- TRUE;  // or

  - Self:SELF '&'   Left 20  other:BOOLEAN :BOOLEAN <- other; // and

  - Self:SELF '^'  Left 10  other:BOOLEAN :BOOLEAN <- ! other;

  - Self:SELF '->'  Right 25 other:BOOLEAN :BOOLEAN <- other;

  - Self:SELF '->>' Right 25 other:{BOOLEAN}  :BOOLEAN <- other.value;

  - Self:SELF '=>' s:STRING :STRING;
  
  - (Self:SELF,true_value:{E}) '!!' false_value:{E} :E <- true_value.value;

  - (Self:SELF,true_value:E) '!>' false_value:E :E <- true_value;
  
  //
  // Prefix operator
  //

  - '!' Self:SELF :BOOLEAN <- FALSE;

  //
  // Conversion
  //

  - to_string_buffer:STRING_BUFFER <- "1".to_string_buffer; // BSBS: A revoir ...

  - to_string:STRING <- "TRUE";

  - to_integer:INTEGER     <- 1;

  - to_character:CHARACTER <- '1';

