///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Example                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := RULER_HORIZONTAL;

  - copyright := "2003-2008 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";

Section Inherit
  
  + parent_ruler:Expanded RULER;
  
Section Public

  //
  // Width / Height
  //
  
  - width_min:INTEGER  := 100;
  
  - height_min:INTEGER := 23;

  //
  // Creation.
  //

  - create:SELF <-
  ( 
    make;
    fix_height
  );

  - make <-
  ( 
    
  );
  
  //
  // Display.
  //
    
  - draw (x0,y0:INTEGER) to (x1,y1:INTEGER) <-  
  ( + xl,xr:INTEGER_32;    
    clipping (x0,y0) to (x1,y1);
    
    draw_border_out (x_min,y_min) to (x_max,y_max);
        
    color 8C_8C_BAh;
    rectangle_fill (x_min+1,y_min+1) to (x_max-1,y_max-1);
    
    clipping (x0.max (x_min+2),y0) to (x1.min (x_max-2),y1);
    xl := - page.origin_x / 40 * 40 + page.ruler_x % 40;
    {
      xl := xl + 40;
      xr := (xl - page.ruler_x).abs; 
      (xr % 40000 = 0).if { 
        // 1 meter        
        line_v (ecrx xl,0) until 21 color 0C8_00_00h;
        (page.zoom * 40000 >= 3*8).if {
          print (ecrx xl+2,0) number ((xr/400).to_real_32) decimal 0; // 0
        };
      }.elseif {(xr % 20000 = 0) && {page.zoom * 20000 >= 2}} then { 
        // 0.5 meter
        line_v (ecrx xl,3) until 21 color black;
        (page.zoom * 20000 >= 3*8).if { 
          color 0C8_00_C8h;
          print (ecrx xl+2,0) number ((xr/400).to_real_32) decimal 0; // 0
        };
      }.elseif {(xr % 4000 = 0) && {page.zoom * 4000 >= 2}} then { 
        // 10 cm
        line_v (ecrx xl,7) until 21 color black;
        (page.zoom * 4000 >= 3*8).if { 
          color 00_00_FFh;
          print (ecrx xl+2,0) number ((xr/400).to_real_32) decimal 0; // 0
        };
      }.elseif {(xr % 2000 = 0) && {page.zoom * 2000 >= 2}} then { 
        // 5 cm
        line_v (ecrx xl,12) until 21 color black;
        (page.zoom * 2000 >= 3*5).if { 
          color 00_FF_FFh;
          print (ecrx xl+2,7) number ((xr/400).to_real_32) decimal 0; // 3
        };
      }.elseif {(xr % 400 = 0) && {page.zoom * 400 >= 2}} then { 
        // 1 cm
        line_v (ecrx xl,17) until 21 color black;
        (page.zoom * 400 >= 3*5).if { 
          color black;
          print (ecrx xl+2,10) number ((xr/400).to_real_32) decimal 0; // 3
        };
      }.elseif {(xr % 200 = 0) && {page.zoom * 200 >= 2}} then { 
        // 0.5 cm
        line_v (ecrx xl,19) until 21 color black;
        (page.zoom * 200 >= 4*5+3).if { 
          color 0C8_C8_C8h;
          print (ecrx xl+2,12) number (xr.to_real_32/400) decimal 1; // 3
        };
      }.elseif {page.zoom * 40 >= 2} then { 
        // 1 mm
        line_v (ecrx xl,21) until 21 color black;
      };
    }.do_while {ecrx xl < x_max};
  );

  //
  // Events.
  //
  
  - receive msg:EVENT <-
  ( + evt_keyboard:EVENT_KEYBOARD;    
    + evt_mouse:EVENT_MOUSE;
    
    evt_keyboard ?= msg;    
    (evt_keyboard != NULL).if {
      keyboard_event (evt_keyboard.key);
    };
    
    evt_mouse ?= msg;
    (evt_mouse != NULL).if {
      mouse_event evt_mouse;
    };    
  );
  
  - keyboard_event key:UINTEGER_16 <-
  (
    // Nothing.
  );

  - mouse_event evt:EVENT_MOUSE <-
  ( + win:AREA;
    
    win := DESK.get_object (evt.x_current,evt.y_current);
    (win != Self).if {      
      DESK.receive evt;
    } else {
      /*
      (evt.left_down).if {
        (stat = 2).if {
          // New game.
          screen.clear_all;
          line_count := stat := 0;
          level := 1;
        }.elseif {stat = 3} then {
          // Restart (after pause).
          stat := old_stat;
        } else {
          // Pause.
          old_stat := stat;
          stat := 3;
        };
        refresh;
      };
      */
    };
  );
