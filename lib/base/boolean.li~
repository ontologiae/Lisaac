/***************************************************************************
*                             Lisaac Library                               *
*                   (c) INRIA 2003 (see 'licence.txt')                     *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
***************************************************************************/
/*
Copyright (C) 2005  Benoit Sonntag

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
section HEADER
  
  * name     :=BOOLEAN;
  
  - category    :=MICRO;
  
  - bibliography:="http://IsaacOS.com";
  - author      :="Sonntag Benoit (bsonntag@loria.fr)";
  - comment     :="Boolean library (self is mapping on int C).";

  - type        := `char`;
  - default     := FALSE;
  
section INHERIT
  
  - parent_object:OBJECT := OBJECT;
  
section PRIVATE  
  
  - deferred_boolean:BOOLEAN <-
  ( + result:BOOLEAN;
    
    deferred;
    result
  );
  
section PUBLIC

  //
  // Conditional :
  //
  
  - if_true block:BLOCK  <- deferred;
  
  - if_false block:BLOCK <- deferred;
  
  - if true_block:BLOCK else false_block:BLOCK <- deferred;
  
  - if_true true_block:BLOCK else false_block:BLOCK <- deferred;
  
  - if_false true_block:BLOCK else false_block:BLOCK <- deferred;
  
  - if true_block:BLOCK :BOOLEAN <- deferred_boolean;
  
  - elseif cond:BLOCK then block:BLOCK :BOOLEAN <- deferred_boolean;
  
  - elseif cond:BLOCK then block:BLOCK else block_else:BLOCK <- deferred;
  
  //
  // Binary operator :
  //
  
  - '||' left 10  other:BLOCK   :BOOLEAN <- deferred_boolean;
  
  - '&&' left 20  other:BLOCK   :BOOLEAN <- deferred_boolean; 
  
  - '|'  left 10  other:BOOLEAN :BOOLEAN <- deferred_boolean;
  
  - '&'  left 20  other:BOOLEAN :BOOLEAN <- deferred_boolean;
  
  - '^' left 10  other:BOOLEAN :BOOLEAN  <- deferred_boolean;
  
  - '->' right 25 other:BOOLEAN :BOOLEAN <- deferred_boolean;

  - '->>' right 25 other:BLOCK  :BOOLEAN <- deferred_boolean;
  
  - '=>' s:ABSTRACT_STRING <- deferred;
  
  //
  // Prefix operator
  //
  
  - '!' :BOOLEAN <- deferred;
  
  //
  // Convertion
  //
  
  - to_string:STRING <- 
  ( + result:STRING;
    
    deferred;
    result
  );
  
  - to_numeric:NUMERIC <- 
  ( + result:NUMERIC;
    
    deferred;
    result
  );
  
  - to_character:CHARACTER <- 
  ( + result:CHARACTER;
    
    deferred;
    result
  );
  
  - append_in str:STRING <- str.append to_string;

  //
  // Output.
  //
  
  - print <-
  (
    to_string.print;
  );


