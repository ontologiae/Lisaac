/****************************************************************************
*                             Lisaac Library                               *
*                      (c) INRIA 2003 see 'licence.txt' for more details   *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Jerome BOUTET  - boutet@loria.fr                       *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
****************************************************************************/
/*
Copyright (C) 2005  Benoit Sonntag

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
section HEADER
  
  + name        := STD_INPUT;
  - comment     :=" To use the standard input file. As for UNIX, the default standard input is the keyboard.";
  
  - category    := MICRO;
  
  - bibliography:="http://IsaacOS.com";
  - author      :="Boutet Jerome (boutet@loria.fr)";
  
section INHERIT
  
  - parent_input_stream:INPUT_STREAM := INPUT_STREAM;
  
section PRIVATE

  - memory:CHARACTER;
  // Memory of the last available user's value.

section PUBLIC
  
  - is_connected:BOOLEAN := TRUE;
  
  - read_character:CHARACTER<-
  (
    push_back_flag.if {
      push_back_flag := FALSE;
    } else {
      memory := basic_io_getc;
    };
    last_character
  );
  
  
  - unread_character <-
  (
    push_back_flag := TRUE;
  );
  
  
  - last_character:CHARACTER <-
  (
    memory
  );
  
  
  - end_of_input:BOOLEAN <-
  (
    + result:BOOLEAN;
    (! push_back_flag).if {
      result := (memory = basic_io_eof);
    };
    result
  );
  
  - read_line_in str:STRING <-
  (
    + mem:CHARACTER;
    read_character;
    ( (last_character != '\n') && { memory != basic_io_eof } ).if {
      str.extend memory;
      mem := basic_io_getc;
      
      { (mem = basic_io_eof) || {mem = '\n'} }.until_do {
	str.extend mem;
	mem := basic_io_getc;
      };
      memory := mem;
    };
  );
    


