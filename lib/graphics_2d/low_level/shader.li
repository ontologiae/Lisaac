Section Header
  
  + name := Expanded SHADER;
  
Section Inherit
  
  - parent_object:OBJECT := OBJECT;
  
Section Public

  - shader_fillgrad:INTEGER := 0;
  - shader_fillimg:INTEGER  := 1;
  - shader_simple:INTEGER   := 2;
  - shader_img:INTEGER      := 3;
/*
  - loc_viewsize:INTEGER := 0;
  - loc_tex:INTEGER      := 1;
  - loc_frag:INTEGER     := 2;
*/
Section Public
  
  + prog:UINTEGER_32;
  + frag:UINTEGER_32;
  + vert:UINTEGER_32;
  + loc_view:INTEGER;
  + loc_tex :INTEGER;
  + loc_frag:INTEGER;

  - make (name,header,opts,vshader,fshader:STRING_ALIAS) <-
  ( + status:INTEGER;
    + iprog, ivert, ifrag:UINTEGER_32;
    + opt:STRING_ALIAS;
    iprog := PEN_GL.gl_create_program;
    //"Create Prog #".print; iprog.print; '\n'.print;
    ivert := PEN_GL.gl_create_shader `GL_VERTEX_SHADER`:INTEGER;
    ifrag := PEN_GL.gl_create_shader `GL_FRAGMENT_SHADER`:INTEGER;
    opt := (opts != NULL).ok opts or "";
    PEN_GL.gl_shader_source(ivert,header,opt,vshader);
    PEN_GL.gl_shader_source(ifrag,header,opt,fshader);
    PEN_GL.gl_compile_shader ivert;
    status := PEN_GL.gl_get_shaderiv (ivert,`GL_COMPILE_STATUS`:INTEGER);
    ? {status = 1};
    PEN_GL.gl_compile_shader ifrag;
    status := PEN_GL.gl_get_shaderiv (ifrag,`GL_COMPILE_STATUS`:INTEGER);
    ? {status = 1};
    PEN_GL.gl_attach_shader(iprog, ivert);
    PEN_GL.gl_attach_shader(iprog, ifrag);
    PEN_GL.gl_bind_attrib_location(iprog, 0, "vertex");
    PEN_GL.gl_bind_attrib_location(iprog, 1, "tcoord");

    PEN_GL.gl_link_program iprog;
    status := PEN_GL.gl_get_programiv (iprog,`GL_LINK_STATUS`:INTEGER);
    ? {status = 1};
    prog := iprog;
    vert := ivert;
    frag := ifrag;
  );

  - delete_shader <-
  (
    (prog != 0).if { gl_delete_program prog; };
    (vert != 0).if { gl_delete_shader vert;  };
    (frag != 0).if { gl_delete_shader frag;  };
  );

  - get_uniforms <-
  (    
    loc_view := PEN_GL.gl_get_uniform_location (prog, "viewSize");
    //"Shader prog #".print; prog.print; " viewSize:".print; loc_view.print; '\n'.print;
    loc_tex  := PEN_GL.gl_get_uniform_location (prog, "tex");
    //"Shader prog #".print; prog.print; " tex:".print; loc_tex.print; '\n'.print;
    // GLES3
    loc_frag := PEN_GL.gl_get_uniform_block_index (prog, "frag");
    //"Shader prog #".print; prog.print; " frag:".print; loc_frag.print; '\n'.print;
  );
  
  - dump_shader_error (name,type:STRING_ALIAS) <-
  ( + str:STRING_BUFFER;
    str := PEN_GL.gl_get_shader_info_log shader;
    "Shader ".print;   name.print; '/'.print; type.print; 
    " error:\n".print; str.print;  '\n'.print;
  );
