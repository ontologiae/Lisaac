Section Header

  + name := BODY3;

Section Public
  
  - pi:REAL_64 := `3.141592653589793`:REAL_64;

  - solar_mass:REAL_64 := pi * pi * 4;

  - days_per_year:REAL_64 := 365.24;

  + x: REAL_64;
  + y: REAL_64;
  + z: REAL_64;

  + vx: REAL_64;
  + vy: REAL_64;
  + vz: REAL_64;

  + mass: REAL_64;

  - set_x a:REAL_64 <-
  (
    x := a;
  );  
  - set_y a:REAL_64 <-
  (
    y := a;
  );
  - set_z a:REAL_64 <-
  (
    z := a;
  );

  - set_vx a:REAL_64 <-
  (
    vx := a;
  );
  - set_vy a:REAL_64 <-
  (
    vy := a;
  );
  - set_vz a:REAL_64 <-
  (
    vz := a;
  );
  
  - sun <- 
  (
    mass := solar_mass;
  );
  
  - jupiter <-
  (    
    x := `4.84143144246472090E+00`:REAL_64;
    y := `-1.16032004402742839E+00`:REAL_64;
    z := `-1.03622044471123109E-01`:REAL_64;

    vx := `1.66007664274403694E-03`:REAL_64 * days_per_year;
    vy := `7.69901118419740425E-03`:REAL_64 * days_per_year;
    vz := `-6.90460016972063023E-05`:REAL_64 * days_per_year;
    
    mass := `9.54791938424326609E-04`:REAL_64 * solar_mass;
  );
  
  - saturn <-
  (
    x := `8.34336671824457987E+00`:REAL_64;
    y := `4.12479856412430479E+00`:REAL_64;
    z := `-4.03523417114321381E-01`:REAL_64;
    
    vx := `-2.76742510726862411E-03`:REAL_64 * days_per_year;
    vy := `4.99852801234917238E-03`:REAL_64 * days_per_year;
    vz := `2.30417297573763929E-05`:REAL_64 * days_per_year;
    
    mass := `2.85885980666130812E-04`:REAL_64 * solar_mass;
  );
  
  - uranus <-
  (
    x := `1.28943695621391310E+01`:REAL_64;
    y := `-1.51111514016986312E+01`:REAL_64;
    z := `-2.23307578892655734E-01`:REAL_64;
    
    vx := `2.96460137564761618E-03`:REAL_64 * days_per_year;
    vy := `2.37847173959480950E-03`:REAL_64 * days_per_year;
    vz := `-2.96589568540237556E-05`:REAL_64 * days_per_year;
    
    mass := `4.36624404335156298E-05`:REAL_64 * solar_mass;
  );
  
  - neptune <-
  (
    x := `1.53796971148509165E+01`:REAL_64;
    y := `-2.59193146099879641E+01`:REAL_64;
    z := `1.79258772950371181E-01`:REAL_64;
    
    vx := `2.68067772490389322E-03`:REAL_64  * days_per_year;
    vy := `1.62824170038242295E-03`:REAL_64  * days_per_year;
    vz := `-9.51592254519715870E-05`:REAL_64 * days_per_year;
    
    mass := `5.15138902046611451E-05`:REAL_64 * solar_mass;
  );
  
 
  - offset_momentum (px: REAL_64; py: REAL_64; pz: REAL_64) <-
  (
    vx := - px / solar_mass
    vy := - py / solar_mass
    vz := - pz / solar_mass
  );

-- SPLITFILE=nbody.e
class NBODY

insert ARGUMENTS

creation {ANY}
   make

feature {ANY}
   make is
      local
         n: INTEGER; i: INTEGER; bodies: NBODY_SYSTEM
      do
         create bodies.make
         std_output.put_real_format(bodies.energy,9)
         std_output.put_string("%N")
         n := argument(1).to_integer
         from
            i := 0
         until
            i = n
         loop
            bodies.advance(0.01)
            i := i + 1
         end
         std_output.put_real_format(bodies.energy,9)
         std_output.put_string("%N")
      end

end -- class NBODY
-- SPLITFILE=nbody_system.e
class NBODY_SYSTEM

creation {ANY}
   make

feature {ANY}
   bodies: FAST_ARRAY[BODY]

   make is
      local
         b: BODY; px: REAL_64; py: REAL_64; pz: REAL_64; i: INTEGER; bi : BODY
      do
         create bodies.make(5)
         create b.sun
         bodies.put(b, 0)
         create b.jupiter
         bodies.put(b, 1)
         create b.saturn
         bodies.put(b, 2)
         create b.uranus
         bodies.put(b, 3)
         create b.neptune
         bodies.put(b, 4)
         from
            i := 0
         until
            i = 5
         loop
            bi := bodies.item(i)
            px := px + bi.vx * bi.mass
            py := py + bi.vy * bi.mass
            pz := pz + bi.vz * bi.mass
            i := i + 1
         end
         bodies.item(0).offset_momentum(px, py, pz)
      end

   advance (dt: REAL_64) is
      local
         dx: REAL_64; dy: REAL_64; dz: REAL_64; distance: REAL_64; mag: REAL_64; i: INTEGER; j: INTEGER; bi: BODY; bj: BODY
      do
         from
            i := 0
         until
            i = 5
         loop
            bi := bodies.item(i)
            from
               j := i + 1
            until
               j = 5
            loop
               bj := bodies.item(j)
               dx := bi.x - bj.x
               dy := bi.y - bj.y
               dz := bi.z - bj.z
               distance := (dx * dx + dy * dy + dz * dz).sqrt
               mag := dt / (distance * distance * distance)
               bi.set_vx(bi.vx - dx * bj.mass * mag)
               bi.set_vy(bi.vy - dy * bj.mass * mag)
               bi.set_vz(bi.vz - dz * bj.mass * mag)
               bj.set_vx(bj.vx + dx * bi.mass * mag)
               bj.set_vy(bj.vy + dy * bi.mass * mag)
               bj.set_vz(bj.vz + dz * bi.mass * mag)
               j := j + 1
            end
            i := i + 1
         end
         from
            i := 0
         until
            i = 5
         loop
            bi := bodies.item(i)
            bi.set_x(bi.x + dt * bi.vx)
            bi.set_y(bi.y + dt * bi.vy)
            bi.set_z(bi.z + dt * bi.vz)
            i := i + 1
         end
      end

   energy: REAL_64 is
      local
         dx: REAL_64; dy: REAL_64; dz: REAL_64; distance: REAL_64; e: REAL_64; i: INTEGER; j: INTEGER; bi: BODY; bj:BODY
      do
         from
            i := 0
         until
            i = 5
         loop
            bi := bodies.item(i)
            e := e + 0.5 * bi.mass * (bi.vx * bi.vx + bi.vy * bi.vy + bi.vz * bi.vz)
            from
               j := i + 1
            until
               j = 5
            loop
               bj := bodies.item(j)
               dx := bi.x - bj.x
               dy := bi.y - bj.y
               dz := bi.z - bj.z
               distance := (dx * dx + dy * dy + dz * dz).sqrt
               e := e - bi.mass * bj.mass / distance
               j := j + 1
            end
            i := i + 1
         end
         Result := e
      end

end -- class NBODY_SYSTEM
