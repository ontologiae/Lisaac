Section Header

  + name        := SLOT;

  - comment     := "Parent for slot runnable";

Section Inherit // BSBS: Passer en Insert

  + parent_itm_slot:ITM_SLOT := ITM_SLOT;

Section Public

  - common_slot:SLOT <- Self;

  + slot_id:SLOT_DATA;

  + receiver_type:TYPE;
  
  + argument_list:ARRAY ITM_ARGUMENT;
  
  - itm_slot:ITM_SLOT <- parent_itm_slot;
  
  //
  // Creation.
  //

  - create s:ITM_SLOT for larg:ARRAY ITM_ARGUMENT type t:TYPE :SLOT <-
  ( + result:SLOT;

    result := clone;
    result.make s for larg type t
  );

  - make s:ITM_SLOT for diagram:ARRAY ITM_ARGUMENT type t:TYPE :SLOT <-
  ( + result:SLOT;
        
    (diagram = NULL).if {
      argument_list := s.argument_list;
    } else {
      argument_list := diagram;
    };
    (argument_list.lower).to (argument_list.upper) do { i:INTEGER;
      string_tmp.clear;
      argument_list.item i.append_in string_tmp; string_tmp.print; ','.print;
    };
    "SLOT:".print; s.name.print; ' '.print; argument_list.count.print; '\n'.print;
    //
    s.set_used;
    parent_itm_slot := s;
    receiver_type := t;
    //
    (affect = '<').if {
      // Code.
      "SLOT: AV create intern!\n".print;
      result := slot_code_intern := SLOT_CODE.create Self with value;
    } else {
      // Data
      create_slot_data;
      result := slot_data_intern;
    };
    //
    result
  );

  //
  // Style.
  //

  - lower_style:INTEGER <-
  ( + result:INTEGER;
    (slot_data_intern = NULL).if {
      result := 1;
    };
    result
  );

  - upper_style:INTEGER <-
  ( + result:INTEGER;
    (slot_code_intern != NULL).if {
      (slot_code_list != NULL).if {
	result := slot_code_list.upper + 2;
      } else {
	result := 1;
      };
    };
    result
  );

  - slot_data:SLOT_DATA <-
  (
    (slot_data_intern = NULL).if {
      create_slot_data;
      (slot_id = NULL).if {
	slot_id := SLOT_DATA.create common_slot type_full (TYPE_ID.get_index 1.default);
	slot_id.init;
      };
    };
    slot_data_intern
  );

  - slot_code idx:INTEGER :SLOT_CODE <-
  ( + result:SLOT_CODE;

    (idx = 1).if {
      result := slot_code_intern;
    } else {
      result := slot_code_list.item (idx-2);
    };
    result
  );

  - add_style v:ITM_CODE :INTEGER <-
  ( + slot:SLOT_CODE;
    + result:INTEGER;
    
    "SLOT: AV create style!\n".print;
    slot := SLOT_CODE.create common_slot with v;
    (slot_code_intern = NULL).if {
      slot_code_intern := slot;
      slot_id := SLOT_DATA.create common_slot type_full (TYPE_ID.get_index 0.default);
      slot_id.init;
      result := 1;
    } else {
      (slot_code_list = NULL).if {
	slot_code_list := ARRAY SLOT_CODE .create_with_capacity 1;
      };
      slot_code_list.add_last slot;
      (slot_id = NULL).if {
	slot_id := SLOT_DATA.create common_slot type_full (TYPE_ID.get_index 1.default);
	slot_id.init;
      };
      result := slot_code_list.upper + 2;
    };
    result
  );
  
  - verify_profil other:SLOT <- 
  (
    itm_slot.is_equal_profil (other.itm_slot);
  );

  //
  // Display.
  //

  - display_all <-
  (
    (lower_style).to (upper_style) do { j:INTEGER;
      item_style j.display_all;
    };
  );

Section Public

  + slot_data_intern:SLOT_DATA; // Index 0
  + slot_code_intern:SLOT_CODE; // Index 1

  + slot_code_list:ARRAY SLOT_CODE; // Index x+2
  + slot_data_list:ARRAY SLOT_DATA; // Vector data slot

  - create_slot_data <-
  ( + typ:TYPE_FULL;
    + tm:ITM_TYPE_MULTI;
    + ts:ITM_TYPE_MONO;

    tm ?= result_type;
    (tm != NULL).if {
      slot_data_list := ARRAY SLOT_DATA .create_with_capacity (tm.count-1);
      (tm.lower).to (tm.upper-1) do { k:INTEGER;
	typ := tm.item k.to_run_for receiver_type;
	slot_data_list.add_last (
	  SLOT_DATA.create common_slot type_full typ
	);
      };
      typ := tm.last.to_run_for receiver_type;
    } else {
      ts ?= result_type;
      typ := ts.to_run_for receiver_type;
    };
    slot_data_intern := SLOT_DATA.create common_slot type_full typ;
  );