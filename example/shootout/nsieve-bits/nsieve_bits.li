///////////////////////////////////////////////////////////////////////////////
//                              Lisaac Example                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name         := NSIEVE_BITS;
  
  - bibliography := "http://IsaacOS.com";
  - author       := "Xavier Oswald (x.oswald@free.fr)";
  - comment      := "Language shootout - nsieve-bits (based on the C version)"; 
  
Section Inherit
  
  - parent_any:OBJECT := OBJECT;

Section Private

  - primes      :FAST_ARRAY[UINTEGER_32];

  - sizeof_bits :UINTEGER_32 := 4;  // sizeof(unsigned int)

  - bbits       :UINTEGER_32 := 32; // sizeof(unsigned int) * 8
  
  - bsize x:UINTEGER_32 :UINTEGER_32 <-
  (
    (x / 8) + sizeof_bits
  ); // OK !

  - bmask x:UINTEGER_32 :UINTEGER_32 <-
  (
    1 << (x % bbits)
  );

  - btest(p: FAST_ARRAY[UINTEGER_32], x :UINTEGER_32) :UINTEGER_32 <-
  (
    (p.item (x / bbits)) & bmask x
  );

  - bflip(p: FAST_ARRAY[UINTEGER_32], x :UINTEGER_32) :UINTEGER_32 <-
  ( + t,idx :UINTEGER_32;
    
    idx := x / bbits;
    t := p.item idx ^ bmask x;
    p.put t to idx;
    t
  );

Section Public
 
  - main <-
  ( + sz, param :UINTEGER_32;
    + count, n :UINTEGER_32;
    + j :UINTEGER_32;
    + size :UINTEGER_32;

    (COMMAND_LINE.upper = 1).if {
      param := COMMAND_LINE.item 1.to_integer;
    } else {
      param := 1;
    };
    
    sz := 10000 << param;
    primes := FAST_ARRAY[UINTEGER_32].create (bsize(sz));
    
    0.to 2 do { m:UINTEGER_32;
      count := 0;
      n := sz >> m;
      
      // rempli les bsize(n) premier carateres de primes par 0xff
      //memset(primes, 0xff,bsize(n));
      size := bsize(n);
      ? {size & 3 = 0};
      0.to (size / 4) do { j1:INTEGER;
        primes.put (~0) to j1;
      };
      
      2.to n do { i:UINTEGER_32;
        (btest(primes,i) != 0).if {
          count := count + 1;
          j := i + i;
          {j <= n}.while_do {
            (btest(primes,j) != 0).if {
              bflip(primes,j);
            };
            j := j + i;
          };
        };
      };
      "Primes up to ".print;
      n.print;
      ' '.print;
      count.print;
      '\n'.print;
    };
  );
