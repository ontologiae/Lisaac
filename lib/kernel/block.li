Section Header

  + name    := BLOCK;

  - comment := "Block instruction library { ... } .";

Section Inherit

  - parent_object:OBJECT := OBJECT;

Section Public

  //
  // Conditional :
  //

  - Self:{BOOLEAN} '||' Left 10 other:{BOOLEAN} :BOOLEAN <-
  (
    value || other
  );

  - Self:{BOOLEAN} '&&' Left 20 other:{BOOLEAN} :BOOLEAN <-
  (
    value && other
  );

  - Self:{}.if test:BOOLEAN <-
  (
    test.if_true {
      value;
    };
  );

  //
  // Loop :
  //

  - Self:{}.endless_loop <-
  (
    (`1`:BOOLEAN{TRUE,FALSE}).if {
      value;
      endless_loop;
    };
  );

  - Self:{BOOLEAN}.while_do body:{} <-
  ( //? {body!=NULL};

    value.if {
      body.value;
      while_do body;
    };
  );

  - Self:{}.do_while test:{BOOLEAN} <-
  ( //? {test!=NULL};

    value;
    test.value.if {
      do_while test;
    };
  );

  - Self:{BOOLEAN}.until_do body:{} <-
  ( // ? {body!=NULL};

    (! value).if {
      body.value;
      until_do body;
    };
  );

  - Self:{}.do_until test:{BOOLEAN} <-
  ( //? {test!=NULL};

    value;
    (! test.value).if {
      do_until test;
    };
  );

  - Self:{BOOLEAN}.while_do body:{} ensure test:{BOOLEAN} <-
  // Mix loop version beetween `while_do' and `do_while'
  (
    value.if {
      body.value;
      test.value.if {
	while_do body ensure test;
      };
    };
  );

  /*
  - until_do body:BLOCK or_until test:BLOCK <-
  (
    (! value).if {
      body.value;
      (! test.value).if {
	until_do body or_until test;
      };
    };
  );
  */

  //
  // Debug: Require / Ensure / Check
  //
    
  - Self:{BOOLEAN} '?' msg:STRING_ALIAS <-
  // User assertion with message.
  (
    ((debug_level >=10) && {! value}).if {
      crash_with_message msg after 6;
    };
  );
  
  - '?' Self:{BOOLEAN} <-
  // User assertion without message.
  (     
    ((debug_level >=10) && {! value}).if {
      crash_with_message "User assertion violated." after 7;
    };
  );

  - Self:{BOOLEAN} '-?' msg:STRING_ALIAS <-
  // Require assertion with message.
  ( 
    ((debug_level >= 5) && {! value}).if {
      crash_with_message msg after 7;
    };
  );

  - '-?' Self:{BOOLEAN} <-
  // Require assertion without message.
  ( 
    ((debug_level >= 5) && {! value}).if {
      crash_with_message "Require assertion violated." after 7;
    };
  );

  - Self:{BOOLEAN} '+?' msg:STRING_ALIAS <-
  // Ensure assertion with message.
  ( 
    ((debug_level >= 15) && {! value}).if {
      crash_with_message msg after 7;
    };
  );

  - '+?' Self:{BOOLEAN} <-
  // Require assertion without message.
  (
    ((debug_level >= 15) && {! value}).if {
      crash_with_message "Ensure assertion violated." after 7;
    };
  );

  - Self:{BOOLEAN} '?#' val:INTEGER <-
  // Other assertion without message.
  (
    ((debug_level >= val) && {! value}).if {
      crash_with_message "Assertion violated." after 7;
    };
  );

  //
  // Code debug.
  //

  - '!' Self:{BOOLEAN} <-
  (
    (debug_level >=10).if {
      value;
    };
  );


