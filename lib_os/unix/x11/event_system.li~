/***************************************************************************
*                      Isaac Object Operating System                       *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Jerome BOUTET  - boutet@loria.fr                       *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
****************************************************************************/

section HEADER
  
  + name        := EVENT_SYSTEM;
  
  - comment     := "X11 - Event System";
  
  - category    := MICRO;
  
  - bibliography:= "http://IsaacOS.com";
  - author      := "Benoit Sonntag (bsonntag@loria.fr)";
  
  - external := `volatile char is_sleep=0;`;
  
section INHERIT
  
  - parent_object:OBJECT := OBJECT;
  
section PUBLIC  

  - sleep n:INTEGER <-
  // Milisecond
  (
    `usleep(@n * 1000)`;
  );
  
  - make <-  
  (
    `XSelectInput
    (display,window,
      KeyPressMask|KeyReleaseMask                         | /* Keyboard */
      ButtonPressMask|ButtonReleaseMask|PointerMotionMask | /* Mouse    */
      ExposureMask|                                         /* Refresh  */
      ClientMessage
    )`;
  );
    
  - get_event <-
  ( //+ nb_ev:INTEGER;
    + type:INTEGER;
    + x0,y0,x1,y1:INTEGER;
      
    //nb_ev := `XPending(display)`:INTEGER;
    //(nb_ev != 0).if {
    `{ XEvent ev`; 
      (`XPending(display)`:INTEGER = 0).if {
	`is_sleep = 1`;
      };
      `XNextEvent(display,&ev)`;
      `is_sleep = 0`;
      type := `ev.type`:INTEGER;
      
      //"Event:".print; type.to_hexadecimal.print; "h\n".print;
      
      type
      .when `ClientMessage`:INTEGER then {
	TIMER.get_event;
      }
      //
      // Event Window
      //
      .when `Expose`:INTEGER then {
	// Refresh Linux Window
	x0 := `ev.xexpose.x`:INTEGER;
	y0 := `ev.xexpose.y`:INTEGER;
	x1 := x0 + `ev.xexpose.width` :INTEGER - 1;
	y1 := y0 + `ev.xexpose.height`:INTEGER - 1;
	INTERFACE.screen.redraw x0,y0 to x1,y1;
      }
      //
      // Event Keyboard
      //
      .when `KeyPress`:INTEGER then {
	KEYBOARD.key `ev.xkey.keycode`:USMALLINT press TRUE;
      }
      .when `KeyRelease`:INTEGER then {
	KEYBOARD.key `ev.xkey.keycode`:USMALLINT press FALSE;
      }	
      //
      // Event Mouse
      //
      .when `ButtonPress`:INTEGER then {
	(`ev.xbutton.button`:INTEGER = 1).if {
	  MOUSE.set `ev.xbutton.x`:INTEGER,`ev.xbutton.y`:INTEGER with TRUE,(MOUSE.right);
	} else {
	  MOUSE.set `ev.xbutton.x`:INTEGER,`ev.xbutton.y`:INTEGER with (MOUSE.left),TRUE;
	};
      }
      .when `ButtonRelease`:INTEGER then {
	(`ev.xbutton.button`:INTEGER = 1).if {
	  MOUSE.set `ev.xbutton.x`:INTEGER,`ev.xbutton.y`:INTEGER with FALSE,(MOUSE.right);
	} else {
	  MOUSE.set `ev.xbutton.x`:INTEGER,`ev.xbutton.y`:INTEGER with (MOUSE.left),FALSE;
	};
      }
      .when `MotionNotify`:INTEGER then {
	MOUSE.set `ev.xmotion.x`:INTEGER,`ev.xmotion.y`:INTEGER with (MOUSE.left),(MOUSE.right);
      };
    `}`;
  );
  
  









