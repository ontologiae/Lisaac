///////////////////////////////////////////////////////////////////////////////
//                              Lisaac Example                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name     := GRAVITY;
  
  - comment  := "The Gravity game";
  
  - author   := "Benoit Sonntag (bsonntag@loria.fr)";

  - version  := 1;
  
Section Inherit  
  
  + parent_area:Expanded AREA;
  
  + parent_g_expr:Expanded G_EXPR;
  
Section Public  
  
  - balls:FAST_ARRAY(BALL) := FAST_ARRAY(BALL).create_with_capacity 10;  
  
  //
  // Width / Height
  //
  
  - width_min:INTEGER  := 1024;
  
  - height_min:INTEGER := 768;
  
  //
  // Creation.
  //  
  
  - main <-
  ( + x,y:INTEGER;
    // world definition.    
    0.to 30_000 do { i:INTEGER;
      x := (width_min  / 6).random_upper * 6 + 4;
      y := (height_min / 6).random_upper * 6 + 4;
      balls.add_last (BALL.create (x,y) radius 2);
    };
    //TIMER.add_client Self;
    // Init window.
    VIDEO.make_size (1024+20,768+20);
    DESK.make VIDEO with (
      G_OUT.create "Gravity" justify (G_OUT.center) / G_RAW.create (Self.fix_height.fix_width)
    );        
  );
  
  //
  // Update position.
  //
  
  - set_position rac:AREA at (x,y:INTEGER) size (w,h:INTEGER) <-
  ( 
    update rac from (x,y) size (w,h);
  );
  
  //
  // Display.
  //
    
  - draw (x0,y0:INTEGER) to (x1,y1:INTEGER) <-  
  (     
    clipping (x0,y0) to (x1,y1);
    rectangle_fill (x0,y0) to (x1,y1) color black;
    (balls.lower).to (balls.upper) do { i:INTEGER;
      balls.item i.display Self;
    };
  );

  
  //
  // Events.
  //
  
  - receive msg:EVENT <-
  ( //+ evt_keyboard:EVENT_KEYBOARD;
    + evt_time:EVENT_TIMER;
    + evt_mouse:EVENT_MOUSE;
    /*
    evt_keyboard ?= msg;    
    (evt_keyboard != NULL).if {
      keyboard_event (evt_keyboard.key);
    };
    */
    evt_mouse ?= msg;
    (evt_mouse != NULL).if {
      mouse_event evt_mouse;
    };
    
    evt_time ?= msg;    
    (evt_time != NULL).if {
      timer_event evt_time;
    };
  );
    
  - timer_event evt:EVENT_TIMER <-
  (     
    (balls.lower).to (balls.upper) do { i:INTEGER;
      balls.item i.new_position;
    };
    refresh;
    evt.delay.print; '\n'.print;
  );
  
  - mouse_event evt:EVENT_MOUSE <-
  ( + win:AREA;
    
    win := DESK.get_object (evt.x_current,evt.y_current);
    (win != Self).if {
      DESK.receive evt;
    } else {
      /*
      (evt.left_down).if {
        (stat = 2).if {
          // New game.
          screen.clear_all;
          line_count := stat := 0;
          level := 0; //19;
        }.elseif {stat = 3} then {
          // Restart (after pause).
          stat := old_stat;
        } else {
          // Pause.
          old_stat := stat;
          stat := 3;
        };
        refresh;
      };
      */
    };
  );
  

