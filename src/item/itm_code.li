///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ITM_CODE;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Parent for all item code";
  
Section Inherit
  
  + parent_itm_object:Expanded ITM_OBJECT;
  
Section Public
  
  // Use by PARSER, for left expr assignment ( in EXPR1 := EXPR2, EXPR1.is_affect). 
  - is_affect:POSITION <- position;
  
  //
  // Flags.
  //

  - is_constant:BOOLEAN <- FALSE;

  //
  // Runnable.
  // 
    
  - to_run:INSTR <-
  (
    to_run_expr
  );
  
  - to_run_expr:EXPR <-
  ( 
    warning_error (position,"Error: ITM_CODE.to_run");
    deferred;
    NULL
  );
  
  //
  // Display.
  //
  
  - append_in buffer:STRING <-
  (
    "ITM_CODE : Type:".print;
    type_id_intern.print; 
    '\n'.print;
    deferred;
  );
  
  - print <-
  (
    string_tmp.clear;
    append_in string_tmp;
    string_tmp.print;
  );







