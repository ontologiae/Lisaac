Section Header

  + name        := TT_CMAP_SUBTABLE4;
  - comment     :="Format 4: Segment mapping to delta values";


  - bibliography:="http://IsaacOS.com";
  - author      :="Boutet Jerome (boutet@loria.fr)";
  - comment     :="Microsoft Standard";

Section Inherit

  - parent_tt_cmap_subtable:TT_CMAP_SUBTABLE := TT_CMAP_SUBTABLE;

Section Public

  + header:TT_CMAP_SUBTABLE4_HEADER;

  + end_count:FAST_ARRAY(UINTEGER_16);

  + reserved_pad:UINTEGER_16;

  + start_count:FAST_ARRAY(UINTEGER_16);

  + id_delta:FAST_ARRAY(UINTEGER_16);

  + id_range_offset:FAST_ARRAY(UINTEGER_16);

  + glyph_id_array:FAST_ARRAY(UINTEGER_16);

  - make file:FILE <-
  ( + seg_count:UINTEGER_32;
    + siz:UINTEGER_16;
    header := TT_CMAP_SUBTABLE4_HEADER.clone;
    file.read header;
    header.to_big_endian;

    seg_count := header.seg_countx2 / 2;
    end_count := FAST_ARRAY(UINTEGER_16).create_with_capacity seg_count;
    file.read end_count size seg_count;
    to_big_endian end_count;

    file.set_cursor (file.cursor + 2); // Reserved (skip)

    start_count := FAST_ARRAY(UINTEGER_16).create_with_capacity seg_count;
    file.read start_count size seg_count;
    to_big_endian start_count;

    id_delta := FAST_ARRAY(UINTEGER_16).create_with_capacity seg_count;
    file.read id_delta size seg_count;
    to_big_endian id_delta;

    id_range_offset := FAST_ARRAY(UINTEGER_16).create_with_capacity seg_count;
    file.read id_range_offset size seg_count;
    to_big_endian id_range_offset;

    siz := (header.length - (TT_CMAP_SUBTABLE4_HEADER.object_size + 4 * header.seg_countx2 + 2)) / 2;     
    glyph_id_array := FAST_ARRAY(UINTEGER_16).create_with_capacity siz;
    file.read glyph_id_array size siz;
    to_big_endian glyph_id_array;
  );

  - to_big_endian buf:FAST_ARRAY(UINTEGER_16) <-
  (
    0.to (buf.upper) do { i:INTEGER;
      buf.put (PROCESSOR.to_motorola_ushort (buf.item i)) to i;
    };
  );

  - print <-
  (
     "\n       Segment mapping to delta values".print;
    header.print;
    "\n       End Count: \n        ".print;
    0.to (end_count.upper) do { i:INTEGER;
      end_count.item i.to_hexadecimal_format 4.print;
      ((i+1) % 16 = 0).if { "h\n        ".print; } else { "h, ".print; };
    };
    "\n       Start Count: \n        ".print;
    0.to (start_count.upper) do { i:INTEGER;
      start_count.item i.to_hexadecimal_format 4.print;
      ((i+1) % 16 = 0).if { "h\n        ".print; } else { "h, ".print; };
    };
    "\n       Id_delta: \n        ".print;
    0.to (id_delta.upper) do { i:INTEGER;
      id_delta.item i.to_hexadecimal_format 4.print;
      ((i+1) % 16 = 0).if { "h\n        ".print; } else { "h, ".print; };
    };
    "\n       Id_range_offset: \n        ".print;
    0.to (id_range_offset.upper) do { i:INTEGER;
      id_range_offset.item i.to_hexadecimal_format 4.print;
      ((i+1) % 16 = 0).if { "h\n        ".print; } else { "h, ".print; };
    };
    "\n       Glyph Id array: (size=".print; glyph_id_array.count.print; ") \n        ".print;
    0.to (glyph_id_array.upper) do { i:INTEGER;
      glyph_id_array.item i.to_hexadecimal_format 4.print;
      ((i+1) % 16 = 0).if { "h\n        ".print; } else { "h, ".print; };
    };
  );

