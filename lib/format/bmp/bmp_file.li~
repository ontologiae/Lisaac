/***************************************************************************
*                      Isaac Object Operating System                       *
*                             Isaac Library                                *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Jerome BOUTET  - boutet@loria.fr                       *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
****************************************************************************/

section HEADER
  
  + name        := BMP_FILE;
  
  - comment     := "Mapping BMP Image File (V < 4.0)";
  
  - category    := MICRO;
  
  - bibliography:= "http://IsaacOS.com";
  
  - author      := "Benoit Sonntag (bsonntag@loria.fr), Jerome Boutet (boutet@loria.fr)";
  
section INHERIT
  
  * parent_std_file:STD_FILE;
  
section PUBLIC
  
  - pos_buffer:INTEGER;

  - bmp_buffer:FIXED_ARRAY[USMALLINT];
  
  //
  
  - header:BMP_HEADER;

  - color_map:MAP_FIXED_ARRAY[PIXEL_24];
  
  //
  
  - read_header <-
  (     
    (bmp_buffer = NULL).if {
      bmp_buffer := FIXED_ARRAY[USMALLINT].create_with_capacity size;
    }.elseif {bmp_buffer.capacity < size.to_integer} then {
      bmp_buffer.set_capacity (size.to_integer);
      bmp_buffer.clear;
    } else {
      bmp_buffer.clear;
    };
    read bmp_buffer size size;    
    header := BMP_HEADER.force_conversion (bmp_buffer.storage);
    pos_buffer := BMP_HEADER.object_size;
  );

  - init_color_map <-
  ( + code,nb_colors:INTEGER;    
    ? {header != NULL};
    //
    // Init Color Table
    // 
    header.is_bgr_format.if {
      code := 3;
    } else {
      code := 4;
    };
    nb_colors := header.get_nb_colors;
    (color_map = NULL).if {
      color_map := MAP_FIXED_ARRAY[PIXEL_24].create 256;
    };            
    0.to (nb_colors-1) do { j:INTEGER; 
      color_map.item j
      .color_rgb (bmp_buffer.item (pos_buffer + 2)),(bmp_buffer.item (pos_buffer + 1)),(bmp_buffer.item pos_buffer);
      pos_buffer := pos_buffer + code;
    };
  );
          
  - buf_item :USMALLINT <-
  ( + result:USMALLINT;
    result := bmp_buffer.item pos_buffer;
    pos_buffer := pos_buffer + 1;
    result
  );
  
  // JBJB POUR AFFICHAGE EN MODE TEXTE
  - fill_bitmap b:BITMAP <-
  ( + end:BOOLEAN;
    + x,y:INTEGER;
    + line_24:BMP_LINE_24;
    //+ line_ascii:BMP_LINE_ASCII;
    + tmp_pix:PIXEL_24;
    + escape,cmd:USMALLINT;
    + align:UINTEGER;
    ? {header != NULL};
    
    is_valid_bmp.if {
      ? {(b.width = header.width) && {b.height = header.height}};
      	
      //line_ascii := BMP_LINE_ASCII.create (header.width);
      header.is_8bit.if {
	//
	// 8 Bit
	// 	  
	line_24 := BMP_LINE_24.create (header.width);
	init_color_map;
	
	header.is_rle8_compressed.if {	  
	  pos_buffer := header.bitmap_offset.to_integer;
	  y := header.height;
	  {end}.until_do {
	    escape := buf_item;
	    ? { x <= header.width};
	    ? { y >= 0};
	    (escape = 00h).if {
	      cmd := buf_item;
	      (cmd = 00h).if {
		b.line_h 0,y until (header.width - 1) image line_24;	
		x := 0;
		y := y - 1;
	      }.elseif {cmd = 01h} then {
		// End of file
		b.line_h 0,y until (header.width - 1) image line_24;	
		end := TRUE;
	      }.elseif {cmd = 02h} then {
		// Move cursor: usually not used except for MS icons
		buf_item;
		buf_item;		  
	      } else {
		// Pixel not compressed
		1.to cmd do { j:INTEGER;
		  line_24.item x.copy (color_map.item buf_item);
		  x := x + 1;
		};
		cmd.is_odd.if {
		  buf_item;
		};
	      };				
	    } else {
	      // Pixel compressed
	      tmp_pix := color_map.item buf_item;
	      1.to escape do { j:INTEGER;
		line_24.item x.copy tmp_pix;
		x := x + 1;
	      };
	    };
	  }; 	  	  	  
	};		
      }.elseif {header.is_24bit} then {	
	//
	// 24 Bit
	//	
	line_24 := BMP_LINE_24.create_with_capacity (header.width);
	align   := ((header.width * -3) & 011b).to_uinteger;
	set_cursor (header.bitmap_offset);
	// No compression
	0.to (header.height - 1) do { i:INTEGER;
	  read line_24 size (header.width);	  
	  set_cursor (cursor + align);
	  b.line_h 0,(header.height - i - 1) until (header.width - 1) image line_24;
	  line_24.clear;
	};	    
      };
    };
  );
 
  - is_type n:ABSTRACT_STRING :BOOLEAN <-
  // Return true if the file name has '.bmp' or '.BMP' suffix
  (
    ? {n != NULL};
    ? {! n.is_empty};
    (n.has_suffix ".bmp") || { n.has_suffix ".BMP"}
  );
  
  - is_valid_bmp:BOOLEAN <-
  (
    ? {header != NULL};
    header.is_valid_bmp
  );
  
