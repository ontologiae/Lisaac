///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ITM_LDOTS;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "`...' for inherit contract";
  
Section Inherit
  
  + parent_itm_constant:Expanded ITM_CODE;
  
Section Public

  //
  // Constructor
  //
  
  - create p:POSITION :SELF <-
  ( + result:SELF;
    result := clone;
    result.make p;
    result
  );
  
  - make p:POSITION <-
  (
    position := p;
  );
  
  //
  // Runnable
  //

  - to_run:INSTR <-
  ( + contract:ITM_LIST;
    + result:INSTR;
    + slot_code:SLOT_CODE;
    
    slot_code ?= profil_first.slot;
    contract := slot_code.previous_contract;
    (contract != NULL).if {
      result := contract.to_run_contract;
    } else {
      result := NOP;
    };
    result
  );
  
  - to_run_expr:EXPR <-
  (
    warning_error (position,"ITM_LDOTS.to_run_expr");
    crash;
    NULL
  );

