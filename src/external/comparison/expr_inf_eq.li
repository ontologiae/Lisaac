///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := EXPR_INF_EQ;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Inferior or equal binary comparison expression.";
  
Section Inherit
  
  + parent_expr_binary_cmp:Expanded EXPR_BINARY_CMP;
  
Section Public  
  
  - symbol:STRING_CONSTANT := "<=";
  
  //
  // Execute.
  //
  
  - exec left_cst:INTEGER_CST and right_cst:INTEGER_CST :EXPR <- 
  //-- C1 <= C2 -> TRUE/FALSE
  ( + result:PROTOTYPE_CST;
    
    (left_cst.value <= right_cst.value).if {
      result := PROTOTYPE_CST.create position type (type_true.default);
    } else {
      result := PROTOTYPE_CST.create position type (type_false.default);
    };    
    left_cst .remove;
    right_cst.remove;
    
    result
  );
  
  - exec:EXPR <-  
  //-- E <= E -> TRUE
  ( + result:PROTOTYPE_CST;
    
    (left ~= right).if {
      result := PROTOTYPE_CST.create position type (type_true.default);
      left .remove;
      right.remove;
    };    
    
    result
  );
  
