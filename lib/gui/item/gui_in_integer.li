/***************************************************************************
*                      Isaac Object Operating System                       *
*                             Isaac Library                                *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Jerome BOUTET  - boutet@loria.fr                       *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
****************************************************************************/

section HEADER
  
  + name        := GUI_IN_INTEGER;
  
  - comment     := "Button plateform.";
  
  - category    := MICRO;
  
  - bibliography:= "http://IsaacOS.com";
  
  - author      := "Benoit Sonntag (bsonntag@loria.fr)";
  
section INHERIT
  
  * parent_item:ITEM;
    
section PUBLIC  
  
  + value:INTEGER;
  
  + cursor:INTEGER;
  
  + min_value:INTEGER := INTEGER.minimum.to_integer;
  + max_value:INTEGER := INTEGER.maximum.to_integer;
  
  - set_range min:INTEGER to max:INTEGER <-
  ( + new_value:INTEGER;
    ? { min <= max };

    new_value := value.max min.min max;
    min_value := min;
    max_value := max;
    (value != new_value).if {
      value := new_value;
      refresh;
    };
  );
 
  - set_value v:INTEGER <-
  ( ? {v.in_range min_value to max_value};
    (v != value).if {
      value := v;
      refresh;
    };
  );
  
  //
  // Creation.
  //
  
  - create_in f:AREA at x,y:INTEGER width w:INTEGER label txt:ABSTRACT_STRING action a:INBOX :SELF <-
  ( + result:SELF;
        
    result:=clone;
    result.make_in f at x,y width w label txt action a;
    
    result
  );
  
  - make_in f:AREA at x,y:INTEGER width w:INTEGER label txt:ABSTRACT_STRING action a:INBOX <-
  (
    value := 0;
    make_in f at x,y size w,20 label txt action a;
  );
  
  //
  // Action.
  // 
  
section PRIVATE  
  
  - text_tmp:STRING := STRING.create 16;
  
section PUBLIC  
  
  - receive msg:EVENT <-
  // 0 : Out
  // 1 : in
  // 2 : input
  (
    + mouse:EVENT_MOUSE;
    + keyb:EVENT_KEYBOARD;
    + win:AREA; 
    + cmd:USMALLINT;
    + key:CHARACTER;
    
    mouse ?= msg;
    (mouse != NULL).if {
      win := INTERFACE.get_object (mouse.x_current),(mouse.y_current);
      stat
      .when (-1) then {
	(win != self).if {
	  INTERFACE.receive msg;
	};
      }
      .when 0 then {
	(win = self).if {
	  stat := 1;
	  refresh;
	} else {
	  INTERFACE.receive msg;
	};
      }
      .when 1 then {
	(win = self).if {
	  (MOUSE.left).if {
	    stat := 2;
	    text_tmp.clear;
	    value.append_in text_tmp;
	    cursor := text_tmp.count;
	    refresh;
	  };
	} else {
	  stat := 0;
	  refresh;
	};
      }
      .when 2 then {
	((win != self) && {MOUSE.left}).if {
	  stat := 0;
	  value := text_tmp.to_integer.max min_value.min max_value;
	  refresh;
	  // Action.
	  send action;
	  INTERFACE.receive msg;
	};
      };
    };
    
    keyb ?= msg;
    ((keyb != NULL) && {stat = 2}).if {
      cmd := (keyb.key >> 8).to_usmallint;
      key := (keyb.key & 0FFh).to_character;
      ((cmd & 8) != 0).if {
	key
	// Enter
	.when '\13\' then {
	  stat := 0;
	  value := text_tmp.to_integer.max min_value.min max_value;
	  refresh;
	  // Action.
	  send action;
	  INTERFACE.receive msg;
	}
	// Move cursor.	
	.when 'L' then { 
	  (cursor != 0).if {
	    cursor := cursor - 1;
	  };
	}
	.when 'R' then {
	  (cursor != text_tmp.count).if {
	    cursor := cursor + 1;
	  };
	}
	.when 'B' then {
	  cursor := 0;
	}
	.when 'E' then {
	  cursor := text_tmp.count;
	}
	// Suppr.
	.when '\8\' then {
	  (cursor != 0).if {
	    text_tmp.remove cursor;
	    cursor := cursor - 1;
	  };
	}
	.when 'S' then {
	  (cursor != text_tmp.count).if {
	    text_tmp.remove (cursor+1);
	  };
	};
      } else {
	(
	  (key.in_range '0' to '9') || 
	  {(key = '-') && {min_value < 0}}
	).if {
	  text_tmp.insert key to cursor;
	  cursor := cursor + 1;
	};
      };
      refresh;
    };
  );
  
  //
  // Display.
  //
  
  - draw x0,y0:INTEGER to x1,y1:INTEGER <-
  ( + len,len2,px:INTEGER;
    
    clipping x0,y0 to x1,y1;
       
    len := font_width name + 1;
    color color_back;
    rectangle_fill 0,0 to len,y_max;
    (stat = -1).if {
      color color_dark;
    } else {
      color black;
    };
    print name to 1,1;
    
    len := len + 1;
    move_to len,y_max;
    line_v_until 0;
    line_h_until x_max;
    color color_light;
    line_v_until y_max;
    line_h_until len;
    
    color color_back_light;
    rectangle_fill (len+1),1 to (x_max-1),(y_max-1);
    clipping (x0.max (len+1)),(y0.max 1) to (x1.min (x_max-1)),(y1.min (y_max-1));
    
    (stat != 2).if {
      text_tmp.clear;
      value.append_in text_tmp;
    };
    
    (stat = 0).if {    
      color black;
      len2 := font_width text_tmp;
      px   := x_max-2 - len2;
      print text_tmp to px,1;
    } else {
      color red;
      (stat = 2).if {
	text_tmp.insert '|' to cursor;
	len2 := font_width text_tmp; // size cursor;
	px := x_max - 2 - len2;
	print text_tmp to px,1;
	text_tmp.remove (cursor+1);
      } else {
	len2 := font_width text_tmp;
	px   := x_max-2 - len2;
	print text_tmp to px,1;
      };
    };
    
  );
  
