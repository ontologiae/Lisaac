Section Header

  + name    := SIGNED_INTEGER;

  - comment := "Generic Signed Integer.";

Section Insert

  - parent_integer:INTEGER := INTEGER;

Section Public

  - append_in buffer:STRING_BUFFER <-
  // Append in the `buffer' the equivalent of `to_string'. No new STRING_BUFFER
  // creation during the process.
  [ -? {buffer!=NULL}; ]
  ( + val:SELF;
    + i,j:INTEGER;

    (Self = 0).if {
      buffer.extend '0';
    } else {
      (Self > 0).if {
	val := Self;
      } else {
	val := - Self;
	buffer.extend '-';
      };
      i := buffer.upper+1;
      {val = 0}.until_do {
	buffer.extend ((val % 10).digit);
	val := val / 10;
      };
      j := buffer.upper;
      {i >= j}.until_do {
	buffer.swap i with j;
	j := j - 1;
	i := i + 1;
      };
    };
  );

  - to_octal:SELF <-
  // Gives coresponding octal value.
  ( + result, unit, current:SELF;

    (Self < 0).if {
      result := -((-Self).to_octal);
    } else {
      current := Self;
      unit := 1;
      {current != 0}.while_do {
	result := result + ((current & 7)*unit);
	unit := (unit << 3) + (unit << 1);
	current := current >> 3;
      };
    };
    result
  );

  //
  // Hashing:
  //

  - hash_code:INTEGER <-
  ( + result:INTEGER;

    (Self < 0).if {
      result := ~ Self;
    } else {
      result := Self;
    };

    result
  )
  [
    +? {Result>=0};
  ];

  //
  // Bound test
  //

  - bound_test low:INTEGER_64 to up:UINTEGER_64 :BOOLEAN <-
  (
    (low < to_raw_integer_64) && {up.to_raw_integer_64 > to_raw_integer_64}
  );

