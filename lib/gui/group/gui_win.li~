/***************************************************************************
*                      Isaac Object Operating System                       *
*                             Isaac Library                                *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Jerome BOUTET  - boutet@loria.fr                       *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
****************************************************************************/
section HEADER
  
  + name        := GUI_WIN;
  
  - comment     := "Box (window) plateform.";
  
  - category    := MICRO;
  
  - bibliography:= "http://IsaacOS.com";
  
  - author      := "Benoit Sonntag (bsonntag@loria.fr), Jerome Boutet (boutet@loria.fr)";
  
section INHERIT
  
  * parent_window:AREA_MASK;
  
section PRIVATE
  
  - depth:INTEGER := 4;
  
  - color_4_to_8 n:INTEGER :UINTEGER <-
  (
    ((255.to_real_16_16 /# 15) *# n).to_uinteger
  );
  
  - color_table:NATIVE_ARRAY[UINTEGER] :=
  ( + result:NATIVE_ARRAY[UINTEGER];
    + r,g,b,col:UINTEGER;
    
    result := NATIVE_ARRAY[UINTEGER].create 4096;
    0.to 4095 do { c:INTEGER;      
      r := color_4_to_8 ((c & 0F00h) >> 8);
      g := color_4_to_8 ((c & 00F0h) >> 4);
      b := color_4_to_8  (c & 000Fh);
      // Begin color effect
      r := (r >> 1) + (r >> 2);
      b := (b >> 1) + (b >> 2);
      g := (g >> 1) + (g >> 2);
      // End.
      col := (r << 16) | (g << 8) | b;
      result.put col to c;
    };
    result
  );
  
  - col_trans col:UINTEGER :UINTEGER <-
  ( + idx:UINTEGER;
    
    idx := 
    ((col >> 12) & 0F00h) | // Red
    ((col >>  8) & 00F0h) | // Green
    ((col >>  4) & 000Fh);  // Blue
    color_table.item idx
  );
  
  + line_tmp:BMP_LINE;
  
section PUBLIC
  
  + stat:INTEGER;
  
//  + is_reduce:BOOLEAN;
  
//  + is_close:BOOLEAN;
  
  + title:ABSTRACT_STRING;
  
  + title_len:INTEGER;
  
  - create_in father:AREA at x0,y0:INTEGER size w,h:INTEGER title t:ABSTRACT_STRING :SELF <-
  ( + result:SELF;
    
    result:=clone;
    result.make_in father at x0,y0 size w,h title t;
    
    result
  );
  
  - make_in father:AREA at x0,y0:INTEGER size w,h:INTEGER title t:ABSTRACT_STRING <-
  (
    title := t;    
    title_len := BITMAP.font_width title + 2; //+ 25;
    line_tmp  := BMP_LINE_32.create (VIDEO.width);
    make father from x0,y0 size (w+8+depth),(h+24+depth);
    //BOX_CANCEL.create_in self from 2,2 size 12,12;
    //BOX_REDUCE.create_in self from 14,2 size 12,12;
  );
  
  //
  // Display.
  //
  
  - draw x0,y0:INTEGER to x1,y1:INTEGER <-
  (

    clipping x0,y0 to x1,y1;    
    
    color green; //008000h;
    line_h 0,0 until (title_len+1);
    line_to (title_len+1+15),15;
    line_h_until (x_max-depth);
    
    line_h 0,19 until (x_max-depth);
    line_h 0,(y_max-depth-3) until (x_max-depth);
    
    line_v 3,20 until (y_max-depth-4);
    line_v (x_max-depth-3),20 until (y_max-depth-4);
    
    poly_move_to 0,1;
    poly_line_to (title_len+1),1;
    poly_line_to (title_len+16),16;
    poly_line_to (x_max-depth),16;
    poly_line_to (x_max-depth),18;
    poly_line_to 0,18;
    poly_trace_color blue;
    
    // Title.
    color white;
    print title to 3,(-1);
    //display_mask;
    
    margin_clip_x1 := margin_clip_x1 + (x_max - x1).min depth;
    margin_clip_y1 := margin_clip_y1 + (y_max - y1).min depth;
  );

  - slave_pixel_hard x,y:INTEGER color col:UINTEGER <- 
  ( + new_x,new_y:INTEGER;
    
    ((y < 16) && {x > (title_len+1+y)}).if {
      parent_window.slave_pixel_hard x,y color col;
    } else {      
      new_x := x - depth;
      new_y := y - depth;
      ((new_x >= 0) && {new_y >= 20}).if { 	
	parent_window.slave_pixel_hard new_x,new_y color (col_trans col); 
      };
      ((x > (x_max-depth)) || {y > (y_max-depth)}).if {
	parent_window.slave_pixel_hard x,y color col; 
      };
    };
  );
  
  - slave_line_h_hard x1,y:INTEGER until x2:INTEGER color col:UINTEGER <- 
  ( + new_x1,new_y,new_x2:INTEGER;
    
    ((y < 16) && {x2 > (title_len+1+y)}).if {
      new_x1 := x1.max (title_len+2+y);	
      parent_window.slave_line_h_hard new_x1,y until x2 color col;
    } else {
      new_x1 := 0.max (x1 - depth);
      new_x2 := x2 - depth;
      new_y  := y  - depth;
      ((new_x2 >= 0) && {new_y >= 20}).if {
	parent_window.slave_line_h_hard new_x1,new_y until new_x2 color (col_trans col);
      };
      (y > (y_max-depth)).if {
	parent_window.slave_line_h_hard x1,y until x2 color col; 
      }.elseif {x2 > (x_max-depth)} then {
	new_x1 := x1.max (x_max-depth+1);
	parent_window.slave_line_h_hard new_x1,y until x2 color col; 
      };
    };    
  );

  - slave_line_h_hard x1,y:INTEGER until x2:INTEGER image line:BMP_LINE offset ofs:INTEGER <-
  ( + new_x1,new_y,new_x2,ofs2:INTEGER;
    + ofsd:INTEGER;
    + col:UINTEGER;
        
    ((y < 16) && {x2 > (title_len+1+y)}).if {
      new_x1 := x1.max (title_len+2+y);	
      parent_window.slave_line_h_hard new_x1,y until x2 image line offset (ofs+new_x1-x1);
    } else {
      new_x1 := x1 - depth;
      new_x2 := x2 - depth;
      new_y  := y  - depth;
      ((new_x2 >= 0) && {new_y >= 20}).if {
	(new_x1 < 0).if {
	  ofs2   := ofs - new_x1;
	  new_x1 := 0;
	} else {
	  ofs2 := ofs;
	};
	ofs2.to (ofs2+new_x2-new_x1) do { o:INTEGER;
	  col := line.get_color o;
	  line_tmp.put (col_trans col) to ofsd;
	  ofsd := ofsd + 1;
	};
	parent_window.slave_line_h_hard new_x1,new_y until new_x2 image line_tmp offset 0;
	//color (col_trans col);
      };
      (y > (y_max-depth)).if {
	parent_window.slave_line_h_hard x1,y until x2 image line offset ofs;
      }.elseif {x2 > (x_max-depth)} then {
	new_x1 := x1.max (x_max-depth+1);
	parent_window.slave_line_h_hard new_x1,y until x2 image line offset (ofs+new_x1-x1);
      };
    };        
  );

  //
  // Event.
  //
  
  - get_object x,y:INTEGER :AREA <-
  ( + result:AREA;
    + rel_x,rel_y:INTEGER;
    
    result := parent_window.get_object x,y;
    (result=self).if {
      rel_x := x - x_window;
      rel_y := y - y_window;
      ((rel_y<16) && {rel_x>(title_len+1+rel_y)}).if {
	result := NULL;
      };
    };
    result
  );
    
  - receive msg:EVENT <-  
  ( + evt_mouse:EVENT_MOUSE;
    + win:AREA;
    
    evt_mouse ?= msg;
    (evt_mouse != NULL).if { 
      /*
      is_reduce.if {
	((evt_mouse.is_in) &&
	{(get_y_window + y_max)>INTERFACE.screen.y_max} && {evt_mouse.x_relative>24}).if {
	  // Window up. 
	  move 0,(- y_max + 15);	
	};
	(
	  (evt_mouse.is_out) &&
	  {(get_y_window + y_max)<=INTERFACE.screen.y_max} &&
	  {get_object (evt_mouse.x_current),(evt_mouse.y_current) = NULL}
	).if {
	  // Window down.
	  move 0,(y_max - 15);
	};	
      } else {*/
	(evt_mouse.right).if {
	  first;
	};
	((evt_mouse.is_moving_only) && {evt_mouse.left}).if {
	  move (evt_mouse.dx),(evt_mouse.dy);
	} else {
	  win := INTERFACE.get_object (evt_mouse.x_current),(evt_mouse.y_current);
	  (win != self).if {
	    stat := 0;
	    refresh;
	    INTERFACE.receive msg;
	  } else {
	    (stat != 1).if {
	      stat := 1;
	      refresh;
	    };
	  };
	};
     // };
    };
  );
  
  //
  // Message.
  //
  
  - close <-
  ( 
    (is_reduce).if {
      INTERFACE.screen.remove_bar self;
    };
    delete;
  );
  




