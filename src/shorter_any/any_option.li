///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ANY_OPTION;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  
Section Inherit
  
  - parent_object:OBJECT := OBJECT;
  
Section Public
  
  - is_shorter2:BOOLEAN;
  
  - is_shorter :BOOLEAN;
  
  - is_short_code:BOOLEAN;
  - is_short_private:BOOLEAN;
  - is_short_recursive:BOOLEAN;
  
  - put tok:ABSTRACT_STRING to buf:STRING like key:STRING_CONSTANT <-
  ( + lst:LINKED_LIST(STRING_CONSTANT);
    
    (key != NULL).if {
      lst := PARSER.short_dico.fast_reference_at key;
      (lst != NULL).if {
        (lst.lower).to (lst.upper) do { j:INTEGER;
          (lst.item j = NULL).if {          
            buf.append tok;
          } else {
            buf.append (lst.item j);
          };
        };
      };
    };
  );