///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := EXPR_NOT;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Not unary arithmetic expression.";
  
Section Inherit
  
  + parent_expr_unary:Expanded EXPR_UNARY;
  
Section Private  
  
  - symbol:CHARACTER <- '~';
    
  //
  // Execute.
  //
  
  - exec_conservator:EXPR <-
  //-- ~ (~ E1 & ~ E2) -> E1 | E2
  //-- ~ (~ E1 | ~ E2) -> E1 & E2
  //-- ~ ~ E -> E
  ( + or:EXPR_OR;
    + and:EXPR_AND;
    + neg1,neg2:EXPR_NOT;
    + result:EXPR;
    
    and ?= right;
    (and != NULL).if {
      neg1 ?= and.left;
      neg2 ?= and.right;
      ((neg1 != NULL) && {neg2 != NULL}).if {
	result := EXPR_OR.create position with (neg1.right) and (neg2.right);
      };
    } else {
      or ?= right;
      (or != NULL).if {
	neg1 ?= or.left;
	neg2 ?= or.right;
	((neg1 != NULL) && {neg2 != NULL}).if {
	  result := EXPR_AND.create position with (neg1.right) and (neg2.right);
	};
      } else {
	neg1 ?= right;
	(neg1 != NULL).if {
	  result := neg1.right;
	};
      };
    };
    result
  );
  
  - exec_right right_cst:INTEGER_CST :EXPR <- 
  //-- ~ C1 -> C2
  ( + result:EXPR;
    (right_cst.is_signed).if {
      right_cst.set_value (~ right_cst.value);
      result := right_cst;
    };
    result
  );  
  
  






