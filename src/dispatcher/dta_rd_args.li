Section Header

  + name        := DTA_RD_ARGS;

  - comment     := "Read site with arguments";

Section Inherit

  + parent_dta_rd:Expanded DTA_RD;

Section Public

  - self_arg:EXPR <- argument_list.first;

  // Add.

  + argument_list:ARRAY EXPR;

  + copy_argument:BOOLEAN;

  - parameter_to_type p:ITM_TYPE_PARAMETER :TYPE_FULL <-
  ( + result:TYPE_FULL;
    + idx:INTEGER;
    // For Genericity or SELF.
    result := parent_dta_rd.parameter_to_type p;
    (result = NULL).if {
      // For type parametric.
      idx := slot.get_index_argument_type p;
      (idx != - 1).if {
        result := argument_list.item idx.static_type;
      };
    };
    result
  );

  //
  // Creation.
  //

  - create p:POSITION call sl:ITM_SLOT with args:ARRAY EXPR intern flag:BOOLEAN :SELF <-
  [ -? {p != 0}; ]
  ( + result:SELF;

    result := clone;
    result.make p call sl with args intern flag;
    result
  );

  - make p:POSITION call sl:ITM_SLOT with args:ARRAY EXPR intern flag:BOOLEAN <-
  (
    position      := p;
    slot          := sl;
    argument_list := args;
    result_expr   := get_expr_result;
    is_intern     := flag;
    ((debug_level_option != 0) && {list_current != PROTOTYPE.external_list}).if {
      (profil_current = NULL).if {
        context := context_main;
      } else {
        context := profil_current.context;
      };
    };
  );

  //
  // Just for ITM_EXPRESSION
  //

  - create_partial p:POSITION call sl:ITM_SLOT :SELF <-
  ( + result:SELF;

    result := clone;
    result.make_partial p call sl;
    result
  );

  - make_partial p:POSITION call sl:ITM_SLOT <-
  (
    position := p;
    slot := sl;
  );

  //
  // Display.
  //

  - display buffer:STRING_BUFFER <-
  (
    buffer.append "DTA_RD_ARGS:";
    buffer.append (slot.name);
  );

  //
  // Service
  //

  - remove <-
  (
    (! copy_argument).if {
      (argument_list.lower).to (argument_list.upper) do { j:INTEGER;
	argument_list.item j.remove;
      };
      copy_argument := TRUE;
    };
  );

Section NODE_STYLE, SELF

  - get_argument:ARRAY EXPR <-
  ( + result:ARRAY EXPR;

    (copy_argument).if {
      result := ARRAY EXPR .create_with_capacity (argument_list.count);
      (argument_list.lower).to (argument_list.upper) do { j:INTEGER;
	result.add_last (argument_list.item j.my_copy);
      };
    } else {
      result := argument_list;
      copy_argument := TRUE;
    };
    result
  );

